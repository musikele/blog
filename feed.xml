<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.0">Jekyll</generator><link href="https://michelenasti.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://michelenasti.com/" rel="alternate" type="text/html" /><updated>2018-01-28T19:09:31+01:00</updated><id>https://michelenasti.com/</id><title type="html">Michele Nasti’s blog</title><subtitle>I'm a full stack Developer with an eye for the web.</subtitle><entry><title type="html">Remap backtick, ñ and tilde characters on Windows computers</title><link href="https://michelenasti.com/2018/01/27/remap-backtick-tilde-on-windows.html" rel="alternate" type="text/html" title="Remap backtick, ñ and tilde characters on Windows computers" /><published>2018-01-27T01:00:00+01:00</published><updated>2018-01-27T10:23:38+01:00</updated><id>https://michelenasti.com/2018/01/27/remap-backtick-tilde-on-windows</id><content type="html" xml:base="https://michelenasti.com/2018/01/27/remap-backtick-tilde-on-windows.html">&lt;p&gt;Since the switch to Windows I had a problem to solve as soon as possible: find a way to write the backtick (`) and tilde (~) characters.&lt;/p&gt;

&lt;p&gt;Both the characters, on a mac, can be stroked by pressing &lt;code&gt;AltGr + \&lt;/code&gt; (backtick) and  &lt;code&gt;AltGr + 6&lt;/code&gt; (tilde).&lt;/p&gt;

&lt;p&gt;On Windows the actual combination is incredible and unmemorizable - and, on my Dell XPS laptop, I just can’tuse it. It requires me to use the numeric pad (that I don’t have) so I have to press the function key… well, it’s a lot of strokes only to gain a single character.&lt;/p&gt;

&lt;p&gt;So, that’s my solution.&lt;/p&gt;

&lt;h2 id=&quot;autohotkey&quot;&gt;AutoHotkey&lt;/h2&gt;

&lt;p&gt;The first step is to &lt;a href=&quot;https://autohotkey.com/&quot; title=&quot;AutoHotkey official website&quot;&gt;install AutoHotkey&lt;/a&gt; from the official website.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/autohotkey.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What is AutoHotkey? Here is their official description:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;AutoHotkey is a free, open-source scripting language for Windows that  allows users to easily create small to complex scripts for all kinds of  tasks such as: form fillers, auto-clicking, macros, etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What we really need is the ability to remap some keys for our purposes.&lt;/p&gt;

&lt;h2 id=&quot;write-a-autohotkey-script&quot;&gt;Write a AutoHotkey script&lt;/h2&gt;

&lt;p&gt;Once downloaded, we need to create the AutoHotkey script with our desired configuration.&lt;/p&gt;

&lt;p&gt;AutoHotkey doesn’t do anything on its own; it needs a script to tell it what to do.&lt;/p&gt;

&lt;p&gt;So we have to create a file &lt;code&gt;startup.ahk&lt;/code&gt; to fill in with our commands.&lt;/p&gt;

&lt;p&gt;Here is mine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;^&amp;gt;!6:: 
   Send ~
Return

&amp;lt;^&amp;gt;!\::
	SendRaw ```
Return

&amp;lt;^&amp;gt;!n::
	Send ñ
Return
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Explanation of the first block (the others are similar):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;&amp;lt;^&amp;gt;!&lt;/code&gt; means &lt;strong&gt;AltGr&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;&amp;lt;^&amp;gt;!6&lt;/code&gt; means &lt;em&gt;AltGr + 6&lt;/em&gt;*, pressed together&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;::&lt;/code&gt; means that the input sequence has endend.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Send ~&lt;/code&gt;: that’s the AutoHotkey magic. It will send the &lt;code&gt;~&lt;/code&gt; character upon receiving of this sequence.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To send the backtick, I had to use the function &lt;code&gt;SendRaw&lt;/code&gt; because the backtick is a reserved character in AutoHotkey.&lt;/p&gt;

&lt;p&gt;I have also mapped the &lt;em&gt;n with tilde&lt;/em&gt; (&lt;code&gt;ñ&lt;/code&gt;) useful if you write some spanish.&lt;/p&gt;

&lt;h2 id=&quot;execute-the-script-at-startup&quot;&gt;Execute the script (at startup)&lt;/h2&gt;

&lt;p&gt;To simply execute this script, just double click on it. Now you can start writing backticks, tildes, and ñ everywhere.&lt;/p&gt;

&lt;p&gt;If you want to start the script automatically at every Windows start, just put this script in this folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Users\$USER\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember to change &lt;code&gt;$USER&lt;/code&gt; with your username.&lt;/p&gt;

&lt;p&gt;Now Markdown will not be a problem anymore!&lt;/p&gt;</content><author><name>musikele</name></author><category term="Italiano" /><category term="windows" /><category term="dell" /><category term="xps" /><category term="backtick" /><category term="keyboard" /><category term="mapping" /><category term="tilde" /><summary type="html">Since the switch to Windows I had a problem to solve as soon as possible: find a way to write the backtick (`) and tilde (~) characters.</summary></entry><entry><title type="html">Perchè la Green Card è una lotteria?</title><link href="https://michelenasti.com/2018/01/17/perche-la-green-card-e-una-lotteria.html" rel="alternate" type="text/html" title="Perchè la Green Card è una lotteria?" /><published>2018-01-17T01:00:00+01:00</published><updated>2018-01-18T10:47:12+01:00</updated><id>https://michelenasti.com/2018/01/17/perche-la-green-card-e-una-lotteria</id><content type="html" xml:base="https://michelenasti.com/2018/01/17/perche-la-green-card-e-una-lotteria.html">&lt;p&gt;Ho beccato un post on line in cui si chiedeva se un lavoratore da remoto può lavorare dagli USA per clienti italiani. La risposta precisa ve la potrà dare solo un avvocato esperto (o il consolato USA); semplifichiamo dicendo che se si lavora dal territorio USA bisogna pagare le tasse americane. Per lavorare legalmente in USA ci sono &lt;a href=&quot;https://www.us-immigration.com/greencard/Green-Card-Lottery.html&quot;&gt;molte strade&lt;/a&gt;: la &lt;strong&gt;Green Card&lt;/strong&gt; è una di queste.&lt;/p&gt;

&lt;p&gt;In questo articolo parleremo del &lt;strong&gt;perchè gli USA hanno scelto la lotteria come sistema di assegnazione&lt;/strong&gt; (e perchè secondo me hanno fatto bene).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/green_card_lottery.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cosè-la-green-card&quot;&gt;Cos’è la Green Card?&lt;/h2&gt;

&lt;p&gt;La &lt;a href=&quot;http://america24.com/news/come-si-ottiene-la-green-card&quot;&gt;&lt;strong&gt;Green Card&lt;/strong&gt;&lt;/a&gt; è l’equivalente del &lt;em&gt;permesso di soggiorno italiano&lt;/em&gt;, ma permette di lavorare, a tempo indeterminato, negli USA. In pratica chi vince una Green Card può tranquillamente trasferirsi e creare reddito: non ci sono limiti di nessun tipo (ma evitate di violare la legge).&lt;/p&gt;

&lt;h2 id=&quot;perchè-si-dice-che-è-una-lotteria&quot;&gt;Perchè si dice che è una lotteria?&lt;/h2&gt;

&lt;p&gt;Perché lo è: il numero di posti messi a disposizione ogni anno è di circa 50.000, a fronte di un numero enorme di richiedenti. E’ una lotteria per promuovere la diversità, quindi si cerca di far arrivare negli States immigranti da qualsiasi area del mondo (tranne alcune nazioni che hanno in essere embarghi con gli Stati Uniti).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/lottery.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Per molti tutto ciò potrebbe sembrare un’&lt;strong&gt;americanata,&lt;/strong&gt; nel senso che magari c’erano altri modi per assegnare questa risorsa a quanti ne richiedevano. Il problema è che tutti gli altri sistemi hanno pro e contro, e la lotteria è semplicemente il metodo più equo, rapido, ed economico.&lt;/p&gt;

&lt;p&gt;Sostanzialmente quando vuoi offrire una risorsa a qualcuno hai molti modi per farlo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;L’&lt;strong&gt;assegnazione diretta&lt;/strong&gt; è il metodo più clientelare che c’è: io titolare di una risorsa  (es. un appalto) decido il vincitore in maniera del tutto arbitraria.&lt;/li&gt;
  &lt;li&gt;Il  &lt;strong&gt;bando di gara “beauty contest”&lt;/strong&gt; prevede che tu la commissione scelga il progetto migliore. Anche in questo caso la corruzione la fa da padrona.&lt;/li&gt;
  &lt;li&gt;Le &lt;strong&gt;aste al ribasso o al rialzo&lt;/strong&gt; sono frequenti nel settore dei diritti televisivi o  per gli appalti: in questo caso, aziende con forti disponibilità vinceranno sicuramente, o comunque se sai chi altro partecipa e qual è la loro disponibilità economica (ad esempio corrompendo le persone giuste), ti basterà fare un’offerta leggermente maggiore. In questo caso chi ci perde è chi assegna il bene: non intasca il reale valore di quel bene, ma il valore appena necessario per ottenerlo.&lt;/li&gt;
  &lt;li&gt;L’&lt;strong&gt;asta di secondo prezzo&lt;/strong&gt; è un meccanismo intelligente, anche eBay funziona così, e su questa cosa &lt;a href=&quot;https://it.wikipedia.org/wiki/William_Vickrey&quot;&gt;Vickrey ci ha vinto un premio nobel per l’economia&lt;/a&gt;. Lo spiego in parole povere: facciamo un’asta a busta chiusa, ognuno di noi offre quanto secondo lui quel bene “vale”, e vince ovviamente chi offre di più MA paga il secondo prezzo più alto. Tramite una serie di teoremi (che a suo tempo ho anche studiato) si può dimostrare che chi partecipa a questo tipo di asta è meno invogliato a offrire di meno rispetto al valore reale.&lt;/li&gt;
  &lt;li&gt;il &lt;strong&gt;Click Day,&lt;/strong&gt; mi vergogno addirittura a metterlo in questa lista, è una di quelle cavolate all’italiana venute fuori dalla mente di chissà quale burocrate. Praticamente in un certo giorno e a una certa ora, si fa una gara di velocità: i più veloci a &lt;em&gt;cliccare&lt;/em&gt; si assegnano quel bene_._ Capirete che tutto dipende dall’affidabilità del sistema di rilevamento, dalla latenza della velocità internet, dalla dimestichezza che ha l’operatore con mouse e tastiera, e dalla fortuna.&lt;/li&gt;
  &lt;li&gt;E veniamo infine alla &lt;strong&gt;lotteria&lt;/strong&gt;: è il meccanismo più equo ed economico quando hai un tot di posti disponibili (es. 50.000) e una quantità enorme di persone che partecipa (es. 10.000.000): semplicemente decide il caso. Costa poco, è di facile realizzazione, non richiede di revisionare tutte le domande per verificare titoli o altro (beauty contest), nè è accessibile solo ai ricchi (aste). Ah, e non vince il più veloce.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se avete seguito uno dei primi link di questo articolo sappiate che vincere la lotteria per la Green Card è solo il primo passo: seguiranno un paio di anni di colloqui con l’ambasciata, e tanta burocrazia. &lt;strong&gt;La cosa più semplice é di trovare un’azienda USA che sponsorizzi la vostra candidatura per farvi lavorare lì&lt;/strong&gt;. In bocca al lupo!&lt;/p&gt;</content><author><name>musikele</name></author><category term="Italiano" /><category term="green card" /><category term="usa" /><category term="lotteria" /><category term="michele risponde" /><summary type="html">Ho beccato un post on line in cui si chiedeva se un lavoratore da remoto può lavorare dagli USA per clienti italiani. La risposta precisa ve la potrà dare solo un avvocato esperto (o il consolato USA); semplifichiamo dicendo che se si lavora dal territorio USA bisogna pagare le tasse americane. Per lavorare legalmente in USA ci sono molte strade: la Green Card è una di queste.</summary></entry><entry><title type="html">La mia esperienza col Test Driven Development</title><link href="https://michelenasti.com/2018/01/12/la-mia-esperienza-col-test-driven-development.html" rel="alternate" type="text/html" title="La mia esperienza col Test Driven Development" /><published>2018-01-12T01:00:00+01:00</published><updated>2018-01-12T10:27:37+01:00</updated><id>https://michelenasti.com/2018/01/12/la-mia-esperienza-col-test-driven-development</id><content type="html" xml:base="https://michelenasti.com/2018/01/12/la-mia-esperienza-col-test-driven-development.html">&lt;p&gt;Il &lt;strong&gt;Test Driven Development&lt;/strong&gt; è una pratica &lt;em&gt;mistica&lt;/em&gt;: consiste nello &lt;strong&gt;scrivere prima i test e poi il vero e proprio codice che ti serve per realizzare quella funzionalità&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Testing_in_Progress.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Faccio un esempio: immaginiamo di dover realizzare una funzione &lt;code&gt;cercaSuCanale5()&lt;/code&gt; che, presa in input una data (es. &lt;code&gt;2018-12-31&lt;/code&gt; e una stringa (es. &lt;code&gt;concertone&lt;/code&gt;) ritorni tutti i programmi che su Canale  quel giorno 5 contengono quella stringa nel titolo o nella descrizione.&lt;/p&gt;

&lt;p&gt;E’ un caso semplice, magari richiederà qualche ricerca per trovare le API da interrogare per tirare fuori i dati giusti, oppure se abbiamo questi dati disponibili nel db li andremo a prendere da lì, ma &lt;strong&gt;è un caso abbastanza interessante per discutere di testing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Se realizzo questa funzionalità col TDD, prima ancora di scrivere la vera e propria funzione &lt;code&gt;cercaSuCanale5()&lt;/code&gt; , scriverò questi casi:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;un test che deve rispondere con un’eccezione quando chiamo la funzione con una data &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Un test che deve rispondere con &lt;em&gt;tutta la programmazione televisiva di quel giorno&lt;/em&gt;, se invio una data, ma la stringa è null o vuota.&lt;/li&gt;
  &lt;li&gt;Un test che, data una data valida e una stringa (es. &lt;code&gt;concer&lt;/code&gt;) ritorna gli eventi che contengono questa stringa nel titolo o nella descrizione per quella data.&lt;/li&gt;
  &lt;li&gt;Un test che, data una data valida e una stringa implausibile (es. &lt;code&gt;abcdefgh123&lt;/code&gt;) ritorna una lista vuota.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hai notato? &lt;strong&gt;Solo per scrivere questi test abbiamo in pratica definito come si comporta la nostra funzione.&lt;/strong&gt; Questo è un ottimo motivo per fare TDD: ha un funzione &lt;em&gt;documentativa&lt;/em&gt; del codice.&lt;/p&gt;

&lt;p&gt;Tornando ai test, la cose si fanno difficili quando la nostra funzione accede a qualcosa di esterno per elaborare i dati. Ad esempio, se &lt;code&gt;cercaSuCanale5()&lt;/code&gt; chiama un’API esterna, chi ci garantisce che per la stessa data e la stessa stringa i dati saranno sempre gli stessi? Stesso dubbio per un’eventuale implementazione su DB: magari chi gestisce API o DB impone che dopo 1 anno (o un giorno!) quei dati vengano cancellati, per cui il test dopo 1 anno (o un giorno!) non funzionerà più.&lt;/p&gt;

&lt;p&gt;Per evitare tutto questo, in genere nel test si &lt;em&gt;mocka&lt;/em&gt; la chiamata a tutto ciò che è esterno, ossia si dice al test che quella chiamata esterna deve essere sostituita da un &lt;strong&gt;mock&lt;/strong&gt; che risponderà sempre allo stesso modo.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Già qui i detrattori del TDD diranno che, nel momento in cui introduciamo i mock, stiamo sostituendo il mondo reale con una finzione e tanti casi reali non saranno più riscontrabili. Purtroppo è vero, un mock è una semplificazione, ma è l’unica opzione che abbiamo quando abbiamo a che fare con dati mutabili.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ecco altre fantastiche “regole” del TDD:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;i test scritti devono fallire tutti prima di scrivere la vera e propria funzione&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;mai scrivere codice di produzione senza un test che fallisce&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;se accade un bug in produzione, scrivi prima un test che lo riproduce e poi correggi il bug (e il test)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;la-mia-esperienza-col-tdd&quot;&gt;La mia esperienza col TDD&lt;/h2&gt;

&lt;p&gt;Alla mia prima esperienza lavorativa mi hanno iniziato al TDD: “&lt;strong&gt;scrivi prima il test e poi il  codice&lt;/strong&gt;. In questo modo avrai chiaro cosa il tuo codice deve fare, e come”.&lt;/p&gt;

&lt;p&gt;Addirittura una delle pratiche era che &lt;strong&gt;quando scaricavamo un modulo da SVN dovevamo lanciare i test, se questi fallivano potevamo anche &lt;em&gt;richiamare&lt;/em&gt; l’ultimo collega che aveva committato senza correggere i test.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bello.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Poi abbiamo iniziato a correre&lt;/strong&gt;, perché le scadenze non venivano rispettate, e  la prima cosa che succede quando corri è che butti a mare la qualità.  Di conseguenza i test iniziarono a scarseggiare.&lt;/p&gt;

&lt;p&gt;Inoltre,  questo lo notano pochi, &lt;strong&gt;i test sono altro codice da manutenere&lt;/strong&gt;:  quando fai una modifica al codice dell’app (e il codice cambia, perchè cambiano i requisiti) devi inevitabilmente fare  modifiche anche al codice del test, e questo porta via fino al doppio del tempo. Quante aziende hanno schedule così &lt;em&gt;rilassate&lt;/em&gt; da poterselo permettere?&lt;/p&gt;

&lt;p&gt;Alla fine faccio alcuni test unitari, molti test di integrazione in cui mocko db o chiamate esterne, e la priorità é di testare ciò che é difficile da testare a mano.&lt;/p&gt;

&lt;p&gt;Tutto  questo discorso vale, nel mio caso, per il backend, perché &lt;strong&gt;per il frontend mi sono  ritrovato da solo a voler scrivere test - per gli altri non era nemmeno un’opzione!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Non mi arrendo però: ora che devo mettere mano a codice React e Vue, voglio assolutamente riprovare a scrivere codice di test per il frontend, e vedere a quali benefici porta.&lt;/p&gt;</content><author><name>musikele</name></author><category term="Italiano" /><category term="test driven development" /><category term="tdd" /><category term="testing" /><category term="mock" /><summary type="html">Il Test Driven Development è una pratica mistica: consiste nello scrivere prima i test e poi il vero e proprio codice che ti serve per realizzare quella funzionalità.</summary></entry><entry><title type="html">I trend Javascript del 2018</title><link href="https://michelenasti.com/2018/01/09/i-trend-javascript-del-2018.html" rel="alternate" type="text/html" title="I trend Javascript del 2018" /><published>2018-01-09T01:00:00+01:00</published><updated>2018-01-10T18:49:50+01:00</updated><id>https://michelenasti.com/2018/01/09/i-trend-javascript-del-2018</id><content type="html" xml:base="https://michelenasti.com/2018/01/09/i-trend-javascript-del-2018.html">&lt;p&gt;&lt;strong&gt;Quali sono le “cose” da tenere maggiormente d’occhio nello sviluppo JavaScript nel 2018?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ci sono alcuni trend che si sono sviluppati verso la fine del 2017 e che dovranno necessariamente essere inseguiti.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/trends.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Async/await&lt;/strong&gt;:  praticamente l’aggiunta più utile al linguaggio da qualche anno a questa parte; ora è possibile programmare in asincrono con estrema  facilità. Da studiare obbligatoriamente&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Webpack&lt;/strong&gt;, &lt;strong&gt;rollup, parcel, etc.&lt;/strong&gt;:  i bundler stanno diventando il nuovo terreno di sfida, specialmente nel frontend. Capire come funzionano, come estenderli e come usarli per le  proprie esigenze darà sicuramente un vantaggio competitivo.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Typescript&lt;/strong&gt;:  i tipi statici sono una manna dal cielo, permettono di fare refactoring  molto più rapidamente. Impararlo è molto semplice e la sfida sarà  usarlo su NodeJS e sugli altri framework (react, vue…)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt; &lt;strong&gt;(frontend, backend)&lt;/strong&gt;:  c’è troppo poco testing js in giro. Manca il test del frontend, manca  il test del backend. Inoltre esistono decine di framework di testing  differenti che si danno battaglia. Di sicuro, per un linguaggio  dinamico, il testing diventa essenziale se vuoi costruire applicazioni  grosse.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Modularizzazione (Frontend) /Microservizi&lt;/strong&gt; &lt;strong&gt;(backend)&lt;/strong&gt;:  questo vale per tutti i linguaggi: il trend del momento è realizzare  microservizi che lavorano insieme. Capire come strutturare applicazioni  di questo tipo diventa fondamentale per uno stack moderno.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;VueJS (frontend)&lt;/strong&gt;:  in un mondo dominato da Angular e React, Vue si propone come una delle  tante alternative, di sicuro quella che ha attirato più consensi. Io  personalmente lo conosco e lo uso con piacere.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GraphQL&lt;/strong&gt;: è  un’alternativa a REST che permette di semplificare il modo di  richiedere i dati a un server. I big l’hanno già scelto, per  l’enterprise invece c’è ancora tanto da fare.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Buono studio!&lt;/p&gt;</content><author><name>musikele</name></author><category term="Italiano" /><category term="michele risponde" /><category term="javascript" /><category term="trends" /><category term="typescript" /><category term="webpack" /><category term="async await" /><category term="vuejs" /><category term="graphql" /><summary type="html">Quali sono le “cose” da tenere maggiormente d’occhio nello sviluppo JavaScript nel 2018?</summary></entry><entry><title type="html">E’ importante conoscere come sono fatte le librerie che usiamo?</title><link href="https://michelenasti.com/2018/01/07/e-importante-conoscere-come-sono-fatte-le-librerie-che-usiamo.html" rel="alternate" type="text/html" title="E' importante conoscere come sono fatte le librerie che usiamo?" /><published>2018-01-07T01:00:00+01:00</published><updated>2018-01-07T17:55:56+01:00</updated><id>https://michelenasti.com/2018/01/07/e-importante-conoscere-come-sono-fatte-le-librerie-che-usiamo</id><content type="html" xml:base="https://michelenasti.com/2018/01/07/e-importante-conoscere-come-sono-fatte-le-librerie-che-usiamo.html">&lt;p&gt;Domanda:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;fin dal primo giorno, alla facoltà di Ingegneria Informatica mi è stata inculcata un’idea che tutt’ora fatico ad accettare. Visto che ci sono infinite librerie che ti rendono disponibili delle funzioni avanzate, il tuo lavoro principale non è riscrivere quelle funzioni, ma saperle  usare e adattare per i tuoi scopi. Faccio un esempio stupido: una  libreria python per l’elaborazione di file pdf. Due righe e posso copiare, fondere, togliere pagine. &lt;strong&gt;Però non saprò mai come funziona.&lt;/strong&gt; &lt;strong&gt;E  questa cosa mi angoscia tantissimo.&lt;/strong&gt; Nel senso, posso aprire la libreria e  andarmele a leggere, ovviamente. Ma passerei probabilmente ore a capire il loro funzionamento. Sono l’unico che è turbato da questa cosa? Chiaramente mi riferisco a chi sta ancora studiando, come me.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Risposta:&lt;/p&gt;

&lt;p&gt;Nel thread originale, su facebook, ho risposto che &lt;strong&gt;da studente non c’è niente di meglio che provare a rifare quelle librerie proprio per capire come sono state fatte.&lt;/strong&gt; All’università sono felice di aver reimplementato tutte le strutture dati, perchè ora le uso con cognizione di causa.&lt;/p&gt;

&lt;p&gt;Un altro esempio: quando ho iniziato a studiare NodeJS, sentivo la mancanza di una libreria di logging come Log4J in Java. Una delle prime cose che ho fatto è stata di scrivermene una mia, che ovviamente faceva schifo ed era pure piena di bug, ma che mi ha aiutato a imparare meglio proprio NodeJS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/rinventare-la-ruota.jpg&quot; alt=&quot;&quot; /&gt;&lt;strong&gt;Nel mondo del lavoro vero c’è una discriminante: il tempo.&lt;/strong&gt; Gli studenti scopriranno prima o poi che ogni giorno di lavoro in più equivale a molti soldi spesi dall’azienda, quindi meno tempo si impiega meglio è. E questo impone che &lt;strong&gt;non si può reinventare la ruota,&lt;/strong&gt; non si può riscrivere ogni possibile funzione che abbiamo già disponibile da qualche parte on line. &lt;strong&gt;E’ anche il motivo per cui delle persone si sono inventate i framework&lt;/strong&gt;: &lt;strong&gt;risolvono problemi che altri già hanno avuto&lt;/strong&gt;, risparmiando tutto il tempo necessario a tirare su un progetto.&lt;/p&gt;

&lt;h3 id=&quot;leccezione-che-conferma-la-regola-cosa-ci-insegna-elon-musk&quot;&gt;L’eccezione che conferma la regola: cosa ci insegna Elon Musk&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/Elon_Musk_2015.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ho tirato in ballo un &lt;em&gt;pezzo da 90&lt;/em&gt; e l’ho fatto per un motivo ben preciso. Tesla è un’azienda che produce auto elettriche. Era da una settantina d’anni che non si fondavano nuove case automobilistiche &lt;em&gt;consumer,&lt;/em&gt; e infatti ciò che ha realizzato, rivisto con gli occhi di oggi, sembra comunque una pazzia. Per creare un’auto dal nulla non ha seguito il solito processo che impiegano gli altri costruttori: &lt;strong&gt;ogni singolo pezzo delle Tesla viene prodotto da loro stessi.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;E ancora: quando ha fondato SpaceX si stava buttando in un settore dominato da poche grandi aziende che avevano formato un oligopolio. Era difficile e dispendioso trovare, tra le tante cose, una base di lancio per poter sperimentare i propri razzi costruiti &lt;em&gt;in-house&lt;/em&gt;, &lt;strong&gt;senza subappaltare nulla&lt;/strong&gt;. Quindi che fa Musk? &lt;strong&gt;Compra un atollo nel Pacifico da cui farà partire tutti i suoi razzi.&lt;/strong&gt; In questo modo non ha dovuto più chiedere nulla a nessuno, e ha velocizzato di molto il processo di realizzazione e sperimentazione.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Musk ha provato a “usare quanto c’era di già fatto”&lt;/em&gt;, sia nel caso di Tesla che di SpaceX, ma a un certo punto si è trovato nella condizione di dipendere troppo da altro e di dover riciclare soluzioni non ottime per il suo contesto. Per Tesla, i motori erano sviluppati per altri tipi di carburanti, le batterie erano pensate per altri sistemi etc. &lt;strong&gt;Riprogettare tutto da zero era l’unica strada percorribile per ottenere il miglior progetto, e soprattutto la miglior execution possibile.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;La lezione che possiamo trarne è che &lt;strong&gt;se dipendiamo in maniera decisa da qualcosa, e questa non ci soddisfa, è il caso che ce la riscriviamo da noi&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Se il &lt;em&gt;core&lt;/em&gt; della tua azienda è, ad esempio, processare pagamenti con le carte di credito, e le attuali soluzioni presenti sul mercato costano troppo o sono lente, è il caso che tu ti scriva il tuo payment processor.&lt;/p&gt;

&lt;p&gt;Sarà lungo e non sarà una passeggiata, ma dopo avrai la miglior soluzione possibile.&lt;/p&gt;

&lt;p&gt;Poi la devi vendere, ma questa è un’altra storia :)&lt;/p&gt;</content><author><name>musikele</name></author><category term="Italiano" /><category term="michele risponde" /><category term="programmazione" /><category term="elon musk" /><category term="tesla" /><category term="spacex" /><summary type="html">Domanda:</summary></entry><entry><title type="html">Essere programmatori e vivere di progetti propri</title><link href="https://michelenasti.com/2018/01/06/essere-programmatori-e-vivere-di-progetti-propri.html" rel="alternate" type="text/html" title="Essere programmatori e vivere di progetti propri" /><published>2018-01-06T01:00:00+01:00</published><updated>2018-01-06T23:50:26+01:00</updated><id>https://michelenasti.com/2018/01/06/essere-programmatori-e-vivere-di-progetti-propri</id><content type="html" xml:base="https://michelenasti.com/2018/01/06/essere-programmatori-e-vivere-di-progetti-propri.html">&lt;p&gt;Inauguriamo una nuova sezione, ossia “Michele risponde” :)&lt;/p&gt;

&lt;p&gt;Mi capita spesso di rispondere a domande su gruppi facebook o nei forum, tanto vale appuntarsele anche qua.&lt;/p&gt;

&lt;p&gt;Mi prendo la libertà di modificare un po’ le domande se sono lunghe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Domanda:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[…] Salve ragazzi, forse oggi andrò un po’ OT, perché vorrei chiedervi un consiglio più a livello personale che tecnico.&lt;br /&gt;
Sono un ragazzo di 17 anni e da un anno a questa parte mi sono buttato  sull’informatica perché lo trovo un settore abbastanza meritocratico,  perciò in questo anno ho imparato i linguaggi per creare grafiche di  pagine web (html;css) e ho iniziato un progetto che fino ad ora va bene.&lt;br /&gt;
In questi mesi ho pensato molto a come muovermi ed ampliare le mie  conoscenze, e dopo vari ripensamenti, per questo negli ultimi tempi ho  deciso di imparare C (un linguaggio che opera strettamente “vicino”  all’hardware, per imparare le fondamentali logiche e operazioni dei  computer)&lt;br /&gt;
Premetto che io non voglio aumentare le mie skills per poi  assicurarmi un posto di lavoro, perché non vorrei diventare un  dipendente, ma sviluppare in proprio i miei progetti e magari, perché  no, un giorno viverne di essi .&lt;br /&gt;
Ora arriviamo al punto, sto  imparando C, forte solo di una ottima/discreta base di matematica, sono arrivato a trattare argomenti quali puntatori e strutture dati, però spesso penso che ha una applicazione, non so da dove partire, cioè per intenderci, io imparo le nozioni per definirmi anche un buon/discreto conoscitore di, ma una volta apprese quelle, non so da dove partire per sviluppare qualche mio programma in proprio, pecco di ispirazione e mi scoraggio e tra me e me penso “per quale motivo stai imparando il C se non  hai nessun fine/scopo o anche idea di applicazione?”&lt;br /&gt;
Io ora chiedo se a qualcuno di voi sia già capitata una cosa del genere, come vi siete mossi, quale settore dell’informatica può essere un potenziale, un  fondamento da cui poter costruire qualcosa, insomma una fonta di  ispirazione per iniziare a mettersi in proprio.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Risposta:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Uhm.  Ci vedo due cose distinte. Imparando il C diventi un ottimo tecnico: si può vivere già di quello, magari lavorando per altri. Questo da solo è un ottimo piano B da mettere in pratica finchè non hai idee che ti prendono al100%.&lt;/p&gt;

&lt;p&gt;Tu però hai altre ambizioni, ossia realizzare i tuoi progetti e vivere di quello. E ti mancano i progetti. Come tirarli fuori?&lt;br /&gt;
La  cosa più semplice che mi viene da consigliarti é di creare software che risolve i tuoi problemi. &lt;em&gt;Esempio di problema&lt;/em&gt;: quando tira il vento forte nel paese in cui  vivo, questo mi distrugge il giardino. S_oluzione_: ho  scritto un programma che mi avvisa quando sta per arrivare quel tipo di  vento.&lt;/p&gt;

&lt;p&gt;Io non ho inventato nulla, le App per  il meteo esistono da sempre; ma avevo un’esigenza particolare e nessuna app all’epoca me la risolveva, così ho inventato la mia soluzione. Magari serve anche ad altri? Girando un pò per la rete devi essere bravo e fortunato a trovare qualcuno disposto a pagare per i tuoi software.&lt;/p&gt;

&lt;p&gt;E  qui viene la parte &lt;strong&gt;difficile&lt;/strong&gt;: farsi pagare é una delle cose più difficili in assoluto. Che sia 1€ o 10000€, il furbo che “ci prova” lo  trovi sempre. Alcuni dicono che mettersi in proprio é difficile proprio  perché bisogna continuamente trovare clienti, lavorare per loro, e  &lt;strong&gt;perdere una quantità di tempo immane per farsi pagare&lt;/strong&gt;…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Best Money Making Computer Fields.jpg&quot; alt=&quot;&quot; title=&quot;people won't throw money at you&quot; /&gt;&lt;/p&gt;

&lt;p&gt;E  per finire: l’informatica (a livello di tecnici) non é meritocratica. Va avanti non il più bravo (tranne forse in Mozilla e in Google) ma chi da meno problemi al boss, ossia quello di cui ci si può fidare. Questo l’ho appreso sulla mia pelle dopo qualche anno di esperienza, e ovviamente vale in contesti aziendali. Nel momento in cui avrai tu un’azienda coi tuoi fantastici software, chi promuoverai come “capo team”? il più bravo a organizzare il gruppo, o il più bravo tecnico che hai? Scoprirai che le due figure di solito non coincidono.&lt;/p&gt;

&lt;p&gt;Un ultimo consiglio, che do sempre a chi vuole organizzare qualcosa in proprio: partecipa a uno &lt;a href=&quot;https://www.google.it/search?q=startup+weekend+italia&amp;amp;ie=utf-8&amp;amp;oe=utf-8&amp;amp;client=firefox-b-ab&amp;amp;gfe_rd=cr&amp;amp;dcr=0&amp;amp;ei=1FBRWoqRCqHBXvOUqYgG&quot;&gt;Startup Weekend&lt;/a&gt;. Ne organizziamo uno anche a Salerno, anche se ancora non abbiamo una data certa. Lì troverai tutto ciò che cerchi: persone che vogliono fondare la loro azienda, idee innovative, e come realizzarle dal punto di vista pratico (validazione, business plan, analisi dei competitor, stima dei tempi, etc.)&lt;/p&gt;

&lt;p&gt;In bocca al lupo!&lt;/p&gt;</content><author><name>musikele</name></author><category term="Italiano" /><category term="michele risponde" /><category term="lavoro" /><category term="informatico" /><category term="programmatore" /><summary type="html">Inauguriamo una nuova sezione, ossia “Michele risponde” :)</summary></entry><entry><title type="html">VueJS basics</title><link href="https://michelenasti.com/2017/12/17/vuejs-basics.html" rel="alternate" type="text/html" title="VueJS basics" /><published>2017-12-17T01:00:00+01:00</published><updated>2018-01-27T10:21:26+01:00</updated><id>https://michelenasti.com/2017/12/17/vuejs-basics</id><content type="html" xml:base="https://michelenasti.com/2017/12/17/vuejs-basics.html">&lt;p&gt;It has been a long week for me, I’m studying very hard VueJS - this time by coding real examples - and I confirm that there are some very good concepts backed in.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/vuejs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;separation-of-data-and-methods&quot;&gt;Separation of data and methods&lt;/h2&gt;

&lt;p&gt;This is a basic html containing some VueJS markup:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;html&amp;gt;
  ...
  &amp;lt;body&amp;gt;
  	&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&amp;gt;&amp;lt;/script&amp;gt;
  	&amp;lt;div id=&quot;app&quot;&amp;gt;
  	  &amp;lt;h2&amp;gt;{{ message }}&amp;lt;/h2&amp;gt;
      &amp;lt;p&amp;gt;{{ sayHelloTo(name) }}&amp;lt;/p&amp;gt;
  	&amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a basic VueJS element:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;new Vue({
  el: '#app',
  data: {
    message: 'Hello from Vue!',
    name: 'Michele'
  },
  methods: {
    sayHelloTo: function(name) {
      return `Hello, ${this.name}!`
    }
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s describe this snippet:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the &lt;code&gt;el&lt;/code&gt; references the DOM element with the &lt;code&gt;#app&lt;/code&gt; id. This element will be &lt;em&gt;Vuezed&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;the &lt;code&gt;data&lt;/code&gt; object contains the data that can be used inside the HTML: for example, we used the &lt;code&gt;message&lt;/code&gt; property in the Html.&lt;/li&gt;
  &lt;li&gt;the &lt;code&gt;methods&lt;/code&gt; property contains the methods you can use in your html. These are useful for calculations or for actions, like clicking on a button.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I acutally like a lot: a clear separations of data and methods.&lt;/p&gt;

&lt;p&gt;This is a concept that comes from the &lt;strong&gt;functional programming world&lt;/strong&gt;, that is, separate the data from the functions that interact with this data.&lt;/p&gt;

&lt;p&gt;However, Vue is not &lt;em&gt;functional&lt;/em&gt; in the classic sense of the definition, because you use the &lt;code&gt;this&lt;/code&gt; keyword to access data &amp;amp; you’re not forced to write pure functions, etc etc.&lt;/p&gt;

&lt;h2 id=&quot;a-word-on-this&quot;&gt;A word on this&lt;/h2&gt;

&lt;p&gt;Have you noticed that from the &lt;code&gt;methods&lt;/code&gt; section,  if you want to access &lt;code&gt;data&lt;/code&gt; properties, you use &lt;code&gt;this&lt;/code&gt; ?&lt;/p&gt;

&lt;p&gt;In fact, Vue proxies the &lt;code&gt;this&lt;/code&gt; keyword so that you can access to data without writing &lt;code&gt;this.data.message&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, for &lt;code&gt;this&lt;/code&gt; to work you must write 90% of the time the old ES5 &lt;code&gt;function()&lt;/code&gt; declaration: this is expecially clear in VueJS components, an argouments we’ll talk in another post.&lt;/p&gt;</content><author><name>musikele</name></author><category term="vuejs" /><category term="javascript" /><category term="frontend" /><summary type="html">It has been a long week for me, I’m studying very hard VueJS - this time by coding real examples - and I confirm that there are some very good concepts backed in.</summary></entry><entry><title type="html">Dovrei partecipare al programma Erasmus?</title><link href="https://michelenasti.com/2017/12/04/dovrei-partecipare-al-programma-erasmus.html" rel="alternate" type="text/html" title="Dovrei partecipare al programma Erasmus?" /><published>2017-12-04T01:00:00+01:00</published><updated>2017-12-04T17:09:42+01:00</updated><id>https://michelenasti.com/2017/12/04/dovrei-partecipare-al-programma-erasmus</id><content type="html" xml:base="https://michelenasti.com/2017/12/04/dovrei-partecipare-al-programma-erasmus.html">&lt;p&gt;&lt;strong&gt;Anche io ho partecpato al programma Erasmus&lt;/strong&gt;, era il 2006, l’anno dei mondiali e io ero a Siviglia. &lt;em&gt;Non avete idea di quanto sia appagante vincere un mondiale all’estero&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Basandomi sui miei ricordi: prima di partire &lt;strong&gt;hai paura&lt;/strong&gt;, il primo mese che stai lì ti chiedi &lt;strong&gt;ma chi te l’ha fatto fare&lt;/strong&gt; mentre cerchi casa, fai la spesa, ti iscrivi ai corsi; il secondo mese è insieme al primo il più duro, &lt;strong&gt;pensi di aver fatto la cazzata più grande della tua vita&lt;/strong&gt;, non capisci la gente quando parla, non sai cosa fare e dove andare, un po’ ti senti solo se non hai nessuno (e io partii da solo)…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Poi venne fuori la faccia di bronzo&lt;/strong&gt;. Un giorno sentii parlare in italiano in autobus e chiesi “hey, sei Erasmus? ma dove diavolo uscite la sera?”; un altro giorno incontrai degli studenti spagnoli che festeggiavano un’Italian Day con dolci italiani (disgustosi e mai mangiati prima) e in pratica finii a uscirci insieme e a correggergli i compiti, etc etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Il terzo mese inizi a pensare che l’Erasmus è una figata pazzesca&lt;/strong&gt;, il quarto il quinto e il sesto &lt;strong&gt;speri non finisca mai&lt;/strong&gt; e inizi a progettare fughe, rimpatriate, anche se già sai che tante cose dovranno necessariamente finire lì.&lt;/p&gt;

&lt;p&gt;E in  tutto questo c’è che ti lasci con la ragazza o ne trovi una nuova, si conoscono persone di tutto il mondo, si imparano nuove lingue e si girano continenti. &lt;strong&gt;Anche i sentimenti si mettono a dura prova.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Dal  punto di vista accademico ho avuto un problemaccio con lo spagnolo andaluso, In pratica i primi tre mesi di corso non ho capito nulla. Io, mai bocciato, in Spagna feci un solo esame su tre preventivati, ma quando tornai in Italia superai quei due esami con 30&amp;amp;lode.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chiunque dovrebbe fare l’Erasmus. Anche chi non va all’università. Specialmente chi è fidanzato/a. Specialmente chi ha paura.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tutti.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Quest’articolo era, in principio, un commento a un post su facebook. In bocca al lupo a tutti quelli che parteciperanno al programma.&lt;/em&gt;&lt;/p&gt;</content><author><name>musikele</name></author><category term="Italiano" /><category term="erasmus" /><category term="studio" /><category term="life" /><category term="università" /><summary type="html">Anche io ho partecpato al programma Erasmus, era il 2006, l’anno dei mondiali e io ero a Siviglia. Non avete idea di quanto sia appagante vincere un mondiale all’estero.</summary></entry><entry><title type="html">Alla scoperta di VueJS</title><link href="https://michelenasti.com/2017/12/03/alla-scoperta-di-vue-js.html" rel="alternate" type="text/html" title="Alla scoperta di VueJS" /><published>2017-12-03T01:00:00+01:00</published><updated>2017-12-04T23:24:55+01:00</updated><id>https://michelenasti.com/2017/12/03/alla-scoperta-di-vue-js</id><content type="html" xml:base="https://michelenasti.com/2017/12/03/alla-scoperta-di-vue-js.html">&lt;p&gt;E’ domenica, il Napoli non gioca, che fare? Dopo aver acceso il camino ho iniziato a guardarmi un po’ di VueJS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/vuejs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;vuejs-un-framework-minore&quot;&gt;VueJS, Un framework minore?&lt;/h2&gt;

&lt;p&gt;In questo mondo dominato da Angular e React, c’è ancora spazio per altri framework frontend?&lt;/p&gt;

&lt;p&gt;Ti faccio un’altra domanda: quando ai suoi tempi c’era &lt;em&gt;solo&lt;/em&gt; JQuery, riuscivi a pensare che sarebbe mai nata un’altra libreria per il frontend?&lt;/p&gt;

&lt;p&gt;Penso di aver sentito parlare la prima volta di Vue che c’era &lt;em&gt;solo&lt;/em&gt; Angular 1 in giro, e tutti gli altri framework sgomitavano per diventare famosi. C’è chi ce l’ha fatta, tipo React, e chi invece ci prova ancora e non ci riesce, tipo Ember.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;La differenza, molto spesso, la fa l’azienda che sponsorizza&lt;/strong&gt;: Google per Angular, e Facebook per React.&lt;/p&gt;

&lt;p&gt;Nel caso di Vue, le aziende sponsorizzatrici non sono proprio dei nomi di primo piano: &lt;a href=&quot;https://stdlib.com/&quot; title=&quot;StdLib&quot;&gt;StLib&lt;/a&gt;, un’azienda che realizza un framework per codice serverless, &lt;strong&gt;non la conoscevo prima di oggi&lt;/strong&gt;. Quindi, già su questo, partiamo svantaggiati.&lt;/p&gt;

&lt;h2 id=&quot;cosa-mi-ha-colpito-di-vuejs&quot;&gt;Cosa mi ha colpito di VueJS&lt;/h2&gt;

&lt;p&gt;L’approccio di VueJS è molto semplice, e questo è uno dei principali punti di forza:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;non c’è bisogno di partire da un boilerplate&lt;/strong&gt;, ma basta un file html linkato a uno script js;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;non c’è bisogno di conoscere la programmazione super avanzata&lt;/strong&gt;, ma bastano le conoscenze di un normale programmatore;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Somiglia in tutto e per tutto al primo angular&lt;/strong&gt;, quello che ho imparato a conoscere dannatamente e bene, e che funzionava alla grande;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;la documentazione è chiarissima&lt;/strong&gt; e sin dall’inizio si entra nel vivo di VueJS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Non mi sono ancora addentrato molto, ma ho notato che il sistema dei componenti è semplicissimo e soprattutto &lt;strong&gt;si può iniziare a lavorare senza mettere in mezzo i vari webpack&lt;/strong&gt;, systemjs, browserify e compagnia cantando.&lt;/p&gt;

&lt;p&gt;A questo punto una domanda me la sono fatta anch’io:&lt;/p&gt;

&lt;h2 id=&quot;vuejs-è-un-framework-moderno&quot;&gt;VueJS è un framework moderno?&lt;/h2&gt;

&lt;p&gt;Nel senso, ha quelle caratteristiche di un &lt;strong&gt;framework post-angular1&lt;/strong&gt; (utilizzo di un virtual dom, utilizzo di paradigmi reactive, server-side rendering…)  ?&lt;/p&gt;

&lt;p&gt;Il team di Vue ha scritto un’analisi tecnica molto profonda di Vue vs ogni-altra libreria-frontend sul mercato, soffermandosi specialmente su React perchè è quella cui somiglia di più. La velocità non deve essere presa in considerazione come fattore determinante, perchè Vue e React hanno numeri molto simili; quello che cambia è in dettagli come la curva di apprendimento, cosa accade all’intera applicazione un componente si aggiorna, etc.&lt;/p&gt;

&lt;p&gt;Questo vuol dire che si, &lt;strong&gt;Vue è una libreria frontend che si occupa solo della view&lt;/strong&gt;, lasciando ad altre librerie il compito del routing o di altre cose belle (autenticazione, autorizzazione, chiamate http…).&lt;/p&gt;

&lt;h2 id=&quot;sono-solo-allinizio&quot;&gt;Sono solo all’inizio&lt;/h2&gt;

&lt;p&gt;A parte il primo tutorial, che mi ha lasciato un’ottima impressione, c’è ancora tanto da guardare. Vorrei provare a sviluppare qualcosa di meno semplice così da farmi un’idea di come funziona quando le linee di codice aumentano. Resisterà VueJS alla prova della complessità?&lt;/p&gt;

&lt;p&gt;Nei prossimi articoli proverò ad entrare più nel dettaglio di come funziona Vue. Keep reading!&lt;/p&gt;</content><author><name>musikele</name></author><category term="Italiano" /><category term="vuejs" /><category term="javascript" /><category term="frontend" /><category term="angular" /><category term="react" /><category term="vue" /><summary type="html">E’ domenica, il Napoli non gioca, che fare? Dopo aver acceso il camino ho iniziato a guardarmi un po’ di VueJS.</summary></entry><entry><title type="html">Batman ha ispirato il … Comic Sans: storia di un Font che tutti odiano</title><link href="https://michelenasti.com/2017/12/01/batman-ha-ispirato-il-comic-sans-storia-di-un-font-che-tutti-odiano.html" rel="alternate" type="text/html" title="Batman ha ispirato il ... Comic Sans: storia di un Font che tutti odiano" /><published>2017-12-01T01:00:00+01:00</published><updated>2017-12-01T11:58:52+01:00</updated><id>https://michelenasti.com/2017/12/01/batman-ha-ispirato-il-comic-sans-storia-di-un-font-che-tutti-odiano</id><content type="html" xml:base="https://michelenasti.com/2017/12/01/batman-ha-ispirato-il-comic-sans-storia-di-un-font-che-tutti-odiano.html">&lt;p&gt;La storia che sto per raccontare riguarda uno degli aspetti più &lt;em&gt;mitologici&lt;/em&gt; dell’informatica intera: il &lt;strong&gt;Comic Sans&lt;/strong&gt;, il carattere più odiato in assoluto, ma allo stesso tempo uno dei più usati al mondo.&lt;/p&gt;

&lt;h2 id=&quot;linizio-microsoft-bob&quot;&gt;L’inizio: Microsoft Bob&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://it.wikipedia.org/wiki/Microsoft_Bob&quot; title=&quot;Microsoft Bob&quot;&gt;Microsoft Bob&lt;/a&gt; meriterebbe un articolo a parte, in quanto fu uno dei primi progetti di Microsoft gestiti direttamente da Melinda Gates (la moglie di Bill) e, contemporaneamente, uno dei progetti più fallimentari.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bobhome1p.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;L’idea dietro a Bob era di creare un’interfaccia alternativa a Windows 3.1 e Windows 95, un’interfaccia che fosse giocosa, facile da usare per gli utenti che non avevano dimestichezza coi computer, come gli anziani.&lt;/p&gt;

&lt;p&gt;Si navigava all’interno di questo salone di casa, e per leggere un libro si cliccava sul libro, così come per aprire il calendario, etc.&lt;/p&gt;

&lt;p&gt;In fin dei conti l’idea era carina, ma aveva un grande problema: dietro un’interfaccia così giocosa il font utilizzato è un vetusto Times New Roman. brutto eh?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(sono segretamente convinto che sia stato questo il vero motivo dell’insuccesso commerciale.)&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;vincent-connaire-luomo-che-progettò-comic-sans&quot;&gt;Vincent Connaire: l’uomo che progettò Comic Sans&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Vincent_Connare&quot; title=&quot;Vincent Connaire&quot;&gt;Vincent Connaire&lt;/a&gt; è un designer che nel 1993 iniziò a lavorare per Microsoft.&lt;/p&gt;

&lt;p&gt;Connaire entrò subito in contatto col team di Microsoft Bob e fece notare che un’interfaccia così giocosa non poteva avere un font tanto serio, quindi propose di ideare un font più uniforme allo stile comunicativo di Bob.&lt;/p&gt;

&lt;p&gt;L’idea fu inizialmente accettata e Connaire si ispirò ai fumetti che amava di più, tra cui un &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Dark_Knight_Returns&quot; title=&quot;Batman - The dark knight returns&quot;&gt;Batman - The dark knight returns&lt;/a&gt; del 1986 che aveva sulla sua scrivania. I caratteri dei fumetti generalmente vengono disegnati a mano, e fanno parte del processo di creazione. Il processo artigianale che c’è dietro a ogni dialogo di un fumetto fa sì che nessuno, fino ad oggi, si sia mai lamentato dei font dei fumetti.&lt;/p&gt;

&lt;p&gt;Qui sotto riporto una tavola di Batman, per farvi capire da dove nasce l’ispirazione.&lt;br /&gt;
&lt;img src=&quot;/images/batman-begins-1986.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(Ti ricordo che all’epoca Internet non c’era, o meglio esisteva da 1 anno: molto difficile trovare ispirazione on line. Io ricordo che dovetti installare non solo Netscape ma anche i driver TCP/IP a mano, coi floppy, su Windows 3.1).&lt;/p&gt;

&lt;h2 id=&quot;il-comic-sans&quot;&gt;Il Comic Sans&lt;/h2&gt;

&lt;p&gt;Fu così che nacque il Comic Sans, un carattere fortemente ispirato ai fumetti, che però non devi MAI utilizzare se vuoi disegnare fumetti per professione, pena il licenziamento.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ComicSans.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tuttavia, quando il font era ormai pronto, &lt;strong&gt;il team di Microsoft Bob lo scartò&lt;/strong&gt;: non perchè fosse brutto, bensì perchè il progetto era ormai completato e &lt;strong&gt;tutte le textbox erano state ottimizzate per il Times New Roman&lt;/strong&gt;. Modificare il font significava entrare in ogni possibile textbox e aggiustarle per rendere il testo visualizzabile correttamente, cosa non proprio praticabile (all’epoca non esistevano reponsive design – la risoluzione “normale” era 800x600, credo…).&lt;/p&gt;

&lt;p&gt;Quindi, se il Comic Sans non venne al mondo tramite Microsoft Bob, come si è diffuso?&lt;/p&gt;

&lt;h2 id=&quot;come-è-diventato-il-font-più-conosciuto-al-mondo-3d-movie-maker&quot;&gt;Come è diventato il font più conosciuto al mondo: 3D Movie Maker&lt;/h2&gt;

&lt;p&gt;In un’epoca in cui Microsoft aveva il monopolio totale di ogni cosa fosse installata sui vostri pc, i programmatori di un altro progetto Microsoft decisero di usare il Comic Sans per le vignette di aiuto di un software chiamato &lt;strong&gt;3D Movie Maker&lt;/strong&gt;, un applicativo per bambini che permetteva di inserire personaggi in un ambiente virtuale (nel 1995, eh!).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/3dmoviemaker.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Su youtube esistono dei filmati che mostrano &lt;a href=&quot;https://www.youtube.com/watch?v=LNBCoaZn8FU&quot;&gt;3D Movie Maker in azione&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Da quel momento in poi, l’ascesa di Comic Sans fu inarrestabile: fu inserito in &lt;strong&gt;Windows 95&lt;/strong&gt;, fu uno dei caratteri di default di &lt;strong&gt;Microsoft Publisher&lt;/strong&gt; e del neonato &lt;strong&gt;Internet Explorer 3.0&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Il Comic Sans è stato usato in molte situazioni sconvenienti. Ad esempio, il font stato usato per il testo di un memoriale di guerra, ai lati delle ambulanze, nei CV. In rete esistono centinaia di pagine sull’uso sconveniente del font, ad esempio su &lt;a href=&quot;https://www.buzzfeed.com/sophiegadd/absolutely-beautiful-examples-of-comic-sans-in-the-wild?utm_term=.brjVv42rMK#.pmnvYMPbkN&quot;&gt;BuzzFeed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Io personalmente posso dire di aver sostenuto &lt;strong&gt;esami all’università&lt;/strong&gt; la cui traccia era scritta in Comic Sans.&lt;/p&gt;

&lt;h2 id=&quot;e-ora&quot;&gt;E ora?&lt;/h2&gt;

&lt;p&gt;Beh, dovrebbe essere chiaro, &lt;strong&gt;non devi usarlo&lt;/strong&gt;. Per. nessun. motivo. al. mondo.&lt;/p&gt;

&lt;p&gt;Ci sono pochissimi motivi per cui dovresti usare il comic sans, e te li elenco qui:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Se la tua audience ha meno di 2 anni.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Se la tua audience è composta da dislessici&lt;/strong&gt;. E’ infatti noto che i dislessici trovano più facile leggere il comic sans rispetto agli altri font.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Questo articolo non sarebbe mai nato senza il primo capitolo di un libro che purtroppo ho perso in aereo: &lt;a href=&quot;http://amzn.to/2zDrYID&quot; title=&quot;Sei proprio il mio Typo &quot;&gt;Sei proprio il mio Typo, di Simon Garfield&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://amzn.to/2zDrYID&quot;&gt;&lt;img src=&quot;/images/seproprioilmiotypo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Per altre storie bizzarre sui font, questo è il libro che fa per te;)&lt;/p&gt;</content><author><name>musikele</name></author><category term="Italiano" /><category term="comic sans" /><category term="font" /><category term="storia" /><category term="vincent connaire" /><category term="microsoft" /><category term="microsoft bob" /><category term="design" /><summary type="html">La storia che sto per raccontare riguarda uno degli aspetti più mitologici dell’informatica intera: il Comic Sans, il carattere più odiato in assoluto, ma allo stesso tempo uno dei più usati al mondo.</summary></entry></feed>