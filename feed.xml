<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://michelenasti.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://michelenasti.com/" rel="alternate" type="text/html" /><updated>2019-07-30T00:59:33+02:00</updated><id>https://michelenasti.com/feed.xml</id><title type="html">Michele Nasti’s blog</title><subtitle>I'm a full stack Developer with an eye for the web.</subtitle><entry><title type="html">Typescript, Babel, Webpack, ESLint: my configuration</title><link href="https://michelenasti.com/2019/06/27/typescript-babel-webpack-eslint-my-configuration.html" rel="alternate" type="text/html" title="Typescript, Babel, Webpack, ESLint: my configuration" /><published>2019-06-27T00:00:00+02:00</published><updated>2019-07-02T13:35:34+02:00</updated><id>https://michelenasti.com/2019/06/27/typescript-babel-webpack-eslint-my-configuration</id><content type="html" xml:base="https://michelenasti.com/2019/06/27/typescript-babel-webpack-eslint-my-configuration.html">&lt;p&gt;The purpose of this post is to give you, dear reader, an example of the configuration I use on some projects. Configuring the whole stack is sometimes frustrating. Here’s what works for me.&lt;/p&gt;

&lt;h2 id=&quot;typescript&quot;&gt;Typescript&lt;/h2&gt;

&lt;p&gt;I &lt;a href=&quot;https://michelenasti.com/2019/06/24/typescript-why-so-complicated.html&quot;&gt;just wrote an article&lt;/a&gt; about that and you should read it. It contains my &lt;code&gt;tsconfig.json&lt;/code&gt; and why every option is configured that way.&lt;/p&gt;

&lt;h2 id=&quot;babel--7x-&quot;&gt;Babel ( 7.x )&lt;/h2&gt;

&lt;p&gt;The fun fact is, even if we use Typescript and our files end with &lt;code&gt;.ts&lt;/code&gt;, to build the project we will &lt;em&gt;skip&lt;/em&gt; typescript. Let me be clearer. We will use &lt;strong&gt;Babel&lt;/strong&gt;, that is a transpiler, and &lt;strong&gt;Webpack&lt;/strong&gt;, that is a bundler. Webpack will bundle files that are transpiled by Babel.&lt;/p&gt;

&lt;p&gt;But wait?! Babel transpiles what? The latest trend is that Babel will &lt;em&gt;strip out&lt;/em&gt; every Typescript interface, annotation or type inference and will just transform the file to a normal &lt;code&gt;.js&lt;/code&gt; file. This output will then be given in input to Webpack.&lt;/p&gt;

&lt;p&gt;Enough talking! Time to install babel and it’s dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install --save-dev @babel/core @babel/cli @babel/preset-env @babel/plugin-proposal-class-properties @babel/plugin-proposal-object-rest-spread @babel/preset-typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here’s my babel setup:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//babel.config.js
  module.exports = api =&amp;gt; {
      const isTest = api.env('test');

      const targets = {
          browsers: &quot;&amp;gt; 0.25%, not dead&quot;
      }

      if (isTest) {
          delete targets.browsers;
          targets.node = &quot;current&quot;;
      }

      return {
          &quot;presets&quot;: [
              [
                  &quot;@babel/env&quot;,
                  {
                      &quot;useBuiltIns&quot;: &quot;entry&quot;,
                      &quot;corejs&quot;: &quot;3.0.0&quot;,
                      targets
                  }
              ],
              &quot;@babel/typescript&quot;
          ],
          &quot;plugins&quot;: [
              &quot;@babel/proposal-class-properties&quot;,
              &quot;@babel/proposal-object-rest-spread&quot;
          ]
      };
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quick explanation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I use Jest and puppeteer to test my code, and Jest requires &lt;code&gt;targets.node&lt;/code&gt; to be set to &lt;code&gt;current&lt;/code&gt;. If you don’t use Jest and Puppeteer, just remove the &lt;code&gt;isTest&lt;/code&gt;check.&lt;/li&gt;
  &lt;li&gt;Babel works with presets, each preset will transform some pieces of code depending on some rules.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;@babel/env&lt;/code&gt; is a quasi-default rule, it will transform our js code to something that is understandable by something that is parsable by what’s defined in &lt;code&gt;targets&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;@babel/typescript&lt;/code&gt; is the king here. It will &lt;em&gt;strip off&lt;/em&gt; all Typescript specific data (interfaces, types, etc.).&lt;/li&gt;
  &lt;li&gt;the two plugins added are already in a very advanced standardization process, but they are added because typescript allows them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;is-it-working&quot;&gt;Is it working?&lt;/h3&gt;

&lt;p&gt;run this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx babel src --out-dir build_ts --extensions &quot;.ts,.tsx&quot; --source-maps inline
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we’ll run babel on the directory &lt;code&gt;src&lt;/code&gt;, the output will go in &lt;code&gt;build_ts&lt;/code&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It works? without hassles? Let’s go to the next step:&lt;/p&gt;

&lt;h3 id=&quot;webpack-4x&quot;&gt;Webpack (4.x)&lt;/h3&gt;

&lt;p&gt;Installation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm i --save-dev webpack webpack-cli babel-loader
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here’s my configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//webpack.config.js

var path = require('path');
var webpack = require('webpack');

module.exports = {
  entry: './src/index',
  mode: 'development',
  devtool: 'false',
  output: {
    path: path.resolve(__dirname, 'build'),
    filename: 'dist.js',
  },
  resolve: {
    extensions: ['.ts', '.tsx', '.js', '.json'],
  },
  module: {
    rules: [
      {
        // Include ts, tsx, js, and jsx files.
        test: /\.(ts|js)x?$/,
        exclude: /node_modules/,
        loader: 'babel-loader',
      },
    ],
  },
  plugins: [],
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most important part is the &lt;code&gt;rules&lt;/code&gt; part. Our rule is that every file will be tested, if it ends with &lt;code&gt;.ts&lt;/code&gt; it will be passed to plugin &lt;code&gt;babel-loader&lt;/code&gt; that will pass the file to &lt;code&gt;babel&lt;/code&gt; before assembling it with babel.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is the most basic webpack setup I could come up with. Reality is much more complicated than this and &lt;a href=&quot;https://webpack.js.org/configuration/output/&quot;&gt;you may need to set additional options/plugins&lt;/a&gt;. Don’t be afraid to check out webpack documentation, you’ll learn interesting things&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;is-it-working-1&quot;&gt;Is it working?&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npx webpack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It should create the file &lt;code&gt;build/dist.js&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;eslint&quot;&gt;ESLint&lt;/h2&gt;

&lt;p&gt;Installation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i --save-dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Configuration code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//.eslintrc.js
module.exports = {
    parser: '@typescript-eslint/parser',
    parserOptions: {
        ecmaVersion: 2018,
        sourceType: 'module',
    },
    plugins: ['@typescript-eslint'],
    'env': {
        'browser': true,
        'es6': true,
        'jest': true
    },
    'extends': [
        'eslint:recommended',
        'plugin:@typescript-eslint/recommended',
    ],
    'rules': {
    //...
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;we tell ESLint to use the &lt;a href=&quot;https://www.npmjs.com/package/@typescript-eslint/parser&quot;&gt;typescript parser&lt;/a&gt; with some specific parser options.&lt;/li&gt;
  &lt;li&gt;Then we add the plugin @typescript-eslint that will provide us with some useful rules for typescript…&lt;/li&gt;
  &lt;li&gt;…Like &lt;code&gt;@typescript-eslint/recommended&lt;/code&gt;, that contains a few rules that are recommended by the community.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you convert a legacy Javascript project to typescript, the &lt;code&gt;typescript-eslint/recommended&lt;/code&gt; set of rules is … &lt;em&gt;too much&lt;/em&gt;. That’s why I usually comment it out and try to fix problems day after day.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;ready-to-start-your-projects&quot;&gt;Ready to start your projects?&lt;/h2&gt;

&lt;p&gt;Hope my configuration files have helped you creating your new projects. Can’t wait to know what you’re working at!&lt;/p&gt;</content><author><name>musikele</name></author><category term="Italiano" /><category term="typescript" /><category term="babel" /><category term="webpack" /><category term="eslint" /><summary type="html">The purpose of this post is to give you, dear reader, an example of the configuration I use on some projects. Configuring the whole stack is sometimes frustrating. Here’s what works for me.</summary></entry><entry><title type="html">Typescript: why so complicated?! (A list of my preferred options)</title><link href="https://michelenasti.com/2019/06/24/typescript-why-so-complicated.html" rel="alternate" type="text/html" title="Typescript: why so complicated?! (A list of my preferred options)" /><published>2019-06-24T00:00:00+02:00</published><updated>2019-06-25T22:01:34+02:00</updated><id>https://michelenasti.com/2019/06/24/typescript-why-so-complicated</id><content type="html" xml:base="https://michelenasti.com/2019/06/24/typescript-why-so-complicated.html">&lt;p&gt;Hey there, after digging about how Typescript settings mesh together, I decided to write my article about what I found &lt;em&gt;the hard way&lt;/em&gt;, hoping to clear the path for newcomers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/typescript-cover-image.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you install Typescript, default values are a bit dumb. For example, 99% of the world would put the source code in a &lt;code&gt;src&lt;/code&gt; directory, and typescript has to be configured explicitly this way. Let’s see my &lt;code&gt;tsconfig.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;compilerOptions&quot;: {
        &quot;module&quot;: &quot;esnext&quot;,
        &quot;target&quot;: &quot;esnext&quot;,
        &quot;sourceMap&quot;: true,
        &quot;outDir&quot;: &quot;./build/&quot;,
        &quot;moduleResolution&quot;: &quot;node&quot;,
        &quot;strict&quot;: true,
        &quot;lib&quot;: [
            &quot;dom&quot;,
            &quot;esnext&quot;,
            &quot;dom.iterable&quot;,
            &quot;scripthost&quot;
        ],
    },
    &quot;include&quot;: [
        &quot;src/**/*.ts&quot;
    ],
    &quot;compileOnSave&quot;: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is part of my setup. I will go through some of these options so you can choose wisely.&lt;/p&gt;

&lt;h3 id=&quot;the-target-option&quot;&gt;The “target” option&lt;/h3&gt;

&lt;p&gt;Typescript is a compiler from a superset to a subset of Javascript features and &lt;code&gt;target&lt;/code&gt; determines what kind of EcmaScript (Javascript’s formal name) should be targeted.&lt;/p&gt;

&lt;p&gt;Possible values are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;ES3&lt;/code&gt; (default)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ES5&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ES6&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;esnext&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you leave it blank, or choose &lt;code&gt;ES3&lt;/code&gt;, your code would be compatible with very old browsers, like Internet Explorer 5 or Netscape Navigator (joking, but not that much). ES3 is the first standardized version of Javascript.&lt;/p&gt;

&lt;p&gt;You may think this is a great default value and be tempted to use &lt;code&gt;fetch&lt;/code&gt;, or &lt;code&gt;Promise&lt;/code&gt;, and typescript will let you use them, BUT &lt;strong&gt;typescript will not add any polyfill to your code.&lt;/strong&gt; Beware of this!&lt;/p&gt;

&lt;p&gt;Similarly you can choose to run several different options, &lt;code&gt;ES5&lt;/code&gt; (if your users are on Internet Explorer),  &lt;code&gt;ES6&lt;/code&gt;… I prefer &lt;code&gt;esnext&lt;/code&gt; to be able to use the latest features of the language and leave to Babel the transpilation step.&lt;/p&gt;

&lt;p&gt;Did you know that prior to ES6 there was no official way to import some JS code inside another JS code? The community came out with several options and the next section will discuss them.&lt;/p&gt;

&lt;h3 id=&quot;the-module-option&quot;&gt;The “module” option&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;module&lt;/strong&gt; determines the way modules (and files) express dependencies between each other. Possible values are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;None&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;CommonJS&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;AMD&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;System&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;UMD&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ES6&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ES2015&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ESNext&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ouch, so many options for a single task: importing code. Why?! That’s because the evolution of Javascript is non-linear,  and many of them do not apply for every platform.&lt;/p&gt;

&lt;p&gt;If you use &lt;strong&gt;None&lt;/strong&gt; you cannot use &lt;code&gt;import&lt;/code&gt;, &lt;code&gt;export&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt;… nothing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AMD&lt;/strong&gt;, &lt;strong&gt;System&lt;/strong&gt; and &lt;strong&gt;CommonJS&lt;/strong&gt; are (IMHO) a thing of the past.  the first (AMD) came from &lt;a href=&quot;https://requirejs.org/docs/whyamd.html&quot; title=&quot;RequireJS&quot;&gt;RequireJS&lt;/a&gt; and the second from &lt;a href=&quot;https://github.com/systemjs/systemjs&quot; title=&quot;SystemJS&quot;&gt;SystemJS&lt;/a&gt;. These two are browser’s solutions. Not so long ago there was no way to express dependencies across JS files, so many competing systems came out to solve the same problem. AMD and SystemJS did not get enough fortune to become a standard.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CommonJS&lt;/strong&gt; is a spec that is very similar to what NodeJS has implemented (&lt;code&gt;require&lt;/code&gt;/&lt;code&gt;exports&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UMD&lt;/strong&gt; stands for &lt;em&gt;Universal Module Definition&lt;/em&gt; and tries to deliver a module that works with every possible module definition defined before.&lt;/p&gt;

&lt;p&gt;However, the ECMAScript community went for the &lt;code&gt;import/export&lt;/code&gt; solution, and node has embraced that too, and we have that available in  &lt;code&gt;ES6&lt;/code&gt; and &lt;code&gt;ES2015&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Again, I prefer to use Typescript as a superset of JS, so I choose &lt;code&gt;esnext&lt;/code&gt; and let webpack decide how to bundle stuff together.&lt;/p&gt;

&lt;h3 id=&quot;outdir-or-outfile-&quot;&gt;outDir or outFile ?&lt;/h3&gt;

&lt;p&gt;You have decided which module system you want to use (you know  my vote for &lt;code&gt;ES6&lt;/code&gt;), but do you want a single file in output (&lt;code&gt;outFile&lt;/code&gt;) or many single files in a output directory (&lt;code&gt;outDir&lt;/code&gt;)?&lt;/p&gt;

&lt;p&gt;If you write JS for the browser you may be tempted to go for &lt;code&gt;outFile&lt;/code&gt; and let TS deal with everything. You may think that this way you can skip webpack, babel and so on. The problem is that TS allows to use this option only with &lt;code&gt;amd&lt;/code&gt; and &lt;code&gt;system&lt;/code&gt;. So this is a hard requirement for that.&lt;/p&gt;

&lt;p&gt;The second big problem is that, to build a single file with all modules, Typescript needs also to know the &lt;em&gt;order&lt;/em&gt; of files, so &lt;em&gt;you&lt;/em&gt; have to provide the list in the right order. Imagine having 30-50-100 modules…&lt;/p&gt;

&lt;p&gt;Again, my advice is to use&lt;code&gt;outDir&lt;/code&gt;. For every source file you get a compiled file in the output directory. Then, again, did I tell you of webpack + babel?&lt;/p&gt;

&lt;h3 id=&quot;moduleresolution&quot;&gt;ModuleResolution&lt;/h3&gt;

&lt;p&gt;This setting accepts two possible values: &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;classic&lt;/code&gt;. At this point there’s no need to have a value different than &lt;code&gt;node&lt;/code&gt; here. For what I read &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/module-resolution.html&quot;&gt;in the official documentation&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nowadays, this strategy [&lt;code&gt;classic&lt;/code&gt;] is mainly present for backward compatibility.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;lib&quot;&gt;Lib&lt;/h3&gt;

&lt;p&gt;Since we are working in the browser and we are targeting a JS version greater than ES2015, I use the defaults that are &lt;code&gt;DOM,ES6,DOM.Iterable,ScriptHost&lt;/code&gt;. The list of all available libraries is &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/compiler-options.html&quot;&gt;here&lt;/a&gt;. If you forget to put those, Typescript will output weird errors like missing &lt;code&gt;Set&lt;/code&gt; interface or other stuff - I guess the problem is that TS goes in &lt;code&gt;node_modules&lt;/code&gt; and finds code that is obviously thought for Node, and it fails somehow.&lt;/p&gt;

&lt;h3 id=&quot;compileonsave&quot;&gt;compileOnSave&lt;/h3&gt;

&lt;p&gt;An option for IDEs to trigger compilation on a file save. If your IDE does not support it you can disable it but having it turned on it does not harm.&lt;/p&gt;

&lt;h3 id=&quot;strict-true&quot;&gt;strict: true&lt;/h3&gt;

&lt;p&gt;You use Typescript because you want it to catch syntax errors in your library. However, the default value for this option is &lt;code&gt;false&lt;/code&gt; and this means that many syntax checks are not done for you.&lt;/p&gt;

&lt;p&gt;If you start a new project, I strongly advise to turn on this option. If you, like me, are converting a JS library to TS, this option may transform your job in hell: introduce it gradually and slowly.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;So many choices to do and I guess inexperienced developers do not know what to do at first. Hoping to do them a favour!&lt;/p&gt;

&lt;p&gt;I’ve also cited &lt;strong&gt;Webpack + Babel&lt;/strong&gt; setup here, and this will be discussed in another article. It will require some changes here and there, and typescript will only be used to check the syntax of the project, but the transpilation will be done by Babel.&lt;/p&gt;

&lt;p&gt;Curious? Stay tuned!&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="typescript" /><category term="javascript" /><summary type="html">Hey there, after digging about how Typescript settings mesh together, I decided to write my article about what I found the hard way, hoping to clear the path for newcomers.</summary></entry><entry><title type="html">I work remote, I do two video meetings per day</title><link href="https://michelenasti.com/2019/06/13/i-work-remote-i-do-two-video-calls-per-day.html" rel="alternate" type="text/html" title="I work remote, I do two video meetings per day" /><published>2019-06-13T00:00:00+02:00</published><updated>2019-06-16T17:26:53+02:00</updated><id>https://michelenasti.com/2019/06/13/i-work-remote-i-do-two-video-calls-per-day</id><content type="html" xml:base="https://michelenasti.com/2019/06/13/i-work-remote-i-do-two-video-calls-per-day.html">&lt;p&gt;Do you love meetings? Do you enjoy taking a break from your work and &lt;em&gt;talk&lt;/em&gt; - ehm, &lt;em&gt;listen&lt;/em&gt; to your managers, stakeholders, customers, peers? I suppose you not. If you’re like me, 99% of your work life meetings have been a total waste of time.&lt;/p&gt;

&lt;p&gt;For example, I remember one day I had 8 hours of meetings, well actually they were 4 different meetings of 2 hours, but with the same people and the same manager attending.&lt;/p&gt;

&lt;p&gt;I also remember a boss sentence, “&lt;em&gt;we will discuss later about this, and we will, because this topic is important for me”&lt;/em&gt;, usually meaning that we should never ever bring the discussion back.&lt;/p&gt;

&lt;p&gt;I also remember another meeting, on friday evening, were we decided to use framework “X” to do something, so I started studying it in the weekend, only to find on monday that the company has decided to use another framework Y.&lt;/p&gt;

&lt;p&gt;The list can go on, feel free to add your horror stories in the comments. I’m sure you had worse meetings than mine :)&lt;/p&gt;

&lt;p&gt;But I’m here to say that I’ve also experienced another way of working: for some projects I had no meetings at all.&lt;/p&gt;

&lt;p&gt;For example, referring to my remote work experience, when you start working remotely the first sentiment you feel is &lt;em&gt;abandonment&lt;/em&gt;. It’s like, &lt;em&gt;where’s my boss?&lt;/em&gt; Obviously I was not &lt;em&gt;abandoned&lt;/em&gt; but that’s the first feeling you get.&lt;/p&gt;

&lt;p&gt;Then I read a book about &lt;a href=&quot;https://amzn.to/2RdiUUt&quot; title=&quot;Human centered work&quot;&gt;human centered work (in italian)&lt;/a&gt;, and amongst other things there is an entire chapter on how to organize the team work. &lt;strong&gt;Before calling your next meeting, ask yourself if all the attendees are actually getting a benefit from it&lt;/strong&gt;. (With this simple rule, 50% of my meetings could have been discarded).&lt;/p&gt;

&lt;p&gt;Some meetings are strictly necessary. &lt;strong&gt;The main role of a boss is to give the &lt;em&gt;strategic direction&lt;/em&gt; to the team&lt;/strong&gt;, and there’s no email that can substitute the facial expression or the tone of voice.&lt;/p&gt;

&lt;p&gt;So, let’s go back to the title of this post. Yes, I work remotely, and yes, &lt;strong&gt;I do two&lt;/strong&gt; (small) &lt;strong&gt;meetings every day&lt;/strong&gt;. Two video-meetings actually. The first one at 9:30 is to kick off the day, the second at 15:30 as a status update.&lt;/p&gt;

&lt;p&gt;They don’t last long, usually in 5 minutes they are done, but it’s a ritual that helps me accomplish my tasks.&lt;/p&gt;

&lt;p&gt;The best part is that we use a software where we can see each other in the face during the meeting, and the default is with webcam on. This actually gives a lot of humanity to remote working: as programmers, we are used to solve problems via chat, by typing, but that’s the slowest way to do that.&lt;/p&gt;

&lt;p&gt;When you start introducing video calls as an option, and switch to that whenever it’s the clearest (&amp;amp; fastest) way to solve a problem, you’ll see the benefit.&lt;/p&gt;

&lt;p&gt;So … should your company do video meetings every day? If your team is small enough, and you all work in the same time zone, why not. I suppose this approach doesn’t scale at all, but I still have to work for a big remote company so I don’t know how they organize their work. As a programmer, I like to see that managers - and peers - are interested in what I’m doing, and doing a meeting is the bare minimum for showing appreciation.&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="remote" /><category term="work" /><category term="meeting" /><category term="meetings" /><summary type="html">Do you love meetings? Do you enjoy taking a break from your work and talk - ehm, listen to your managers, stakeholders, customers, peers? I suppose you not. If you’re like me, 99% of your work life meetings have been a total waste of time.</summary></entry><entry><title type="html">SSH cheatsheet (from zero to hero)</title><link href="https://michelenasti.com/2019/04/03/ssh-cheatsheet-from-zero-to-hero.html" rel="alternate" type="text/html" title="SSH cheatsheet (from zero to hero) " /><published>2019-04-03T00:00:00+02:00</published><updated>2019-05-09T11:34:37+02:00</updated><id>https://michelenasti.com/2019/04/03/ssh-cheatsheet-from-zero-to-hero</id><content type="html" xml:base="https://michelenasti.com/2019/04/03/ssh-cheatsheet-from-zero-to-hero.html">&lt;p&gt;SSH is one of the basic commands you need to master, no matter what’s your platform of choice. Because you’ll always end up working on some random server, and you’ll have to login to see logs or restarting services. Also, you’ll never see it as a &lt;em&gt;skill to show&lt;/em&gt; because it’s implicit that you have to know how to use it, at least for logging in to some website.&lt;/p&gt;

&lt;p&gt;Here is a little cheatsheet of the most important commands (and tricks) you might find useful.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ssh-big.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;creating-a-new-pair-of-keys&quot;&gt;Creating a new pair of keys&lt;/h2&gt;

&lt;p&gt;Before working with SSH, you need to create a new pair of keys. Basically it is a pair of private/public keys. &lt;strong&gt;To generate a new key pair on your computer&lt;/strong&gt;, run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ssh-keygen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;keys are created in &lt;code&gt;~/.ssh&lt;/code&gt; directory. Two files will be created:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;➜  $ cd ~/.ssh
➜  $ ls -al
-rw------- 1 musikele musikele 1,8K feb 18 21:56 id_rsa
-rw-r--r-- 1 musikele musikele  411 feb 18 21:56 id_rsa.pub
➜  $
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The private key is &lt;code&gt;id_rsa&lt;/code&gt; and you should never share it with anybody. It is readable and writable only by the current user.&lt;/p&gt;

&lt;p&gt;The public key is &lt;code&gt;id_rsa.pub&lt;/code&gt; and it can be shared with others. As you can see the &lt;code&gt;id_rsa.pub&lt;/code&gt; is also readable by anyone on the system.&lt;/p&gt;

&lt;h2 id=&quot;set-up-ssh-login-to-remote-server-without-password&quot;&gt;Set up SSH login to remote server without password&lt;/h2&gt;

&lt;p&gt;Now that we have SSH set up on our computer, let’s see how we can login to a remote server. (We assume that ssh is set up on the remote server too - if not, just lunch the previous command there too!).&lt;/p&gt;

&lt;p&gt;There are two ways to log in to a remote server:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;by typing the remote user’s password,&lt;/li&gt;
  &lt;li&gt;by using your private/public key.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will talk about the second option from now on.&lt;/p&gt;

&lt;p&gt;What we want to do now is to register our public key on the server. I want to remain  practical in this article, but if you need some deep explanation of what happens during the login process I suggest you to &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/understanding-the-ssh-encryption-and-connection-process&quot; title=&quot;How SSH works&quot;&gt;follow this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There’s a simple command to set up the ssh key on a remote server (run on your local computer):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ssh-copy-id root@123.123.123.123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;once you hit enter, the remote server will ask for the password (at least for the first time). Once done, you can log in to a remote server by typing&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ssh root@123.123.123.123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…and you’re in!&lt;/p&gt;

&lt;p&gt;What is this command &lt;code&gt;ssh-copy-id&lt;/code&gt; doing? This command will copy your public key (&lt;code&gt;~/.ssh/id_rsa.pub&lt;/code&gt;) in the remote file &lt;code&gt;~/.ssh/authenticated_keys&lt;/code&gt;. The server will use the your public key to authenticate you.&lt;/p&gt;

&lt;h2 id=&quot;logging-in-as-a-different-user&quot;&gt;Logging in as a different user&lt;/h2&gt;

&lt;p&gt;When we log in to a remote server, without using a username, we will log in with the same username of our local machine. My username is &lt;code&gt;musikele&lt;/code&gt;, so if I try to login to a remote server that’s what happens:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ssh 123.123.123.123
musikele@123.123.123.123's password:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… but if you’re logging in to a corporate machine you don’t have a user set up with your  username. So we prefix the host address with the remote user, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ssh remote_user@123.123.123.123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re in!&lt;/p&gt;

&lt;p&gt;Other useful options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-p 2222&lt;/code&gt; is used to specify the port to use. Default port for SSH is 22.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-i /path/to/alternate/key&lt;/code&gt; is used to speficy another &lt;em&gt;private&lt;/em&gt; key you want to use instead of the default one. You can have as many public/private keys you want, and they an be in different files or in different paths.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-f&lt;/code&gt; runs ssh in the background (you’ll see later when to use it)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-N&lt;/code&gt; does not open a window.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;to run only one command and exit, simply write the command after the ssh connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ssh -p 2222 remote_user@123.123.123.123 ls -al
drwxrwxrwx+  3 root          root     4096 Apr  3 10:02 #recycle
drwxr-xr-x  31 admin         users    4096 Mar 13 07:41 .
drwxrwxrwx+ 13 root          root     4096 Feb  6 09:54 ..
-rwxrwxrwx+  1 admin         users   14340 Jun 18  2017 .DS_Store
...
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We just lunched &lt;code&gt;ls -al&lt;/code&gt; on a remote machine! (and the prompt at line 7 is our local prompt, again).&lt;/p&gt;

&lt;h2 id=&quot;simplify-connections-with-ssh-config-files&quot;&gt;Simplify connections with ssh config files&lt;/h2&gt;

&lt;p&gt;It may be tedious to write the same info (username, remote server address, port…) again and again. With ssh we can define an alias with some informations already set, so that we don’t have to type them again and again. Here’s an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ vi ~/.ssh/config
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# use four spaces to indent
Host foo
    Hostname 123.123.123.123
    User root
    IdentityFile ~/.ssh/id_rsa
    Port 22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then we just log in with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ssh foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a real time saver tip ;)&lt;/p&gt;

&lt;h2 id=&quot;copy-files-to-and-from-the-remote-host&quot;&gt;Copy files to and from the remote host&lt;/h2&gt;

&lt;p&gt;One of the most common actions we want to do with our remote servers is to copy files from and to it. The handy command &lt;strong&gt;scp&lt;/strong&gt; will help us doing this.&lt;/p&gt;

&lt;p&gt;To  transfer a file from local host to a remote one:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;scp bar.txt mark@123.123.123.123:~/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we are coping &lt;code&gt;bar.txt&lt;/code&gt; file on the server, logging in as user &lt;code&gt;mark&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Whatever is after the &lt;code&gt;:&lt;/code&gt; is the path on the remote server. If the path starts with &lt;code&gt;/&lt;/code&gt; it is an absolute path; otherwise it will be local to the user’s home folder.&lt;/p&gt;

&lt;p&gt;Some other handy options for this command are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-P&lt;/code&gt; for the port (note that for the regular ssh we used &lt;code&gt;-p&lt;/code&gt; lowercase)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-r&lt;/code&gt; for a recursive copy of a folder&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And of course, if you want to copy from a remote host to your local pc:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;scp mark@123.123.123.123:~/bar.txt ./new.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;configure-a-ssh-tunnel&quot;&gt;Configure a ssh tunnel&lt;/h2&gt;

&lt;p&gt;With &lt;em&gt;tunneling&lt;/em&gt; you can redirect traffic from one port of an ssh host to a remote server.&lt;/p&gt;

&lt;p&gt;Let’s see an easy example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ssh -L 8000:yahoo.com:80 mark@myhost.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;your computer will listen on port &lt;code&gt;localhost:8000&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;when a packet is sent at &lt;code&gt;localhost:8000&lt;/code&gt; it will reach &lt;code&gt;myhost.com&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;ssh daemon at &lt;code&gt;myhost.com&lt;/code&gt; will redirect to &lt;code&gt;yahoo.com:80&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;responses follow the same path.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This technique can be useful to access a server on a private network. The only problem is that we also log in to &lt;code&gt;myhost.com&lt;/code&gt; and the connection stays open until we exit from the remote session.&lt;/p&gt;

&lt;p&gt;Combining with options  &lt;code&gt;-f -N&lt;/code&gt; ,  we run the tunnel and return to the localhost computer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ssh -f -N -L 8000:yahoo.com:80 mark@myhost.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another great use for tunneling is to redirect  traffic from the ssh server to your local host. Imagine to hit &lt;code&gt;myhost.com:8000&lt;/code&gt; but the traffic is redirected to &lt;code&gt;localhost:3000&lt;/code&gt;. This is useful for debugging, or to set up proxies, etc.&lt;/p&gt;

&lt;p&gt;Remote tunneling is disabled by default; to enable, open the config file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;set &lt;code&gt;GatewayPorts&lt;/code&gt; option to &lt;code&gt;yes&lt;/code&gt; and restart the service (for example with &lt;code&gt;service ssh restart&lt;/code&gt; on Debian/Ubuntu systems).&lt;/p&gt;

&lt;p&gt;Now we can explore the tunneling functionality by launching:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ssh -R 8000:localhost:3000 mark@myhost.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What’s happening here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;port &lt;code&gt;8000&lt;/code&gt; on server &lt;code&gt;myhost.com&lt;/code&gt; is exposed (be sure that it’s reachable, for example by setting port forwarding on gateways if you have)&lt;/li&gt;
  &lt;li&gt;when you connect to port &lt;code&gt;myhost.com:8000&lt;/code&gt; the data is sent to &lt;code&gt;localhost:3000&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;eventual responses will flow back on the same route.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;escape-sequences&quot;&gt;Escape sequences&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;To stop a blocked ssh connection hit &lt;code&gt;&amp;lt;ENTER&amp;gt;&lt;/code&gt; then write: &lt;code&gt;~.&lt;/code&gt; (tilde fullstop).&lt;/li&gt;
  &lt;li&gt;Another escape sequence is &lt;code&gt;~ CTRL-Z&lt;/code&gt; (tilde character + CTRL + Z). The ssh connection will be moved to background. To resume, type &lt;code&gt;fg&lt;/code&gt;. Remember to hit &lt;code&gt;&amp;lt;ENTER&amp;gt;&lt;/code&gt; if you have written anything before.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;verify-ssh-fingerprints&quot;&gt;Verify SSH fingerprints&lt;/h2&gt;

&lt;p&gt;When you connect to a new machine, a new entry is created in the local file &lt;code&gt;~/.ssh/known_hosts&lt;/code&gt; of your computer. This entry contains the fingerprint of the server, so next time it will be already trusted.&lt;/p&gt;

&lt;p&gt;However, sometimes keys on remote servers will change and our machine will not be able to connect again.&lt;/p&gt;

&lt;p&gt;In order to check the new fingerprint of a remote server:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;connect to the remote server (e.g. &lt;code&gt;ssh root@123.123.123.123&lt;/code&gt;) with password&lt;/li&gt;
  &lt;li&gt;on remote host, launch:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ssh-keygen -l -f /etc/ssh/ssh_host_ecdsa_key.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of the command is the fingerprint of the key.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;on localhost, launch:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ssh-keygen -R 123.123.123.123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will remove the line associated with &lt;code&gt;123.123.123.123&lt;/code&gt; in the &lt;code&gt;~/.ssh/known_hosts&lt;/code&gt; file.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;finally, connect again to the remote server:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ssh root@123.123.123.123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The remote host will show its fingerprint, and it should match the one calculated before.&lt;/p&gt;

&lt;h2 id=&quot;other-cool-ssh-options&quot;&gt;Other cool SSH options&lt;/h2&gt;

&lt;h3 id=&quot;deny-any-root-access&quot;&gt;Deny any root access&lt;/h3&gt;

&lt;p&gt;You can imagine why a ssh connection for the root account can be a bad thing. Fortunately It can be disabled.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;launch &lt;code&gt;vi /etc/ssh/sshd_config&lt;/code&gt;. This file contains a bunch of options for ssh.&lt;/li&gt;
  &lt;li&gt;Search for &lt;code&gt;PermitRootLogin&lt;/code&gt; and set to &lt;code&gt;no&lt;/code&gt; to avoid root login.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;prohibit-password-access&quot;&gt;Prohibit password access&lt;/h3&gt;

&lt;p&gt;Another value for this setting is &lt;code&gt;prohibit-password&lt;/code&gt;. This way you can only connect via public/private key.  You can disable password authentication by setting &lt;code&gt;PasswordAuthentication&lt;/code&gt; option to &lt;code&gt;no&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to accept connections only for a specific set of users, or only users that come from a specific IP, you can set &lt;code&gt;AllowUsers&lt;/code&gt; option like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AllowUsers foo bar@1.2.3.4 *@2.3.4.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember to restart the server with &lt;code&gt;service ssh restart&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;monitoring-connection-attempts&quot;&gt;Monitoring connection attempts&lt;/h2&gt;

&lt;p&gt;To check malicious/suspicious activity we have some tools that come at help.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;vi /var/log/auth.log&lt;/code&gt; contains all the informations about who tried to log in the system, with other info like the IP, etc.&lt;/li&gt;
  &lt;li&gt;command &lt;code&gt;lastlog&lt;/code&gt; will show last logs from all users of the system.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lastlog -u mark&lt;/code&gt; will display last logs for user &lt;code&gt;mark&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, we may see that our employee &lt;code&gt;mark&lt;/code&gt; is connecting to the server, but at strange hours. So we can ask mark to  &lt;code&gt;cat ~/bash_history&lt;/code&gt; and check his latest commands.  We can use this info to check if he legitimately accessed the machine, or if it was a hacker.&lt;/p&gt;

&lt;h3 id=&quot;thats-all-folks&quot;&gt;That’s all folks&lt;/h3&gt;

&lt;p&gt;This article is nothing more than a summary of what I learned by following &lt;a href=&quot;&quot;&gt;this excellent ssh course from Egghead&lt;/a&gt;. I think they are great and deserve a paid subscription.&lt;/p&gt;

&lt;p&gt;Tunnelling was the most difficult thing to set up. Here are &lt;a href=&quot;&quot;&gt;two&lt;/a&gt; &lt;a href=&quot;&quot;&gt;articles&lt;/a&gt; that have helped me out. about this&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="ssh" /><category term="tutorial" /><summary type="html">SSH is one of the basic commands you need to master, no matter what’s your platform of choice. Because you’ll always end up working on some random server, and you’ll have to login to see logs or restarting services. Also, you’ll never see it as a skill to show because it’s implicit that you have to know how to use it, at least for logging in to some website.</summary></entry><entry><title type="html">What’s the difference between Browserify and Webpack?</title><link href="https://michelenasti.com/2019/03/23/what-s-the-difference-between-browserify-and-webpack.html" rel="alternate" type="text/html" title="What's the difference between Browserify and Webpack?" /><published>2019-03-23T00:00:00+01:00</published><updated>2019-03-23T11:34:02+01:00</updated><id>https://michelenasti.com/2019/03/23/what-s-the-difference-between-browserify-and-webpack</id><content type="html" xml:base="https://michelenasti.com/2019/03/23/what-s-the-difference-between-browserify-and-webpack.html">&lt;p&gt;&lt;strong&gt;Browserify&lt;/strong&gt; belongs to the very first generation of module bundlers and it basically allowed one thing, that is, use the &lt;code&gt;require&lt;/code&gt; function from NodeJS in the browser. Browserify’s only job was to concatenate files wrapping them in functions that were then called by other fils.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bropack.png&quot; alt=&quot;&quot; title=&quot;Browserify vs Webpack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Webpack&lt;/strong&gt; came around after (that’s why I call it &lt;em&gt;2nd generation&lt;/em&gt;) but it enhanced a lot and it has also joined the &lt;em&gt;3rd generation&lt;/em&gt;, together with &lt;strong&gt;Rollup&lt;/strong&gt; and &lt;strong&gt;Parcel&lt;/strong&gt;. The difference with Browserify is that Webpack is extremely configurable, and it can be used to write libraries, webapps, and much more.&lt;/p&gt;

&lt;p&gt;Webpack integrates so well with all existing tools that already existed but that didn’t talk to each other (minimizers, obfuscators, patchers…) and by integrating with &lt;strong&gt;babel&lt;/strong&gt; it allowed to write ES6 code even before browsers were actually supporting it.&lt;/p&gt;

&lt;p&gt;The third generation not only did all of this but also introduced the concept of &lt;em&gt;zero config&lt;/em&gt;, meaning you don’t have to configure anything, it will just work.&lt;/p&gt;

&lt;p&gt;And then there’s &lt;em&gt;threeshaking&lt;/em&gt;: if an external file exposes 100 functions but you use only one, webpack picks only the one you used and its dependencies, not the whole file. This way, your bundler will save space, meaning less data flowing through the net.&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="browserify" /><category term="webpack" /><category term="rollup" /><category term="parcel" /><category term="bundler" /><summary type="html">Browserify belongs to the very first generation of module bundlers and it basically allowed one thing, that is, use the require function from NodeJS in the browser. Browserify’s only job was to concatenate files wrapping them in functions that were then called by other fils.</summary></entry><entry><title type="html">How ads are loaded so fast: the command queue pattern</title><link href="https://michelenasti.com/2019/02/12/how-ads-are-loaded-so-fast-the-command-queue-pattern.html" rel="alternate" type="text/html" title="How ads are loaded so fast: the command queue pattern" /><published>2019-02-12T00:00:00+01:00</published><updated>2019-02-15T11:55:44+01:00</updated><id>https://michelenasti.com/2019/02/12/how-ads-are-loaded-so-fast-the-command-queue-pattern</id><content type="html" xml:base="https://michelenasti.com/2019/02/12/how-ads-are-loaded-so-fast-the-command-queue-pattern.html">&lt;p&gt;Prior to work in an ads company I had no idea of how ads are actually rendered on a page. I mean, I had a vague sense of what was going on, but the actual world behind it … well, it’s huge :)&lt;/p&gt;

&lt;p&gt;Sometimes ads are loaded on a page even before you actually see any content. How? The first thing we learned at university is to wait for the DOM to have completely loaded, before doing anything to the DOM itself. This does not apply to ads, or better to say, ad companies use many tricks to load ads without blocking the DOM.&lt;/p&gt;

&lt;p&gt;I won’t go in the detail of this process now, but basically &lt;strong&gt;ads are rendered inside &lt;em&gt;iframes&lt;/em&gt;&lt;/strong&gt;, and iframes should be used only for very narrow use cases, like widgets to inject on other pages, or payment processors. In the past I did the exact opposite: we implemented an angular 1 routing system with iframes, and that’s something I wouldn’t do again (&lt;a href=&quot;https://michelenasti.com/2015/05/iframe-safari-ios-e-la-lotta-allultimo-millisecondo/&quot;&gt;my experience&lt;/a&gt; - in italian).&lt;/p&gt;

&lt;p&gt;Here in this article I’m going to talk about how some popular ad libraries (like &lt;a href=&quot;https://support.google.com/admanager/answer/1638622?hl=en&amp;amp;ref_topic=4390039&quot;&gt;google publisher tag&lt;/a&gt; or &lt;a href=&quot;http://prebid.org/dev-docs/getting-started.html&quot;&gt;Prebid&lt;/a&gt;) allow users to write code that will be put in a queue and will be executed as soon as the library is loaded.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-async-library-loading&quot;&gt;The problem: async library loading&lt;/h2&gt;

&lt;p&gt;Suppose we have a library that will load something, and this initialization process will take some time. Also, we don’t know when the library will be actually loaded, since it’s asyncronous. However, we would like to start giving commands (e.g. setup instructions) to this library as soon as possible. How?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Let’s suppose our library’s name is, without much fantasy, &lt;code&gt;Library&lt;/code&gt; and is loaded from file &lt;code&gt;Library.js&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-client-code&quot;&gt;The client code&lt;/h2&gt;

&lt;p&gt;in the client’s code, the code that the user will write to interact with our library, we will initialize the library like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var Library = Library || {}; 
Library.queue = Library.queue || [];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In these two simple lines, we have initialized our library and its commands queue. In fact, if the &lt;code&gt;Library&lt;/code&gt; object does not exist, we will initialize it with an empty object, and then we will create the empty array property &lt;code&gt;Library.queue&lt;/code&gt; that will contain our initalization code. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Library.queue.push(function(){
	console.log(&quot;Called only when the library has loaded, not before&quot;);
	Library.doMagic();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: I’m deliberately using ES5 code here. It would be fantastic that every user in the world was using the latest version of the coolest browser, but the reality is that &lt;strong&gt;a bunch of zombies are still using Internet Explorer&lt;/strong&gt;. Ad companies want to earn money on these people too!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-we-load-the-library&quot;&gt;How we load the Library&lt;/h2&gt;

&lt;p&gt;Imagine we load our library with this &lt;code&gt;script&lt;/code&gt; tag:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;/path/to/Library.js&quot; async defer&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;async&lt;/code&gt; means that the browser will download the library as soon as possible, but the evaluation will start whenever it is more convenient (the browser decides). The HTML parser is paused when the script is evluated. &lt;code&gt;defer&lt;/code&gt; means the same thing (more or less!) but the code execution happens only after the DOM has been loaded. &lt;a href=&quot;https://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html&quot; title=&quot;async vs defer&quot;&gt;More info here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By inserting the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; keyword we don’t have any guarantee of the Library execution time, so we don’t know who will be loaded first.&lt;/p&gt;

&lt;h2 id=&quot;the-library-internals&quot;&gt;The Library internals&lt;/h2&gt;

&lt;p&gt;Here’s an example of how the Library could initialize itself:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//This code could be in file Library.js 
 
var Library = (function() {
  ...
  var queue = []; 
  if (Library) {
    // queue from outside might be null... 
    queue = Library.queue || queue;
  } 
  //here we execute code that is in the queue
  while (queue.length &amp;gt; 0) {
    var command = queue.shift(); 
    command();
  }
  ...
})()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First we will check if the &lt;code&gt;Library&lt;/code&gt; object already exists. This may be because of the initialization we did in the client code. If so, we take the queue object and start executing all commands from the queue, until the queue is empty.&lt;/p&gt;

&lt;h2 id=&quot;thats-so-async-its-actually-fast&quot;&gt;That’s so async, it’s actually fast&lt;/h2&gt;

&lt;p&gt;By not forcing the browser to stop and parse our js, we gain a significant amount of perceived speed. And by splitting the client code in &lt;em&gt;commands&lt;/em&gt; we also get the guarantee that the client code will be executed.&lt;/p&gt;

&lt;p&gt;In this simple snippet we have not covered other themes like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;what if we add another element to the queue after the initialization has already completed?&lt;/li&gt;
  &lt;li&gt;A way of logging functions (yes, we can stringify functions) and remember a history of executed functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s an exercise for you, fellow readers!&lt;/p&gt;</content><author><name>musikele</name></author><category term="Italiano" /><summary type="html">Prior to work in an ads company I had no idea of how ads are actually rendered on a page. I mean, I had a vague sense of what was going on, but the actual world behind it … well, it’s huge :)</summary></entry><entry><title type="html">Is typescript Namespace feature deprecated?</title><link href="https://michelenasti.com/2019/01/23/is-typescript-namespace-feature-deprecated.html" rel="alternate" type="text/html" title="Is typescript Namespace feature deprecated? " /><published>2019-01-23T00:00:00+01:00</published><updated>2019-01-19T00:40:46+01:00</updated><id>https://michelenasti.com/2019/01/23/is-typescript-namespace-feature-deprecated</id><content type="html" xml:base="https://michelenasti.com/2019/01/23/is-typescript-namespace-feature-deprecated.html">&lt;p&gt;At my new job I maintain a medium-sized typescript library that is critical to the success of the company.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/typescript-cover-image.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The guy who wrote the library was not expert in typescript (but he was in ES6) and he needed a way to manage complexity before it was too late; so he rewrote entire parts of the app using &lt;strong&gt;typescript namespaces&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-namespace-in-typescript&quot;&gt;What is a namespace in Typescript&lt;/h2&gt;

&lt;p&gt;Apart from the fact that typescript actually has a good documentation about &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/namespaces.html&quot; title=&quot;Typescript Namespaces&quot;&gt;namespaces&lt;/a&gt;, it is not clear why you would need them in first place. So, a namespace is declared like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;namespace Validation {
	...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;inside the namespace you can create wathever you need: classes, functions, etc.&lt;/p&gt;

&lt;p&gt;What’s the corresponding ES5 output?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;(function(Validation) {

    Validation.foo = 123;

})(Validation || (Validation = {}))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The magic happens in the arguments: we pass the &lt;code&gt;Validation&lt;/code&gt; object if exists, otherwise we initialize a new &lt;code&gt;Validation&lt;/code&gt; object. This way we can add as many object we want to the same namespace without polluting the global scope.&lt;/p&gt;

&lt;p&gt;But …&lt;/p&gt;

&lt;h2 id=&quot;is-this-actually-needed&quot;&gt;Is this actually needed?&lt;/h2&gt;

&lt;p&gt;You can actually have many files that declare objects and classes in the same namespace:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// typescript: 
// file 1
namespace Validation {
	const foo = 123;
}
// file 2
namespace Validation {
	const bar = 567;
}

//This becomes, in es6:
(function(Validation) {
    Validation.foo = 123;
})(Validation || (Validation = {}))

//file 2... 
(function(Validation) {
    Validation.bar = 567;
})(Validation || (Validation = {}))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in memory &lt;code&gt;Validation&lt;/code&gt; will contain both &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; properties.&lt;/p&gt;

&lt;p&gt;If these two &lt;code&gt;Validation&lt;/code&gt; namespace declaration are in two separate files, evaluating  order is important. That’s why in Typescript when you use namespaces you also use a custom tag &lt;code&gt;/// &amp;lt;reference path=&quot;Validation.ts&quot; /&amp;gt;&lt;/code&gt; to reference the actual ordering of files. But, guess what? &lt;strong&gt;This tag is not supported by Visual Studio Code&lt;/strong&gt; - no autocomplete, bitches.&lt;/p&gt;

&lt;p&gt;Apart from this, the problem we faced was &lt;strong&gt;testing&lt;/strong&gt;: actually being able to test a namespaced class or function is very important (where is quality if you don’t have tests?). We eventually found the combination of importing, module type and typescript setting that would allow us to do this. but it was cumbersome.&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; that this syntax was developed before ES6 was actually developed, but in my modest opinion &lt;strong&gt;ES6 modules surpassed them in functionality&lt;/strong&gt; and are more similar to how we commonly modularize stuff. You should go with ES6 straight.&lt;/p&gt;

&lt;h2 id=&quot;why-es6-modules-are-better&quot;&gt;Why ES6 modules are better&lt;/h2&gt;

&lt;p&gt;First, an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;//typescript
export class Validaton { 
	... 
}

//becomes, in javascript:
export class Validation {
	... 
}

//then you can import the class anywhere: 
import { Validation } from '../Validation' 

function checkData(data) {
	Validation.isValid(data)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can you see the difference? There is &lt;em&gt;NO&lt;/em&gt; difference! Typescript is a superset of ES6 so you have more power in what you can do, but that doesn’t mean you should do it. In this case, ES6 solved the problem of modularization for us by doing a good job, so we don’t need any namespace at all in common programs (unless you specifically want to use namespaces).&lt;/p&gt;

&lt;p&gt;My rule of thumb: &lt;strong&gt;stick to ES6 the more you can and just add types&lt;/strong&gt; to classes and functions. This way the code is readable also by those who don’t know typescript.&lt;/p&gt;

&lt;p&gt;The great &lt;strong&gt;benefit&lt;/strong&gt; of all this is with &lt;strong&gt;IDE autocompletion&lt;/strong&gt; and &lt;strong&gt;error highlighting&lt;/strong&gt;. Today I refactored the whole library based only on IDE suggestions, and it was a breeze. Can you imagine doing this in ES6? Impossible.&lt;/p&gt;

&lt;h2 id=&quot;other-people-that-deprecates-namespaces&quot;&gt;Other people that deprecates namespaces&lt;/h2&gt;

&lt;p&gt;This &lt;a href=&quot;https://basarat.gitbooks.io/typescript/docs/project/namespaces.html&quot;&gt;ultra-famous book&lt;/a&gt; about typescript states:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For most projects we recommend using external modules and using &lt;code&gt;namespace&lt;/code&gt; for quick demos and porting old JavaScript code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;TSLint has a predefined rule to &lt;a href=&quot;https://palantir.github.io/tslint/rules/no-namespace/&quot;&gt;avoid namespaces&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The same opinion is found in &lt;a href=&quot;https://stackoverflow.com/questions/12737942/does-typescript-support-namespace#comment78314603_12742162&quot;&gt;many places&lt;/a&gt; around Stack Overflow:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I wouldn’t recommended &lt;code&gt;namespace&lt;/code&gt; nor mixing it with &lt;code&gt;module&lt;/code&gt; source code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;so-what&quot;&gt;So what&lt;/h2&gt;

&lt;p&gt;I think namespaces will hit their end-of-life soon, basically they solved a problem that now can be solved with classical ES6 syntax. Even if the import/export keyword is not working in all browsers out of the box, that’ the road they are covering so it’s just a matter of time and we’ll get rid of any other solution we had to manage complexity.&lt;/p&gt;

&lt;p&gt;See you soon!&lt;/p&gt;</content><author><name>musikele</name></author><category term="Italiano" /><summary type="html">At my new job I maintain a medium-sized typescript library that is critical to the success of the company.</summary></entry><entry><title type="html">Another remote job for me</title><link href="https://michelenasti.com/2019/01/17/another-remote-job-for-me.html" rel="alternate" type="text/html" title="Another remote job for me" /><published>2019-01-17T00:00:00+01:00</published><updated>2019-01-23T00:11:17+01:00</updated><id>https://michelenasti.com/2019/01/17/another-remote-job-for-me</id><content type="html" xml:base="https://michelenasti.com/2019/01/17/another-remote-job-for-me.html">&lt;p&gt;Two years ago I wrote about &lt;a href=&quot;/2016/06/cambio-lavoro-alla-scoperta-del-remote-working/&quot;&gt;quitting a job in a big italian corporation&lt;/a&gt; to join a smaller reality that worked in fintech.&lt;/p&gt;

&lt;p&gt;My previous company gave me an amazing experience. I worked on two fantastic public-facing products, a &lt;strong&gt;payments gateway&lt;/strong&gt; and a low-cost POS solution for small businesses.&lt;/p&gt;

&lt;p&gt;However after two years I felt like I &lt;em&gt;had&lt;/em&gt; to change job, to make new experiences.&lt;/p&gt;

&lt;h2 id=&quot;how-&quot;&gt;How ?&lt;/h2&gt;

&lt;p&gt;Long story short, &lt;a href=&quot;/2018/09/19/Javascript-chiamare-funzioni-senza-usare-parentesi-(what!).html&quot;&gt;I wrote an article on my blog that had an impredictable success&lt;/a&gt; about an obscure javascript feature and &lt;strong&gt;some companies reached out to know weather I wanted to join them&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I did not send any CV in thist first phase. I think they understood my skills from my blog. I’m writing this because I’m super happy that my blog did pay off. It started as a (cheap) long-term investiment and I’m happy it succeded.&lt;/p&gt;

&lt;p&gt;Back to the job, a guy reached out from Switzerland, writing to me in italian, asking weather I wanted to have a chat about his company. There was a lot of empathy with this guy, and I evaluate empathy as a bonus factor so when his boss finally asked me to go and have a meeting in person, I accepted.&lt;/p&gt;

&lt;h2 id=&quot;the-interview&quot;&gt;The interview&lt;/h2&gt;

&lt;p&gt;So I took a plane one morning and flied to Zurich.  The interview was a classic whiteboard interview, and the question was easy (the difference of the two sum of two diagonals of a matrix) but this was just a starting point. We went through writing pseudocode, optimizing, etc. I remember I did not answer very well a question about how DNS works (a critical component in their architecture) but in the end they still hired me.&lt;/p&gt;

&lt;h2 id=&quot;what-they-do&quot;&gt;What they do&lt;/h2&gt;

&lt;p&gt;The company works in the Advertising space. Their main job is to deliver ads to website visitors, like Adsense; but they organize an auction with many other ad providers, and this happens in the browser, so that the best-paying ads are shown.&lt;/p&gt;

&lt;p&gt;So publishers contact the company and ask them to deliver ads to visitors, by injecting some javascript code. Then, revenues are payed from my company to the websites. At the moment they have clients spanning in the whole US market.&lt;/p&gt;

&lt;h2 id=&quot;programmatic-advertising&quot;&gt;Programmatic advertising&lt;/h2&gt;

&lt;p&gt;In the latest years a new branch in advertising was born, called &lt;strong&gt;Programmatic Advertising&lt;/strong&gt;. Programmatic uses a new approach to deliver ads, &lt;strong&gt;Header bidding&lt;/strong&gt;, and tries to make the website earn as much as possible by delivering the most valuable ad from a variety of sources. It’s way more interesting, complex, asynchronous and fast than you think. The web is basically free because of ads. Delivering good ads as fast as possible it’s super important: most ads you see on any website are rendered before the DOM is even parsed!&lt;/p&gt;

&lt;h2 id=&quot;so--when-do-you-start&quot;&gt;So … when do you start?&lt;/h2&gt;

&lt;p&gt;Yes! I’m already working with them. I’m studying all the parts involved in the advertising world (DSPs, SSPs, DFP, GTP… these acronyms make no sense to those who do not work in this area!) and I am already deep diving in the typescript code. So many things happen in one library.&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="lavoro" /><category term="job" /><category term="remote" /><summary type="html">Two years ago I wrote about quitting a job in a big italian corporation to join a smaller reality that worked in fintech.</summary></entry><entry><title type="html">10 years around the web platform, what’s changed and what’s not</title><link href="https://michelenasti.com/2018/12/12/remembering-the-bad-bad-days-of-browser-wars.html" rel="alternate" type="text/html" title="10 years around the web platform, what's changed and what's not" /><published>2018-12-12T00:00:00+01:00</published><updated>2018-12-12T11:33:24+01:00</updated><id>https://michelenasti.com/2018/12/12/remembering-the-bad-bad-days-of-browser-wars</id><content type="html" xml:base="https://michelenasti.com/2018/12/12/remembering-the-bad-bad-days-of-browser-wars.html">&lt;p&gt;&lt;strong&gt;In 2006 I was studying web technologies at University&lt;/strong&gt;. Avilable browsers were Firefox, Opera, Internet Explorer, Netscape on some linux computers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/1 Me2MiUgum7fhYWoUp5nwJA.png&quot; alt=&quot;The web was a huge mass of &amp;lt;table&amp;gt; elements&quot; title=&quot;The youtube homepage in 2006&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt; was at version 4 and there were a lot of standards competing like &lt;strong&gt;xhtml&lt;/strong&gt; (basically, xml to write html and help syntax checkers) and also many &lt;strong&gt;doctypes&lt;/strong&gt; (strict, transitional …) that I never fully understood. Fortunately now we just write &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt; and that’s it. &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; was a relatively new thing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt; was not cool. The teacher didn’t spend more than 2-3 lessons on it, just explaining how to do basic input validation and some DOM manipulation. Strangely enough, javascript as a language was never versioned but now we refer to that days as EcmaScript3 (&lt;a href=&quot;https://www.w3schools.com/js/js_versions.asp&quot;&gt;here’s a table with all javascript versions&lt;/a&gt;). No JQuery was introduced. There were no books ot guides to learn JS, too. There was just one devtool available, and it was a Firefox extension called &lt;em&gt;Firebug&lt;/em&gt; (later it became part of the browser).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt; was also crazy (it still is!). Some browsers adhered to the standard, but not the main one, forcing developers to cross test everything on all possible browsers. Fortunately at the time browsers were just 3-4, not the plethora we have now.&lt;/p&gt;

&lt;p&gt;So… my first days of web design were just crazy. One of the tasks I had to do for this exam was to develop a “personal website”, and I remember that it was not rendering correctly on IE.&lt;/p&gt;

&lt;h2 id=&quot;internet-explorer-the-bad-guy&quot;&gt;Internet Explorer, the bad guy&lt;/h2&gt;

&lt;p&gt;What I didn’t know is that IE &lt;em&gt;deliberately&lt;/em&gt; violated the standard, using its power and market share to &lt;strong&gt;impose&lt;/strong&gt; their version of the web against rivals.&lt;/p&gt;

&lt;p&gt;I struggled realizing a simple website that would show correctly on firefox, following the standards, but not at all on IE (95% of the market share at the time).&lt;/p&gt;

&lt;p&gt;Same for Javascript: IE was just not following some rules that were correctly implemented by others, or deliberately not implementing some standard features. This is one of the motivations for libraries like &lt;strong&gt;JQuery&lt;/strong&gt; to rise: cross-browser uniformity.&lt;/p&gt;

&lt;p&gt;I promised to myself to never work on the web: the platform is unreilable, buggy, nothing works as expected and there’s nothing you can do about it, except than doubling the work.&lt;/p&gt;

&lt;h2 id=&quot;fast-forward-12-years-later&quot;&gt;Fast forward, 12 years later&lt;/h2&gt;

&lt;p&gt;I’m working as a web developer since 6 years, basically I had no choice: when I ended university all the companies were transforming their long-lived java applications to web applications. The good news are that javascript has been standardized (ES5 before, and ES6 after, were huge steps towards browser uniformity) and even newer versions of IE are supporting it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chrome&lt;/strong&gt;, started in 2008, is now the market leader with about 68% of the market share. Chrome uses its own rendering engine called &lt;em&gt;Blink,&lt;/em&gt; part of the &lt;em&gt;Chromium project&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Firefox, the only truly indipendent browser,&lt;/strong&gt; is my default browser. They are not developed by a company but by a no-profit foundation. Their goal is to make the web platform the best possible platform. For many years they were behind Chrome on features, speed and privacy, but now FF is just the same if not better. So yes, I’m using Firefox for moral issues, but there’s litterally nothing that I’m loosing since the switch. (I also use FF on mobile). Firefox uses its own rendering engine called &lt;em&gt;Gecko&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edge&lt;/strong&gt; was a new browser by Microsoft, and it was a surprisingly great browser. It is very fast and it also has a lot of features dedicated to tablets and touchscreens, so that you may prefer it on portable devices. Edge is still not widely adopted (lates stats say that edge is at 4% while IE is &lt;em&gt;still&lt;/em&gt; at 11%!) but it should. Edge uses it’s own rendering engine called &lt;em&gt;EdgeHTML&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Internet Explorer&lt;/strong&gt; in 2018 it should be a thing of the past, but it’s not. IE has been &lt;em&gt;deprecated&lt;/em&gt; and there will be no support for it in the future. It still has 11% of global market share (In Italy, where I live and work, it’s at 2-4%) and I think this happens because many companies impose to their employees to use IE, since they may have developed security features, of custom applets, or other stuff that cannot be thrown away and rebuild in newer technology because it’s not a simple/cheap job. This is what happens when you entangle your company on a closed platform…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Safari&lt;/strong&gt; is a browser that only exists on Apple iDevices. Safari is now considered the IE of the current browsers: many missing features, slow updates, slow fixes… Many standard components are simply ignored because it’s not functional to the company’s view of the web (Apple encourages developers to go native). Safari is based on &lt;em&gt;Webkit&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There are many other browsers, like &lt;strong&gt;Opera&lt;/strong&gt;, &lt;strong&gt;Brave&lt;/strong&gt;, etc. but they’ve not reached great market share, even if they are technologically very valid.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/1472784019browser-wars-over.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;so--what-should-we-do-now&quot;&gt;So … what should we do now&lt;/h2&gt;

&lt;p&gt;The web is the platform that I know better: I love and hate it. &lt;strong&gt;I love the fact that it’s spontaneous&lt;/strong&gt;, with many great ideas going on, and it also moves very fast so that’s impossible to stay current with every possible update.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I hate that some companies implement standards based on what they consider useful.&lt;/strong&gt; This has happened for a decade with Internet Explorer, and now with Safari.&lt;/p&gt;

&lt;p&gt;With Chrome I have a difficult relationship: &lt;strong&gt;I don’t like that one company owns the future of a browser, and with a 70% of the web they also own the future of the web&lt;/strong&gt;; it creates some moral questions about privacy and security, too. But &lt;strong&gt;we cannot negate that Google has done a great job&lt;/strong&gt; by open sourcing big parts of the browser and they also have been the first browser to implement new standards (and closing bugs).&lt;/p&gt;

&lt;p&gt;The latest news are that &lt;strong&gt;Edge is switching to a Chromium-based rendering engine&lt;/strong&gt;. They are doing this because Edge was so new that - like all new things - the browser was crashy, with bugs, and not performing well on some things that others do just fine. I am not an Edge user and, while I have to admit that technologically they are chosing the best available platform, I feel sad that another competitor gives away the competition. &lt;strong&gt;This brings us to a monopoly and that’s not what I expect&lt;/strong&gt;. The good thing is that developers at Microsoft will start contributing to parts of Chromium, so the rendering engine will not be really owned by only one company, but we still don’t know the direction of these two companies and their long-term plans.&lt;/p&gt;

&lt;h2 id=&quot;please-condiser-using-a-non-chromium-browser-for-some-time&quot;&gt;Please condiser using a non-Chromium browser for some time&lt;/h2&gt;

&lt;p&gt;I’m already using and supporting &lt;strong&gt;Firefox&lt;/strong&gt; and there’s literally nothing I miss. It’s fast, secure, privacy oriented, cool. Break the monopoly; &lt;strong&gt;in the long term we - users - will be the only ones to earn the benefits of this choice.&lt;/strong&gt;&lt;/p&gt;</content><author><name>musikele</name></author><category term="Italiano" /><category term="html" /><category term=" javascript" /><category term="css" /><category term="internet explorer" /><category term="jquery" /><category term="chrome" /><category term="firefox" /><category term="edge" /><category term="safari" /><category term="microsoft" /><category term="google" /><category term="apple" /><category term="mozilla" /><summary type="html">In 2006 I was studying web technologies at University. Avilable browsers were Firefox, Opera, Internet Explorer, Netscape on some linux computers.</summary></entry><entry><title type="html">What I learned by writing my first npm module</title><link href="https://michelenasti.com/2018/11/17/what-i-learned-by-writing-my-first-npm-module.html" rel="alternate" type="text/html" title="What I learned by writing my first npm module" /><published>2018-11-17T00:00:00+01:00</published><updated>2018-11-19T10:23:28+01:00</updated><id>https://michelenasti.com/2018/11/17/what-i-learned-by-writing-my-first-npm-module</id><content type="html" xml:base="https://michelenasti.com/2018/11/17/what-i-learned-by-writing-my-first-npm-module.html">&lt;p&gt;Last weekend I wrote a simple module that converts a Javascript array in a HTML table. It’s called &lt;a href=&quot;https://www.npmjs.com/package/html-table-builder&quot; title=&quot;HTML Table Builder&quot;&gt;Html Table Builder&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is an exercise from the book &lt;a href=&quot;https://eloquentjavascript.net&quot;&gt;Eloquent Javascript&lt;/a&gt;; also, there are other gazillion modules on NPM that do the same thing with very similar names (a sign that the book is used a lot by javascript learners).&lt;/p&gt;

&lt;h2 id=&quot;a-little-description&quot;&gt;A little description&lt;/h2&gt;

&lt;p&gt;The library exposes a js function that accepts a js array and returns a HTML &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; object (not string!), so you can attach to the document with &lt;code&gt;document.appendChild(element)&lt;/code&gt;. Checkout the &lt;a href=&quot;https://github.com/musikele/html-table-builder&quot;&gt;documentation on github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My idea was to release a library that was:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;fully tested&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;developed with &lt;strong&gt;Test Driven Development&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;isomorphic&lt;/strong&gt; (by using &lt;a href=&quot;https://www.npmjs.com/package/jsdom&quot;&gt;JSDOM&lt;/a&gt; on node)&lt;/li&gt;
  &lt;li&gt;built by &lt;strong&gt;webpack&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;accepts objects with &lt;strong&gt;custom columns&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many more features have to come:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;apart from the fact that the input must be an array, I don’t want to force users to pass array of objects. So you can pass an array containing strings, numbers, etc. even heterogeneous objects, the function will render it somehow.&lt;/li&gt;
  &lt;li&gt;I want to generate tables-in-tables, if the object in input is an array containing other arrays. This is tricky to do, I’ll have to handle colspans and more.. but not impossible.&lt;/li&gt;
  &lt;li&gt;I also have to add css classes to columns (so you can style your tables)&lt;/li&gt;
  &lt;li&gt;…and add a showcase page. Who’s gonna use your library if nobody understand how to use it?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;i-lost-a-lot-of-time-with&quot;&gt;I lost a lot of time with…&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Webpack&lt;/strong&gt; - diving inside the webpack configuration to get the library minimized and bundled should be an easy task, BUT our friends in webpack have added thousands of options to configure every single bit.&lt;br /&gt;
In the end this is &lt;a href=&quot;https://github.com/musikele/html-table-builder/blob/master/webpack.config.js&quot;&gt;the configuration that works for me&lt;/a&gt;:&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// webpack.config.js
module.exports = {
  entry: './index.js',
  target: 'web', 
  output: {
    filename: 'html-table-builder.js',
    library: 'HtmlTableBuilder',
    libraryTarget: 'umd'
  },
  mode: 'production',
  devtool: 'source-map',
  externals: {
    jsdom: 'JSDOM'
  }
};
  
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;The relevant bits to expose the library are in the &lt;code&gt;output&lt;/code&gt; property; read the &lt;a href=&quot;https://webpack.js.org/configuration/output/#output-library&quot;&gt;documentation&lt;/a&gt; for it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NPM&lt;/strong&gt; - I used npm (tool) to upload my pckage to NPM (site). NPM had some security issues lately, somebody hacked maintainers accounts and released dangerous code in popular libraries. That’s why they reset all user passwords and implemented 2FA authentication, that is a good thing. It even works from console. 
But the main trouble was naming the library. It is a table generator, and you really can’t imagine &lt;a href=&quot;https://www.npmjs.com/search?q=json%20to%20table&quot;&gt;how many there are&lt;/a&gt;. Trying to be self-explicative, without sacrificing the “ideal good name”, took me to choose a &lt;code&gt;html-table-builder&lt;/code&gt;. I would have loved to call it &lt;code&gt;super-table&lt;/code&gt; or &lt;code&gt;table-generator&lt;/code&gt;, but guess what? Already taken. Sad.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Javascript&lt;/strong&gt; - I have a story to tell about JS and dynamic typing. I was writing the function that &lt;a href=&quot;https://github.com/musikele/html-table-builder/blob/master/get-columns/index.js&quot;&gt;extracts the name of the columns&lt;/a&gt;, and in the first version it returned an array of strings. &lt;br /&gt;
Then I decided to return an array of object and DANG! errors everywhere, fortunately tracked down by unit tests. &lt;br /&gt;
Then I decided to change again and make it return an object instead of an array, and again only TDD could help me to track down errors. &lt;br /&gt;
In the end … &lt;strong&gt;static types could have helped to catch errors without TDD&lt;/strong&gt; and I could have used TDD-time to develop more complex tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-did-not-give-problems&quot;&gt;What did not give problems&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Jest&lt;/strong&gt;. Testing with Jest has been &lt;em&gt;extremely easy&lt;/em&gt;. It was my first experience with Jest (coming from Mocha) but I have never had to checkout the documentation for anything. Good!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ESLint, Prettier&lt;/strong&gt; and &lt;strong&gt;VSCode&lt;/strong&gt; - These tools resolve stupid issues for you. Just install and forget about them.  They’ll add semicolumns, fix tabs or spaces, return syntactic errors live… A good bonus.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;finally&quot;&gt;Finally&lt;/h2&gt;

&lt;p&gt;It is a very simple library, but it is already downloaded by 64 users (small number, but &lt;em&gt;great!&lt;/em&gt; If you’re a user, pass by and let me know your problems).&lt;/p&gt;

&lt;p&gt;I learned a lot of stuff by writing this library; &lt;strong&gt;It took me some 8hrs to work it out&lt;/strong&gt;. But it was fun.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You remember 5% of what you read, 10% of what you write, 90% of what you do again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Exactly what I thought while I was preparing the first release!&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="javascript" /><category term="nodejs" /><summary type="html">Last weekend I wrote a simple module that converts a Javascript array in a HTML table. It’s called Html Table Builder.</summary></entry></feed>