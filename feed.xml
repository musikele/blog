<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>I'm a full stack Developer with an eye for the web.</description>
    <link>https://michelenasti.com/</link>
    <atom:link href="https://michelenasti.com/feed.xml" rel="self" type="application/rss+xml" />
    <updated>2017-06-09T09:11:40+00:00</updated>
    <id>https://michelenasti.com</id>
    <author>
      <name></name>
    </author>
    
      <item>
        <title>Cinque tool per migliorare la vostra developer experience</title>
        <link>https://michelenasti.com/2017/05/30/cinque-tool-per-migliorare-la-vostra-developer-experience.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/05/30/cinque-tool-per-migliorare-la-vostra-developer-experience.html</guid>
        <pubDate>Tue, 30 May 2017 12:07:50 +0000</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Riuscireste a svolgere il vostro lavoro senza la linea di comando? Se siete come me, ossia amanti di bash, ecco alcuni tool che vi permetteranno di migliorare la vostra &lt;em&gt;developer experience&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;mac-command-line&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mac&lt;/code&gt; command line&lt;/h3&gt;

&lt;p&gt;Si &lt;a href=&quot;https://github.com/guarinogabriel/Mac-CLI&quot;&gt;installa da linea di comando&lt;/a&gt; e crea un eseguibile, &lt;code class=&quot;highlighter-rouge&quot;&gt;mac&lt;/code&gt;, che permette di svolgere molte operazioni comuni con pochi click.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/demo-mac-cli.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Un esempio?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mac ip:public&lt;/code&gt; vi restituisce il vostro ip pubblico&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mac speedtest&lt;/code&gt; esegue uno speed test da linea di comando&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mac memory&lt;/code&gt; vi dice quale app sta consumando la vostra preziosa RAM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e tanti altri. Sono circa una cinquantina!&lt;/p&gt;

&lt;h3 id=&quot;oh-my-zsh-per-un-terminale-pi√π-combattivo&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Oh-my-zsh&lt;/code&gt; per un terminale pi√π combattivo&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;Oh-my-zsh&lt;/a&gt; √® un tool che va a sovrascrivere un po‚Äô di cose nei vostri file di configurazione di bash. In particolare, modifica il funzionamento del prompt di comando mostrandovi le informazioni di cui pi√π avete bisogno:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/oh-my-zsh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Insomma, avrete sott‚Äôocchio user, cartella in cui vi trovate, repository e branch, senza impazzire. E poi migliora anche l‚Äôutilizzo dell‚Äôautocompletamento (il TAB). Ci sono anche i plugin. Oh my!&lt;/p&gt;

&lt;h3 id=&quot;ngrok-per-testare-chiamate-api-dallesterno&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ngrok&lt;/code&gt;, per testare chiamate API dall‚Äôesterno&lt;/h3&gt;

&lt;p&gt;Dovete testare le chiamate di un sistema esterno verso il vostro software? Ad esempio, io ho avuto questa esigenza con le API di Paypal e Gestpay: a un certo punto questi sistemi dovevano notificarmi che i pagamenti erano andati a buon fine e mi avrebbero contattato agli indirizzi configurati.&lt;/p&gt;

&lt;p&gt;Come testare e come verificare il contenuto di queste chiamate? Facile, con &lt;a href=&quot;https://ngrok.com/&quot;&gt;ngrok&lt;/a&gt;: un tool che permette di creare un tunnel privato da un indirizzo http esterno.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ngrok.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Per farla facile, voi lanciate &lt;code class=&quot;highlighter-rouge&quot;&gt;ngrok http 8000&lt;/code&gt; e ngrok creer√† un indirizzo tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;http://abc33344422.ngrok.io&lt;/code&gt;. Visitando questo indirizzo (anche dall‚Äôesterno della vostra rete privata!) ngrok redirige il traffico a&lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8000&lt;/code&gt;. Tutto ci√≤ che passa per ngrok viene loggato e mostrato!&lt;/p&gt;

&lt;h3 id=&quot;git-flow-una-metodologia-per-semplificare-e-standardizzare-git-nel-team&quot;&gt;Git Flow, una metodologia per semplificare e standardizzare git nel team&lt;/h3&gt;

&lt;p&gt;Git flow √® sia &lt;a href=&quot;https://github.com/nvie/gitflow&quot;&gt;un tool installabile da linea di comando&lt;/a&gt;, sia un approccio filosofico alla domanda ‚Äúcome lavorare in gruppo‚Äù.&lt;/p&gt;

&lt;p&gt;Git √® un potentissimo sistema di versioning e branching; spero per voi che lo stiate gi√† utilizzando altrimenti brrrr.&lt;/p&gt;

&lt;p&gt;Con git flow organizziamo il lavoro in due &lt;em&gt;meta-filoni&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;branch &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, che corrisponde alle versioni rilasciate&lt;/li&gt;
  &lt;li&gt;branch &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;, ossia dove gli sviluppatori committano le feature sviluppate, in attesa di rilascio.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oltre a questi due branch ‚Äúgenerali‚Äù, ogni azione degli sviluppatori √® realizzata creando nuovi branch:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gli sviluppi delle singole feature sui branch &lt;code class=&quot;highlighter-rouge&quot;&gt;feature/*tua_feature*&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;I rilasci (da develop a master) su branch chiamati &lt;code class=&quot;highlighter-rouge&quot;&gt;release/*nome_release*&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;le hotfix (fix, correzioni a bug, di versioni gi√† rilasciate) su branch &lt;code class=&quot;highlighter-rouge&quot;&gt;hotfix/*nome_fix*&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Non ci avete capito niente? &lt;a href=&quot;https://danielkummer.github.io/git-flow-cheatsheet/&quot;&gt;Qui un grafico che prova a spiegare comandi e funzioni&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;bonus-postman-per-testare-le-interfacce-rest&quot;&gt;Bonus: Postman per testare le interfacce Rest&lt;/h3&gt;

&lt;p&gt;Ho iniziato a lavorare che c‚Äôera SOAP e si stava appena iniziando a parlare di REST. Qualche anno dopo, SOAP √® diventato &lt;em&gt;legacy&lt;/em&gt; e tutti si dichiarano REST, chi bene e chi male.&lt;/p&gt;

&lt;p&gt;Ad ogni modo, √® sorta l‚Äôesigenza di testare le interfacce REST e come testarle se non con &lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.getpostman.com/img/v2/logo-big.svg&quot; alt=&quot;Postman&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Questa √®¬† una vera e propria applicazione &lt;em&gt;standalone&lt;/em&gt; che permette di effettuare ogni tipo di chiamata desideriate, GET - PUT - POST - HEAD etc. C‚Äô√® la possibilit√† di salvare le chiamate, passare header aggiuntivi, visualizzare i dati in molti modi (ad esempio JSON), etc etc.&lt;/p&gt;

&lt;p&gt;Come dite? non √® un tool da linea di comando? Avete ragione, ma questo √® il mio blog e qui comando io üòÇ&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/05/30/cinque-tool-per-migliorare-la-vostra-developer-experience.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>Cinque tool per migliorare la vostra developer experience</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" Cinque tool per migliorare la vostra developer experience ">
                          <figcaption>Cinque tool per migliorare la vostra developer experience</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-05-30 12:07:50 UTC">Tue, 30 May 2017 12:07:50 +0000</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Riuscireste a svolgere il vostro lavoro senza la linea di comando? Se siete come me, ossia amanti di bash, ecco alcuni tool che vi permetteranno di migliorare la vostra <em>developer experience</em>.</p>

<h3 id="mac-command-line"><code class="highlighter-rouge">mac</code> command line</h3>

<p>Si <a href="https://github.com/guarinogabriel/Mac-CLI">installa da linea di comando</a> e crea un eseguibile, <code class="highlighter-rouge">mac</code>, che permette di svolgere molte operazioni comuni con pochi click.</p>

<p><img src="/images/demo-mac-cli.gif" alt="" /></p>

<p>Un esempio?</p>

<ul>
  <li><code class="highlighter-rouge">mac ip:public</code> vi restituisce il vostro ip pubblico</li>
  <li><code class="highlighter-rouge">mac speedtest</code> esegue uno speed test da linea di comando</li>
  <li><code class="highlighter-rouge">mac memory</code> vi dice quale app sta consumando la vostra preziosa RAM</li>
</ul>

<p>e tanti altri. Sono circa una cinquantina!</p>

<h3 id="oh-my-zsh-per-un-terminale-pi√π-combattivo"><code class="highlighter-rouge">Oh-my-zsh</code> per un terminale pi√π combattivo</h3>

<p><a href="https://github.com/robbyrussell/oh-my-zsh">Oh-my-zsh</a> √® un tool che va a sovrascrivere un po‚Äô di cose nei vostri file di configurazione di bash. In particolare, modifica il funzionamento del prompt di comando mostrandovi le informazioni di cui pi√π avete bisogno:</p>

<p><img src="/images/oh-my-zsh.jpg" alt="" /></p>

<p>Insomma, avrete sott‚Äôocchio user, cartella in cui vi trovate, repository e branch, senza impazzire. E poi migliora anche l‚Äôutilizzo dell‚Äôautocompletamento (il TAB). Ci sono anche i plugin. Oh my!</p>

<h3 id="ngrok-per-testare-chiamate-api-dallesterno"><code class="highlighter-rouge">ngrok</code>, per testare chiamate API dall‚Äôesterno</h3>

<p>Dovete testare le chiamate di un sistema esterno verso il vostro software? Ad esempio, io ho avuto questa esigenza con le API di Paypal e Gestpay: a un certo punto questi sistemi dovevano notificarmi che i pagamenti erano andati a buon fine e mi avrebbero contattato agli indirizzi configurati.</p>

<p>Come testare e come verificare il contenuto di queste chiamate? Facile, con <a href="https://ngrok.com/">ngrok</a>: un tool che permette di creare un tunnel privato da un indirizzo http esterno.</p>

<p><img src="/images/ngrok.png" alt="" /></p>

<p>Per farla facile, voi lanciate <code class="highlighter-rouge">ngrok http 8000</code> e ngrok creer√† un indirizzo tipo <code class="highlighter-rouge">http://abc33344422.ngrok.io</code>. Visitando questo indirizzo (anche dall‚Äôesterno della vostra rete privata!) ngrok redirige il traffico a<code class="highlighter-rouge">localhost:8000</code>. Tutto ci√≤ che passa per ngrok viene loggato e mostrato!</p>

<h3 id="git-flow-una-metodologia-per-semplificare-e-standardizzare-git-nel-team">Git Flow, una metodologia per semplificare e standardizzare git nel team</h3>

<p>Git flow √® sia <a href="https://github.com/nvie/gitflow">un tool installabile da linea di comando</a>, sia un approccio filosofico alla domanda ‚Äúcome lavorare in gruppo‚Äù.</p>

<p>Git √® un potentissimo sistema di versioning e branching; spero per voi che lo stiate gi√† utilizzando altrimenti brrrr.</p>

<p>Con git flow organizziamo il lavoro in due <em>meta-filoni</em>:</p>

<ul>
  <li>branch <code class="highlighter-rouge">master</code>, che corrisponde alle versioni rilasciate</li>
  <li>branch <code class="highlighter-rouge">develop</code>, ossia dove gli sviluppatori committano le feature sviluppate, in attesa di rilascio.</li>
</ul>

<p>Oltre a questi due branch ‚Äúgenerali‚Äù, ogni azione degli sviluppatori √® realizzata creando nuovi branch:</p>

<ul>
  <li>Gli sviluppi delle singole feature sui branch <code class="highlighter-rouge">feature/*tua_feature*</code></li>
  <li>I rilasci (da develop a master) su branch chiamati <code class="highlighter-rouge">release/*nome_release*</code></li>
  <li>le hotfix (fix, correzioni a bug, di versioni gi√† rilasciate) su branch <code class="highlighter-rouge">hotfix/*nome_fix*</code>.</li>
</ul>

<p>Non ci avete capito niente? <a href="https://danielkummer.github.io/git-flow-cheatsheet/">Qui un grafico che prova a spiegare comandi e funzioni</a>.</p>

<h3 id="bonus-postman-per-testare-le-interfacce-rest">Bonus: Postman per testare le interfacce Rest</h3>

<p>Ho iniziato a lavorare che c‚Äôera SOAP e si stava appena iniziando a parlare di REST. Qualche anno dopo, SOAP √® diventato <em>legacy</em> e tutti si dichiarano REST, chi bene e chi male.</p>

<p>Ad ogni modo, √® sorta l‚Äôesigenza di testare le interfacce REST e come testarle se non con <a href="https://www.getpostman.com/">Postman</a>?</p>

<p><img src="https://www.getpostman.com/img/v2/logo-big.svg" alt="Postman" /></p>

<p>Questa √®¬† una vera e propria applicazione <em>standalone</em> che permette di effettuare ogni tipo di chiamata desideriate, GET - PUT - POST - HEAD etc. C‚Äô√® la possibilit√† di salvare le chiamate, passare header aggiuntivi, visualizzare i dati in molti modi (ad esempio JSON), etc etc.</p>

<p>Come dite? non √® un tool da linea di comando? Avete ragione, ma questo √® il mio blog e qui comando io üòÇ</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>I colloqui di lavoro nelle Big</title>
        <link>https://michelenasti.com/2017/05/22/i-colloqui-di-lavoro-nelle-big.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/05/22/i-colloqui-di-lavoro-nelle-big.html</guid>
        <pubDate>Mon, 22 May 2017 15:08:19 +0000</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Recentemente sono stato speaker all‚Äôevento &lt;a href=&quot;https://www.meetup.com/it-IT/GDGCampania/events/239723850/&quot;&gt;pre-Google I/O&lt;/a&gt; organizzato dal &lt;a href=&quot;http://gdgcampania.com&quot;&gt;Google Developers Group Campania&lt;/a&gt;, a Napoli.&lt;/p&gt;

&lt;p&gt;Il mio talk verteva sui colloqui di lavoro delle aziende top, e qui ci sta bene un bel disclaimer: &lt;em&gt;non ho mai fatto colloqui per aziende top ¬†- tranne un piccolo frangente con Amazon&lt;/em&gt;. Ma ho letto molto sull‚Äôargomento, e ho chiesto in giro ad alcuni amici che hanno fatto le selezioni per queste aziende, quindi avevo un po‚Äô di materiale che era bello condividere.&lt;/p&gt;

&lt;iframe src=&quot;https://docs.google.com/presentation/d/1eQce7aEOl8qaGPbmhQVmUQb99Sf2bioBJhmuEER4_B8/embed?start=false&amp;amp;loop=false&amp;amp;delayms=60000&quot; frameborder=&quot;0&quot; width=&quot;480&quot; height=&quot;389&quot; allowfullscreen=&quot;true&quot; mozallowfullscreen=&quot;true&quot; webkitallowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Una parte del talk riguardava alcuni ‚Äúrompicapi‚Äù che in passato, pi√π che oggi, venivano sottoposti agli aspiranti candidati. Fermo restando che agli intervistatori non interessa sapere la risposta (ammesso che esista!), semmai vogliono vedere in che modo approcciate i problemi, che ragionamenti fate, insomma quanta creativit√† avete.&lt;/p&gt;

&lt;p&gt;Torno a ribadire: queste domande sono ‚Äúrare‚Äù e tutte le persone in carne ed ossa con cui ho parlato non le hanno ricevute; tuttavia, dato che esiste un libro sull‚Äôargomento (&lt;a href=&quot;http://amzn.to/2rKTgbo&quot;&gt;‚Äúsei abbastanza sveglio per lavorare in google?‚Äù, di William Poundstone&lt;/a&gt;), e considerato che sono un appassionato di indovinelli, non ho potuto ignorare.&lt;/p&gt;

&lt;p&gt;A fine talk molti sono venuti per chiedermi le ‚Äúsoluzioni‚Äù (che ripeto: non sempre esistono) o gli approcci; altri sono venuti a pormi degli indovinelli, ai quali per mia fortuna sono riuscito a trovare la risposta in tempo (ed evitare la figura di merda üòÖ ).&lt;/p&gt;

&lt;p&gt;Eccovene alcuni!&lt;/p&gt;

&lt;h3 id=&quot;dado-senza-dado&quot;&gt;Dado senza dado&lt;/h3&gt;

&lt;p&gt;Sai simulare un dado con una monetina? Puoi lanciare la moneta pi√π volte.&lt;/p&gt;

&lt;h3 id=&quot;i-filosofi-bugiardi&quot;&gt;I Filosofi bugiardi&lt;/h3&gt;

&lt;p&gt;Attorno a un tavolo sono seduti tanti filosofi. Alcuni dicono sempre la verit√†; altri solo bugie.&lt;/p&gt;

&lt;p&gt;A turno, ogni filosofo prende la parola e dice: ‚ÄúIl filosofo alla mia sinistra √® un bugiardo!‚Äù&lt;/p&gt;

&lt;p&gt;Quando tutti i filosofi hanno espresso questo importantissimo concetto, prende la parola un altro filosofo ed esclama: ‚Äúsiamo 21 seduti a questo tavolo!‚Äù&lt;/p&gt;

&lt;p&gt;Il suo vicino ribatte: ‚ÄúNon √® vero! Siamo 22!‚Äù&lt;/p&gt;

&lt;p&gt;Che diamine stanno dicendo?! Quanti sono? Chi ha ragione? Come sono seduti?&lt;/p&gt;

&lt;h2 id=&quot;le-risposte-di-mia-moglie&quot;&gt;Le risposte di mia moglie&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Dado senza dado:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;Con la moneta entro in un negozio e compro il dado.&amp;nbsp;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Problema dei filosofi bugiardi:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;Cambio tavolo: vado a sedermi da un'altra parte.&amp;nbsp;&lt;/blockquote&gt;

&lt;p&gt;Posso dirvi che in aziende come Google queste risposte non sarebbero state solo degli &lt;em&gt;ice-breaker&lt;/em&gt;, ma verrebbero probabilmente considerate nel giudizio globale del&lt;span style=&quot;font-size: 1rem;&quot;&gt;¬†candidato.¬†&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-size: 1rem;&quot;&gt;Tuttavia non basta per superare il colloquio üòÖ ¬†Scrivi la tua risposta nei commenti ;)¬†&lt;/span&gt;&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/05/22/i-colloqui-di-lavoro-nelle-big.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>I colloqui di lavoro nelle Big</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" I colloqui di lavoro nelle Big ">
                          <figcaption>I colloqui di lavoro nelle Big</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-05-22 15:08:19 UTC">Mon, 22 May 2017 15:08:19 +0000</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Recentemente sono stato speaker all‚Äôevento <a href="https://www.meetup.com/it-IT/GDGCampania/events/239723850/">pre-Google I/O</a> organizzato dal <a href="http://gdgcampania.com">Google Developers Group Campania</a>, a Napoli.</p>

<p>Il mio talk verteva sui colloqui di lavoro delle aziende top, e qui ci sta bene un bel disclaimer: <em>non ho mai fatto colloqui per aziende top ¬†- tranne un piccolo frangente con Amazon</em>. Ma ho letto molto sull‚Äôargomento, e ho chiesto in giro ad alcuni amici che hanno fatto le selezioni per queste aziende, quindi avevo un po‚Äô di materiale che era bello condividere.</p>

<iframe src="https://docs.google.com/presentation/d/1eQce7aEOl8qaGPbmhQVmUQb99Sf2bioBJhmuEER4_B8/embed?start=false&amp;loop=false&amp;delayms=60000" frameborder="0" width="480" height="389" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>

<p>Una parte del talk riguardava alcuni ‚Äúrompicapi‚Äù che in passato, pi√π che oggi, venivano sottoposti agli aspiranti candidati. Fermo restando che agli intervistatori non interessa sapere la risposta (ammesso che esista!), semmai vogliono vedere in che modo approcciate i problemi, che ragionamenti fate, insomma quanta creativit√† avete.</p>

<p>Torno a ribadire: queste domande sono ‚Äúrare‚Äù e tutte le persone in carne ed ossa con cui ho parlato non le hanno ricevute; tuttavia, dato che esiste un libro sull‚Äôargomento (<a href="http://amzn.to/2rKTgbo">‚Äúsei abbastanza sveglio per lavorare in google?‚Äù, di William Poundstone</a>), e considerato che sono un appassionato di indovinelli, non ho potuto ignorare.</p>

<p>A fine talk molti sono venuti per chiedermi le ‚Äúsoluzioni‚Äù (che ripeto: non sempre esistono) o gli approcci; altri sono venuti a pormi degli indovinelli, ai quali per mia fortuna sono riuscito a trovare la risposta in tempo (ed evitare la figura di merda üòÖ ).</p>

<p>Eccovene alcuni!</p>

<h3 id="dado-senza-dado">Dado senza dado</h3>

<p>Sai simulare un dado con una monetina? Puoi lanciare la moneta pi√π volte.</p>

<h3 id="i-filosofi-bugiardi">I Filosofi bugiardi</h3>

<p>Attorno a un tavolo sono seduti tanti filosofi. Alcuni dicono sempre la verit√†; altri solo bugie.</p>

<p>A turno, ogni filosofo prende la parola e dice: ‚ÄúIl filosofo alla mia sinistra √® un bugiardo!‚Äù</p>

<p>Quando tutti i filosofi hanno espresso questo importantissimo concetto, prende la parola un altro filosofo ed esclama: ‚Äúsiamo 21 seduti a questo tavolo!‚Äù</p>

<p>Il suo vicino ribatte: ‚ÄúNon √® vero! Siamo 22!‚Äù</p>

<p>Che diamine stanno dicendo?! Quanti sono? Chi ha ragione? Come sono seduti?</p>

<h2 id="le-risposte-di-mia-moglie">Le risposte di mia moglie</h2>

<p><strong>Dado senza dado:</strong></p>

<blockquote>Con la moneta entro in un negozio e compro il dado.&nbsp;</blockquote>

<p><strong>Problema dei filosofi bugiardi:</strong></p>

<blockquote>Cambio tavolo: vado a sedermi da un'altra parte.&nbsp;</blockquote>

<p>Posso dirvi che in aziende come Google queste risposte non sarebbero state solo degli <em>ice-breaker</em>, ma verrebbero probabilmente considerate nel giudizio globale del<span style="font-size: 1rem;">¬†candidato.¬†</span></p>

<p><span style="font-size: 1rem;">Tuttavia non basta per superare il colloquio üòÖ ¬†Scrivi la tua risposta nei commenti ;)¬†</span></p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>Agile? No grazie, noi siamo Lean</title>
        <link>https://michelenasti.com/2017/05/04/agile-no-grazie-preferisco-lean.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/05/04/agile-no-grazie-preferisco-lean.html</guid>
        <pubDate>Thu, 04 May 2017 00:00:00 +0000</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Agile, agile, agile‚Ä¶ ormai tutti fanno Agile, implementando un framework tipo Scrum (che √® uno dei possibili modi di essere Agile).&lt;/p&gt;

&lt;p&gt;Per dare una definizione: siete &lt;em&gt;Agile&lt;/em&gt;¬Æ¬†se la vostra metodologia di sviluppo segue il &lt;a href=&quot;http://agilemanifesto.org/iso/it/manifesto.html&quot;&gt;&lt;em&gt;Manifesto Agile&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tuttavia, √® facile prendere un framework (ripeto: Scrum) e sputtanarlo per tirare fuori qualcosa che non va. Spesso ci√≤ accade quando il management continua a ragionare a delivery fisse, chi-fa-cosa, butta-a-mare-la-qualit√†-dobbiamo-consegn√†, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/geografia_metodologie.png&quot; alt=&quot;Quest'immagine prova a spiegare com'√® fatto il mondo&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ma-in-questo-post-dovevi-parlare-di-lean&quot;&gt;Ma in questo post dovevi parlare di LEAN&lt;/h2&gt;

&lt;p&gt;Avete ragione.&lt;/p&gt;

&lt;p&gt;Ritorniamo sulle definizioni. &lt;em&gt;Lean&lt;/em&gt; (in italiano: magro, scarno) √® un termine preso in prestito dal settore manifatturiero, e consiste in una serie di principi da seguire per ottenere &lt;em&gt;qualit√†, velocit√† &amp;amp; soddisfazione del cliente&lt;/em&gt;. (Stesse finalit√† di Agile!)&lt;/p&gt;

&lt;p&gt;Il punto √® che i principi base del &lt;em&gt;Lean thinking&lt;/em&gt; non sono filosofici, ma pratici. Vediamoli:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Eliminate Waste&lt;/strong&gt;: fate riunioni che non servono? Non fatele. Scrivete documenti che nessuno legger√†? Non scriveteli. Pi√π chiaro di cos√¨!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Build Quality In&lt;/strong&gt;: Mettere in pratica tutte quelle pratiche che portano a evitare i bug, o a correggerli subito. Correggerli dopo √® sempre peggio.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Create Knowledge&lt;/strong&gt;: All‚Äôinizio di un progetto difficilmente avrete idea di cosa vuole il cliente. Inoltre, ci√≤ che sapete voi √® molto diverso da ci√≤ che conosce il vostro collega. Creare conoscenza significa soprattutto &lt;em&gt;condividerla&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Defer Commitment&lt;/strong&gt;: Prendere le decisioni all‚Äôultmo momento utile (ossia quando non sono pi√π rinviabili) permette di avere la maggior conoscenza possibile, e quindi di prendere decisioni migliori.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Deliver Fast&lt;/strong&gt;: Prima fate vedere il prodotto al cliente, prima saprete se √® quello che vuole.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Respect People&lt;/strong&gt;: non significa solo evitare di mandare a cagare il tuo collega; significa anche rispettare le scelte del gruppo, riconoscerne gli sforzi e aiutarli quando gli sforzi non producono frutti.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Optimize the Whole&lt;/strong&gt;. Ottimizzare il processo, nella sua interezza, significa applicare i punti precedenti. Si deve ottimizzare continuamente, a ogni livello.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fin qui era filosofia. Ma praticamente che dobbiamo fare?&lt;/p&gt;

&lt;h2 id=&quot;lean-in-pratica-gli-step-zero&quot;&gt;Lean in pratica: gli step zero&lt;/h2&gt;

&lt;p&gt;Per essere Lean nel mondo del software ci sono due &lt;strong&gt;step zero&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Source code management&lt;/strong&gt; - perch√® il codice non si condivide pi√π via email o via floppy da un bel p√≤. Tools come SVN (antichi!) o GIT dovreste conoscerli tutti ormai.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Scripted builds&lt;/strong&gt; - il vostro prodotto deve essere generabile a partire da &lt;strong&gt;un solo comando&lt;/strong&gt;. Ancora meglio: ogni volta che committate, un ambiente di &lt;em&gt;continuous integration&lt;/em&gt; dovrebbe far partire una build automatica e verificare che sia tutto ok. Non dimenticate di mandare una mail a chi ha rotto la build ;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Principi Lean rispettati&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;create knowledge&lt;/strong&gt; - il codice √® in un solo posto&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;eliminate waste&lt;/strong&gt; - nessun lavoro manuale per compilare e deployare il progetto!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;build quality in&lt;/strong&gt; - l‚Äôautomazione elimina possibili cause d‚Äôerrore.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vediamo ora altre pratiche che possono aiutarvi a diventare &lt;em&gt;Lean&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;il-meeting-giornaliero&quot;&gt;Il meeting giornaliero&lt;/h3&gt;

&lt;p&gt;Se dovessi scegliere un unico punto da implementare, tra tutti i punti di questo articolo, il meeting giornaliero √® sicuramente quello che sceglierei io. &lt;em&gt;La comunicazione tra membri del team √® dannatamente importante.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Per fare un daily meeting perfetto bisogna:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;farlo tutti i giorni, alla stessa ora&lt;/li&gt;
  &lt;li&gt;non deve superare 15 minuti&lt;/li&gt;
  &lt;li&gt;partecipano e parlano tutti&lt;/li&gt;
  &lt;li&gt;quando parla qualcuno non si fanno domande e non si interrompe&lt;/li&gt;
  &lt;li&gt;si risponde a tre domande: &lt;em&gt;cosa ho fatto ieri?&lt;/em&gt;, &lt;em&gt;cosa far√≤ oggi?&lt;/em&gt;, &lt;em&gt;che problemi ho avuto?&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;facoltativo&lt;/em&gt;: fare il meeting in piedi (cos√¨ durer√† anche meno di 15 minuti)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Principi Lean rispettati&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;respect people&lt;/em&gt; - stiamo mettendo il team al centro dello sviluppo. Tutti si sentiranno di far parte di una squadra.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;create knowledge&lt;/em&gt; - Parlare di ci√≤ che si sta facendo √® il modo migliore di creare una conoscenza condivisa.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;testing-automatico&quot;&gt;Testing automatico&lt;/h3&gt;
&lt;p&gt;Qui parliamo dell‚Äô&lt;strong&gt;esecuzione automatica dei test a partire da un singolo comando&lt;/strong&gt;, con tanto di report a fine esecuzione. In questo modo avremo test che sono sempre eseguiti nello stesso modo e che non sono soggetti a errori umani.&lt;/p&gt;

&lt;p&gt;I test dovrebbero essere lanciati sia dai singoli sviluppatori mentre realizzano le feature, che dall‚Äôambiene di continuous integration quando committiamo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principi Lean rispettati&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Build Quality In&lt;/em&gt; - test automatici eseguiti regolarmente aiutano a prevenire i difetti.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Eliminate Waste&lt;/em&gt; - i bug vengono trovati prima, e quindi corretti prima.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Create Knowledge&lt;/em&gt; - i test sono un modo per documentare come funziona il codice.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;continuous-integration&quot;&gt;Continuous Integration&lt;/h3&gt;
&lt;p&gt;La &lt;strong&gt;continuous integration&lt;/strong&gt; √® una pratica che consiste nell‚Äôintegrare i piccoli cambiamenti al codice in maniera frequente. Ci√≤ cerca di ridurre, o addirittura eliminare, la fase di integrazione post-sviluppo.&lt;/p&gt;

&lt;p&gt;Per farlo:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Usate una macchina (vera o virtuale) per il sistema di CI.&lt;/li&gt;
  &lt;li&gt;a ogni commit, la CI deve far partire una build e i test.&lt;/li&gt;
  &lt;li&gt;I developer devono aggiornare il codice una volta al giorno; una volta all‚Äôora √® meglio.&lt;/li&gt;
  &lt;li&gt;Le build fallite devono essere subito sistemate.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Principi Lean rispettati&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Build Quality In&lt;/em&gt; - in Continuous Integration, siamo sicuri che il codice sia sempre funzionante.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Eliminate Waste&lt;/em&gt; - E‚Äô pi√π efficiente integrare continuamente piccole modifiche che una singola grande fase di integrazione finale.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;less-code&quot;&gt;Less Code&lt;/h3&gt;
&lt;p&gt;‚ÄúLess Code‚Äù significa &lt;strong&gt;scrivere solo il codice necessario per implementare la funzionalit√† richiesta&lt;/strong&gt;. Qui stiamo ribadendo il principio della semplicit√†: se una cosa √® piccola √® anche facile capirla; un codice sorgente vasto diventa difficile non solo da capire, ma anche testare e debuggare. Scrivere (&lt;em&gt;poco&lt;/em&gt;) codice in modo semplice √® un‚Äôarte. Per poter scrivere meno codice bisogna:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;eliminare codice inutile&lt;/strong&gt;. Facile a dirsi üòä In pratica bisogna trovare il codice, o le &lt;em&gt;forze&lt;/em&gt; che creano il codice non necessario, ed eliminarlo. Ogni codice aggiunto al repository deve essere &lt;em&gt;giustificabile&lt;/em&gt;. Sviluppa solo per l‚Äôiterazione o il task corrente, non per quelle del futuro che verr√†. (Verr√†?)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Migliorare l‚Äôefficienza del codice&lt;/strong&gt;. Ci√≤ si fa applicando degli standard o comunque le best practices.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Principi Lean rispettati&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Build Quality In&lt;/em&gt; - Codice che fa quello che deve fare. Cosa vuoi di pi√π?&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Eliminate Waste&lt;/em&gt; - Codice che non serve, o mega-design-patterns che non si capiscono (o che si capiscono solo nella mente dell‚Äôautore), sono scoraggiati.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;short-iterations&quot;&gt;Short Iterations&lt;/h3&gt;

&lt;p&gt;Prima si sviluppavano applicazioni con un ciclo di rilascio da 6 mesi a 1 anno; adesso la moda √® 15/30 giorni. Questo tipo di rilasci permette ai clienti di capire se stiamo realizzando davvero il software di cui hanno bisogno, e permette di capirlo &lt;em&gt;prima che sia troppo tardi&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principi Lean rispettati&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Eliminate Waste&lt;/em&gt; - rilasci frequenti permettono di concentrarsi solo su ci√≤ che serve davvero.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Deliver Fast&lt;/em&gt; - Il nuovo codice viene rilasciato al cliente ad intervalli regolari.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;customer-partecipation&quot;&gt;Customer Partecipation&lt;/h3&gt;

&lt;p&gt;In passato il cliente veniva coinvolto solo per le specifiche, a inizio progetto, e poi ci si vedeva alla fine per mostrare il risultato. E l√¨ sentivi frasi ‚Äúma non era quello che volevo‚Äù üò´&lt;/p&gt;

&lt;p&gt;Usando un approccio &lt;em&gt;Lean&lt;/em&gt; invece il cliente fa parte del team. E‚Äô il cliente a fornire i requisiti, a prioritizzarli, e ad accettarli a fine iterazione.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principi Lean rispettati&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Create Knowledge&lt;/em&gt; - Attraverso la collaborazione col cliente, i requisiti vengono determinati prima e meglio.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Defer Commitment&lt;/em&gt; - Siccome il cliente √® coinvolto nel processo, √® possibile prendere le decisioni architetturali solo quando servono.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lean-√®-uguale-o-diverso-da-agile&quot;&gt;Lean √® uguale o diverso da Agile?&lt;/h2&gt;

&lt;p&gt;Chi ha fatto un po‚Äô di Agile star√† ora dicendo: ‚ÄúMa tutte queste cose le facciamo anche noi!‚Äù. Gi√†! Dov‚Äô√® la differenza?&lt;/p&gt;

&lt;p&gt;Le differenze sono sostanzialmente due: &lt;em&gt;scope&lt;/em&gt; e &lt;em&gt;focus&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;Agile&lt;/strong&gt; lo scopo √® di migliorare lo sviluppo del software e si focalizza sull‚Äôadattabilit√† e sul rilascio veloce. Oppure, come piace dire a me, si parte dalla filosofia e si trovano i mezzi per metterla in pratica.&lt;/p&gt;

&lt;p&gt;Nell‚Äôapproccio &lt;strong&gt;Lean&lt;/strong&gt; invece si guarda al quadro generale, e ci si focalizza pi√π sulle pratiche (che sono il punto di partenza!) che sulla filosofia. Infatti &lt;strong&gt;non √® obbligatorio mettere in pratica contemporaneamente tutte le pratiche&lt;/strong&gt;, si pu√≤ tranquillamente iniziare a integrarle una alla volta; e soprattutto, si pu√≤ seguire qualsiasi tipo di metodologia ma usare le pratiche &lt;em&gt;Lean&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Per questo, &lt;strong&gt;negli ultimi team con cui ho collaborato&lt;/strong&gt;, piuttosto che mettere insieme tutte le cerimonie di Scrum &lt;strong&gt;ho preferito privilegiare quelle pratiche che sicuramente avrebbero portato un valore effettivo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Non avrei conosciuto le pratiche Lean senza Agile. &lt;strong&gt;Non potrei fare Agile senza mettere in pratica i principi Lean. Al contrario, si pu√≤ essere Lean senza essere Agile&lt;/strong&gt;. Questi due mondi si sovrappongono per molte cose e sono, alla fine della fiera, &lt;strong&gt;complementari tra loro&lt;/strong&gt;.&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/05/04/agile-no-grazie-preferisco-lean.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>Agile? No grazie, noi siamo Lean</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" Agile? No grazie, noi siamo Lean ">
                          <figcaption>Agile? No grazie, noi siamo Lean</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-05-04 00:00:00 UTC">Thu, 04 May 2017 00:00:00 +0000</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Agile, agile, agile‚Ä¶ ormai tutti fanno Agile, implementando un framework tipo Scrum (che √® uno dei possibili modi di essere Agile).</p>

<p>Per dare una definizione: siete <em>Agile</em>¬Æ¬†se la vostra metodologia di sviluppo segue il <a href="http://agilemanifesto.org/iso/it/manifesto.html"><em>Manifesto Agile</em></a>.</p>

<p>Tuttavia, √® facile prendere un framework (ripeto: Scrum) e sputtanarlo per tirare fuori qualcosa che non va. Spesso ci√≤ accade quando il management continua a ragionare a delivery fisse, chi-fa-cosa, butta-a-mare-la-qualit√†-dobbiamo-consegn√†, etc.</p>

<p><img src="/images/geografia_metodologie.png" alt="Quest'immagine prova a spiegare com'√® fatto il mondo" /></p>

<h2 id="ma-in-questo-post-dovevi-parlare-di-lean">Ma in questo post dovevi parlare di LEAN</h2>

<p>Avete ragione.</p>

<p>Ritorniamo sulle definizioni. <em>Lean</em> (in italiano: magro, scarno) √® un termine preso in prestito dal settore manifatturiero, e consiste in una serie di principi da seguire per ottenere <em>qualit√†, velocit√† &amp; soddisfazione del cliente</em>. (Stesse finalit√† di Agile!)</p>

<p>Il punto √® che i principi base del <em>Lean thinking</em> non sono filosofici, ma pratici. Vediamoli:</p>

<ul>
  <li><strong>Eliminate Waste</strong>: fate riunioni che non servono? Non fatele. Scrivete documenti che nessuno legger√†? Non scriveteli. Pi√π chiaro di cos√¨!</li>
  <li><strong>Build Quality In</strong>: Mettere in pratica tutte quelle pratiche che portano a evitare i bug, o a correggerli subito. Correggerli dopo √® sempre peggio.</li>
  <li><strong>Create Knowledge</strong>: All‚Äôinizio di un progetto difficilmente avrete idea di cosa vuole il cliente. Inoltre, ci√≤ che sapete voi √® molto diverso da ci√≤ che conosce il vostro collega. Creare conoscenza significa soprattutto <em>condividerla</em>.</li>
  <li><strong>Defer Commitment</strong>: Prendere le decisioni all‚Äôultmo momento utile (ossia quando non sono pi√π rinviabili) permette di avere la maggior conoscenza possibile, e quindi di prendere decisioni migliori.</li>
  <li><strong>Deliver Fast</strong>: Prima fate vedere il prodotto al cliente, prima saprete se √® quello che vuole.</li>
  <li><strong>Respect People</strong>: non significa solo evitare di mandare a cagare il tuo collega; significa anche rispettare le scelte del gruppo, riconoscerne gli sforzi e aiutarli quando gli sforzi non producono frutti.</li>
  <li><strong>Optimize the Whole</strong>. Ottimizzare il processo, nella sua interezza, significa applicare i punti precedenti. Si deve ottimizzare continuamente, a ogni livello.</li>
</ul>

<p>Fin qui era filosofia. Ma praticamente che dobbiamo fare?</p>

<h2 id="lean-in-pratica-gli-step-zero">Lean in pratica: gli step zero</h2>

<p>Per essere Lean nel mondo del software ci sono due <strong>step zero</strong>:</p>
<ul>
  <li><strong>Source code management</strong> - perch√® il codice non si condivide pi√π via email o via floppy da un bel p√≤. Tools come SVN (antichi!) o GIT dovreste conoscerli tutti ormai.</li>
  <li><strong>Scripted builds</strong> - il vostro prodotto deve essere generabile a partire da <strong>un solo comando</strong>. Ancora meglio: ogni volta che committate, un ambiente di <em>continuous integration</em> dovrebbe far partire una build automatica e verificare che sia tutto ok. Non dimenticate di mandare una mail a chi ha rotto la build ;)</li>
</ul>

<p><strong>Principi Lean rispettati</strong>:</p>
<ul>
  <li><strong>create knowledge</strong> - il codice √® in un solo posto</li>
  <li><strong>eliminate waste</strong> - nessun lavoro manuale per compilare e deployare il progetto!</li>
  <li><strong>build quality in</strong> - l‚Äôautomazione elimina possibili cause d‚Äôerrore.</li>
</ul>

<p>Vediamo ora altre pratiche che possono aiutarvi a diventare <em>Lean</em>.</p>

<h3 id="il-meeting-giornaliero">Il meeting giornaliero</h3>

<p>Se dovessi scegliere un unico punto da implementare, tra tutti i punti di questo articolo, il meeting giornaliero √® sicuramente quello che sceglierei io. <em>La comunicazione tra membri del team √® dannatamente importante.</em></p>

<p>Per fare un daily meeting perfetto bisogna:</p>
<ul>
  <li>farlo tutti i giorni, alla stessa ora</li>
  <li>non deve superare 15 minuti</li>
  <li>partecipano e parlano tutti</li>
  <li>quando parla qualcuno non si fanno domande e non si interrompe</li>
  <li>si risponde a tre domande: <em>cosa ho fatto ieri?</em>, <em>cosa far√≤ oggi?</em>, <em>che problemi ho avuto?</em></li>
  <li><em>facoltativo</em>: fare il meeting in piedi (cos√¨ durer√† anche meno di 15 minuti)</li>
</ul>

<p><strong>Principi Lean rispettati</strong>:</p>
<ul>
  <li><em>respect people</em> - stiamo mettendo il team al centro dello sviluppo. Tutti si sentiranno di far parte di una squadra.</li>
  <li><em>create knowledge</em> - Parlare di ci√≤ che si sta facendo √® il modo migliore di creare una conoscenza condivisa.</li>
</ul>

<h3 id="testing-automatico">Testing automatico</h3>
<p>Qui parliamo dell‚Äô<strong>esecuzione automatica dei test a partire da un singolo comando</strong>, con tanto di report a fine esecuzione. In questo modo avremo test che sono sempre eseguiti nello stesso modo e che non sono soggetti a errori umani.</p>

<p>I test dovrebbero essere lanciati sia dai singoli sviluppatori mentre realizzano le feature, che dall‚Äôambiene di continuous integration quando committiamo.</p>

<p><strong>Principi Lean rispettati</strong>:</p>
<ul>
  <li><em>Build Quality In</em> - test automatici eseguiti regolarmente aiutano a prevenire i difetti.</li>
  <li><em>Eliminate Waste</em> - i bug vengono trovati prima, e quindi corretti prima.</li>
  <li><em>Create Knowledge</em> - i test sono un modo per documentare come funziona il codice.</li>
</ul>

<h3 id="continuous-integration">Continuous Integration</h3>
<p>La <strong>continuous integration</strong> √® una pratica che consiste nell‚Äôintegrare i piccoli cambiamenti al codice in maniera frequente. Ci√≤ cerca di ridurre, o addirittura eliminare, la fase di integrazione post-sviluppo.</p>

<p>Per farlo:</p>
<ul>
  <li>Usate una macchina (vera o virtuale) per il sistema di CI.</li>
  <li>a ogni commit, la CI deve far partire una build e i test.</li>
  <li>I developer devono aggiornare il codice una volta al giorno; una volta all‚Äôora √® meglio.</li>
  <li>Le build fallite devono essere subito sistemate.</li>
</ul>

<p><strong>Principi Lean rispettati</strong>:</p>
<ul>
  <li><em>Build Quality In</em> - in Continuous Integration, siamo sicuri che il codice sia sempre funzionante.</li>
  <li><em>Eliminate Waste</em> - E‚Äô pi√π efficiente integrare continuamente piccole modifiche che una singola grande fase di integrazione finale.</li>
</ul>

<h3 id="less-code">Less Code</h3>
<p>‚ÄúLess Code‚Äù significa <strong>scrivere solo il codice necessario per implementare la funzionalit√† richiesta</strong>. Qui stiamo ribadendo il principio della semplicit√†: se una cosa √® piccola √® anche facile capirla; un codice sorgente vasto diventa difficile non solo da capire, ma anche testare e debuggare. Scrivere (<em>poco</em>) codice in modo semplice √® un‚Äôarte. Per poter scrivere meno codice bisogna:</p>

<ul>
  <li><strong>eliminare codice inutile</strong>. Facile a dirsi üòä In pratica bisogna trovare il codice, o le <em>forze</em> che creano il codice non necessario, ed eliminarlo. Ogni codice aggiunto al repository deve essere <em>giustificabile</em>. Sviluppa solo per l‚Äôiterazione o il task corrente, non per quelle del futuro che verr√†. (Verr√†?)</li>
  <li><strong>Migliorare l‚Äôefficienza del codice</strong>. Ci√≤ si fa applicando degli standard o comunque le best practices.</li>
</ul>

<p><strong>Principi Lean rispettati</strong>:</p>
<ul>
  <li><em>Build Quality In</em> - Codice che fa quello che deve fare. Cosa vuoi di pi√π?</li>
  <li><em>Eliminate Waste</em> - Codice che non serve, o mega-design-patterns che non si capiscono (o che si capiscono solo nella mente dell‚Äôautore), sono scoraggiati.</li>
</ul>

<h3 id="short-iterations">Short Iterations</h3>

<p>Prima si sviluppavano applicazioni con un ciclo di rilascio da 6 mesi a 1 anno; adesso la moda √® 15/30 giorni. Questo tipo di rilasci permette ai clienti di capire se stiamo realizzando davvero il software di cui hanno bisogno, e permette di capirlo <em>prima che sia troppo tardi</em>.</p>

<p><strong>Principi Lean rispettati</strong>:</p>
<ul>
  <li><em>Eliminate Waste</em> - rilasci frequenti permettono di concentrarsi solo su ci√≤ che serve davvero.</li>
  <li><em>Deliver Fast</em> - Il nuovo codice viene rilasciato al cliente ad intervalli regolari.</li>
</ul>

<h3 id="customer-partecipation">Customer Partecipation</h3>

<p>In passato il cliente veniva coinvolto solo per le specifiche, a inizio progetto, e poi ci si vedeva alla fine per mostrare il risultato. E l√¨ sentivi frasi ‚Äúma non era quello che volevo‚Äù üò´</p>

<p>Usando un approccio <em>Lean</em> invece il cliente fa parte del team. E‚Äô il cliente a fornire i requisiti, a prioritizzarli, e ad accettarli a fine iterazione.</p>

<p><strong>Principi Lean rispettati</strong>:</p>
<ul>
  <li><em>Create Knowledge</em> - Attraverso la collaborazione col cliente, i requisiti vengono determinati prima e meglio.</li>
  <li><em>Defer Commitment</em> - Siccome il cliente √® coinvolto nel processo, √® possibile prendere le decisioni architetturali solo quando servono.</li>
</ul>

<h2 id="lean-√®-uguale-o-diverso-da-agile">Lean √® uguale o diverso da Agile?</h2>

<p>Chi ha fatto un po‚Äô di Agile star√† ora dicendo: ‚ÄúMa tutte queste cose le facciamo anche noi!‚Äù. Gi√†! Dov‚Äô√® la differenza?</p>

<p>Le differenze sono sostanzialmente due: <em>scope</em> e <em>focus</em>.</p>

<p>In <strong>Agile</strong> lo scopo √® di migliorare lo sviluppo del software e si focalizza sull‚Äôadattabilit√† e sul rilascio veloce. Oppure, come piace dire a me, si parte dalla filosofia e si trovano i mezzi per metterla in pratica.</p>

<p>Nell‚Äôapproccio <strong>Lean</strong> invece si guarda al quadro generale, e ci si focalizza pi√π sulle pratiche (che sono il punto di partenza!) che sulla filosofia. Infatti <strong>non √® obbligatorio mettere in pratica contemporaneamente tutte le pratiche</strong>, si pu√≤ tranquillamente iniziare a integrarle una alla volta; e soprattutto, si pu√≤ seguire qualsiasi tipo di metodologia ma usare le pratiche <em>Lean</em>.</p>

<p>Per questo, <strong>negli ultimi team con cui ho collaborato</strong>, piuttosto che mettere insieme tutte le cerimonie di Scrum <strong>ho preferito privilegiare quelle pratiche che sicuramente avrebbero portato un valore effettivo</strong>.</p>

<p>Non avrei conosciuto le pratiche Lean senza Agile. <strong>Non potrei fare Agile senza mettere in pratica i principi Lean. Al contrario, si pu√≤ essere Lean senza essere Agile</strong>. Questi due mondi si sovrappongono per molte cose e sono, alla fine della fiera, <strong>complementari tra loro</strong>.</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>&quot;Vorrei, ma ho paura che vada male&quot;	&amp;#58 come assumersi dei &quot;rischi intelligenti&quot;</title>
        <link>https://michelenasti.com/2017/04/21/vorrei-ma-ho-paura-che-vada-male-come-assumersi-dei-rischi-intelligenti.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/04/21/vorrei-ma-ho-paura-che-vada-male-come-assumersi-dei-rischi-intelligenti.html</guid>
        <pubDate>Fri, 21 Apr 2017 00:00:00 +0000</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Oggi vorrei parlarvi di &lt;strong&gt;come assumersi dei rischi intelligenti&lt;/strong&gt;. Intelligenti in che senso?!&lt;/p&gt;

&lt;p&gt;Questo post ce l‚Äôho in testa da molto tempo, almeno da quando ho letto il libro &lt;a href=&quot;http://amzn.to/2oaDAB6&quot;&gt;Startup Of You&lt;/a&gt; di Reid Hoffman (fondatore di LinkedIn) e Ben Casnocha. Per i duri di comprendorio inglese qui c‚Äô√® la &lt;a href=&quot;http://amzn.to/2oQsY92&quot;&gt;versione in Italiano&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nel libro gli autori spiegano cosa si pu√≤ fare per &lt;strong&gt;conferire alla propria vita e alla propria carriera un atteggiamento ‚Äúda startup‚Äù&lt;/strong&gt;: ci sono una lunga serie di consigli, discussioni, esempi, e insomma √® uno dei libri che ho letto con pi√π piacere.&lt;img src=&quot;/images/rischio-investimenti-definizione-749x400.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;i-rischi-intelligenti&quot;&gt;I rischi intelligenti&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Siamo abituati a pensare ai rischi come qualcosa di negativo&lt;/em&gt;: perdite di denaro sui mercati azionari, o guida di una moto senza casco. Ma il rischio non √® un nemico; √® qualcosa che fa intrinsecamente parte della nostra vita.&lt;/p&gt;

&lt;p&gt;Le situazioni rischiose, comunque, sono quelle in cui la possibilit√† che le cose vadano male √® decisamente pi√π alto del vantaggio che si ottiene se le cose vanno bene.&lt;/p&gt;

&lt;p&gt;Ad esempio, &lt;strong&gt;volare in aereo non √® rischioso&lt;/strong&gt;, perch√© anche se lo scenario peggiore √® &lt;em&gt;molto¬†**doloroso&lt;/em&gt; la possibilit√† che questo accada √® bassissima. Invece, il tempo di viaggio risparmiato √® un dato di fatto.&lt;/p&gt;

&lt;p&gt;Alcuni imprenditori sono dei cowboy del rischio; tuttavia, &lt;strong&gt;ci√≤ che distingue un imprenditore giudizioso da un semplice spavaldo non √® l‚Äôalta tolleranza al rischio, ma l‚Äôabilit√† di saperlo valutare e gestire correttamente&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Il rischio, in un contesto come quello del lavoro, √® correlato alle scelte che facciamo, e alla possibilit√† che qualcosa vada storto. Ad esempio, quando cambiamo lavoro, ci assumiamo il rischio che il nuovo possa essere anche peggiore del vecchio, e invochiamo tutte le divinit√† affinch√© non sia cos√¨!&lt;/p&gt;

&lt;p&gt;Ma non solo tutto ci√≤ che facciamo comporta rischi; &lt;strong&gt;anche&lt;/strong&gt; &lt;strong&gt;ci√≤ che NON facciamo √® altamente rischioso&lt;/strong&gt;. Questo vale specialmente quando il mondo intorno a noi sta cambiando e richiede un nostro adattamento.&lt;/p&gt;

&lt;h2 id=&quot;valutare-i-rischi&quot;&gt;Valutare i rischi&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Valutare i rischi √® difficile, ma non impossibile. Gli imprenditori lo fanno tutti i giorni.&lt;/strong&gt; Tuttavia, essi non usano analisi matematiche o economiche (degne di Wall Street!) per prendere decisioni; sinceramente, non dovremmo farlo neanche noi.&lt;/p&gt;

&lt;p&gt;Ecco alcuni princ√¨pi guida:&lt;/p&gt;

&lt;h3 id=&quot;1-stiamo-esagerando-nella-valutazione&quot;&gt;1. stiamo esagerando nella valutazione?&lt;/h3&gt;

&lt;p&gt;Il primo passo nella valutazione di un rischio √® ricordarsi che &lt;strong&gt;il caso peggiore probabilmente non √® cos√¨ brutto, o cos√¨ probabile, come sembra&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;2-il-caso-peggiore-√®-tollerabile&quot;&gt;2. Il caso peggiore √® tollerabile?&lt;/h3&gt;

&lt;p&gt;Se accade il caso peggiore cosa succede alla nostra vita? La reputazione scender√† a livelli sotto zero, perderemo tutti i soldi, la carriera sar√† definitivamente finita?&lt;/p&gt;

&lt;p&gt;Se nel caso peggiore accade che perdiamo¬†&lt;em&gt;un po‚Äô&lt;/em&gt; di soldi, o veniamo licenziati (posto che riusciamo a trovare un altro lavoro subito), o rischi semplicemente di sentirti inadeguato, &lt;strong&gt;dovresti comunque provarci&lt;/strong&gt;. Almeno finch√© hai un &lt;a href=&quot;https://michelenasti.com/2015/11/serve-un-piano/&quot;&gt;solido Piano Z&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;3-puoi-cambiare-la-decisione-a-met√†-dellopera-puoi-passare-al-piano-b&quot;&gt;3. Puoi cambiare la decisione a met√† dell‚Äôopera? Puoi passare al piano B?&lt;/h3&gt;

&lt;p&gt;Quando vediamo che le cose si stanno mettendo male, possiamo fare delle scelte che ti permettono di tornare indietro e ricominciare?&lt;/p&gt;

&lt;h3 id=&quot;4-non-confondiamo-lincertezza-con-il-rischio&quot;&gt;4. Non confondiamo l‚Äôincertezza con il rischio&lt;/h3&gt;

&lt;p&gt;Nessuno pu√≤ sapere come andr√† prima del tempo. Ma questo non significa che l‚Äôincertezza sia un rischio! &lt;strong&gt;Le opportunit√† migliori sono quelle con i pi√π grandi punti interrogativi&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;5-considera-la-tua-et√†-e-a-che-fase-della-tua-vita-ti-trovi-quali-saranno-i-rischi-tra-un-paio-danni&quot;&gt;5. Considera la tua et√† e a che fase della tua vita ti trovi. Quali saranno i rischi tra un paio d‚Äôanni?&lt;/h3&gt;

&lt;p&gt;Fallire da ragazzi √® considerato formativo; √® per questo che sono i ventenni a fondare le aziende pi√π strampalate.&lt;/p&gt;

&lt;p&gt;Man mano che invecchi, la tua percezione del rischio cambia. Arrivano i bambini, la casa, l‚Äôauto, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Meglio fare qualcosa di rischioso prima che sia troppo tardi&lt;/strong&gt; ;)&lt;/p&gt;

&lt;h2 id=&quot;facciamo-un-rapido-test&quot;&gt;Facciamo un rapido test‚Ä¶&lt;/h2&gt;

&lt;p&gt;Prendetevi 30 secondi per ogni punto sottostante. Provate a immaginare i pro e i contro delle seguenti situazioni. Considerati i cinque punti espressi precedentemente, come cambierebbe la tua vita se:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;trovi un lavoro fantastico e strapagato ma √® negli USA&lt;/li&gt;
  &lt;li&gt;la tua azienda smette di pagare gli stipendi&lt;/li&gt;
  &lt;li&gt;inizi a dirigere un team&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Questo semplice esercizio mentale magari vi far√† riflettere su come percepite il rischio; nel mio caso mi ha aiutato a fare scelte pi√π consapevoli nel mondo del lavoro.&lt;/p&gt;

&lt;p&gt;In bocca al rischio ;)&lt;/p&gt;

</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/04/21/vorrei-ma-ho-paura-che-vada-male-come-assumersi-dei-rischi-intelligenti.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>&quot;Vorrei, ma ho paura che vada male&quot;	&amp;#58 come assumersi dei &quot;rischi intelligenti&quot;</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" "Vorrei, ma ho paura che vada male"	&#58 come assumersi dei "rischi intelligenti" ">
                          <figcaption>"Vorrei, ma ho paura che vada male"	&#58 come assumersi dei "rischi intelligenti"</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-04-21 00:00:00 UTC">Fri, 21 Apr 2017 00:00:00 +0000</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Oggi vorrei parlarvi di <strong>come assumersi dei rischi intelligenti</strong>. Intelligenti in che senso?!</p>

<p>Questo post ce l‚Äôho in testa da molto tempo, almeno da quando ho letto il libro <a href="http://amzn.to/2oaDAB6">Startup Of You</a> di Reid Hoffman (fondatore di LinkedIn) e Ben Casnocha. Per i duri di comprendorio inglese qui c‚Äô√® la <a href="http://amzn.to/2oQsY92">versione in Italiano</a>.</p>

<p>Nel libro gli autori spiegano cosa si pu√≤ fare per <strong>conferire alla propria vita e alla propria carriera un atteggiamento ‚Äúda startup‚Äù</strong>: ci sono una lunga serie di consigli, discussioni, esempi, e insomma √® uno dei libri che ho letto con pi√π piacere.<img src="/images/rischio-investimenti-definizione-749x400.jpg" alt="" /></p>

<h2 id="i-rischi-intelligenti">I rischi intelligenti</h2>

<p><em>Siamo abituati a pensare ai rischi come qualcosa di negativo</em>: perdite di denaro sui mercati azionari, o guida di una moto senza casco. Ma il rischio non √® un nemico; √® qualcosa che fa intrinsecamente parte della nostra vita.</p>

<p>Le situazioni rischiose, comunque, sono quelle in cui la possibilit√† che le cose vadano male √® decisamente pi√π alto del vantaggio che si ottiene se le cose vanno bene.</p>

<p>Ad esempio, <strong>volare in aereo non √® rischioso</strong>, perch√© anche se lo scenario peggiore √® <em>molto¬†**doloroso</em> la possibilit√† che questo accada √® bassissima. Invece, il tempo di viaggio risparmiato √® un dato di fatto.</p>

<p>Alcuni imprenditori sono dei cowboy del rischio; tuttavia, <strong>ci√≤ che distingue un imprenditore giudizioso da un semplice spavaldo non √® l‚Äôalta tolleranza al rischio, ma l‚Äôabilit√† di saperlo valutare e gestire correttamente</strong>.</p>

<p>Il rischio, in un contesto come quello del lavoro, √® correlato alle scelte che facciamo, e alla possibilit√† che qualcosa vada storto. Ad esempio, quando cambiamo lavoro, ci assumiamo il rischio che il nuovo possa essere anche peggiore del vecchio, e invochiamo tutte le divinit√† affinch√© non sia cos√¨!</p>

<p>Ma non solo tutto ci√≤ che facciamo comporta rischi; <strong>anche</strong> <strong>ci√≤ che NON facciamo √® altamente rischioso</strong>. Questo vale specialmente quando il mondo intorno a noi sta cambiando e richiede un nostro adattamento.</p>

<h2 id="valutare-i-rischi">Valutare i rischi</h2>

<p><strong>Valutare i rischi √® difficile, ma non impossibile. Gli imprenditori lo fanno tutti i giorni.</strong> Tuttavia, essi non usano analisi matematiche o economiche (degne di Wall Street!) per prendere decisioni; sinceramente, non dovremmo farlo neanche noi.</p>

<p>Ecco alcuni princ√¨pi guida:</p>

<h3 id="1-stiamo-esagerando-nella-valutazione">1. stiamo esagerando nella valutazione?</h3>

<p>Il primo passo nella valutazione di un rischio √® ricordarsi che <strong>il caso peggiore probabilmente non √® cos√¨ brutto, o cos√¨ probabile, come sembra</strong>.</p>

<h3 id="2-il-caso-peggiore-√®-tollerabile">2. Il caso peggiore √® tollerabile?</h3>

<p>Se accade il caso peggiore cosa succede alla nostra vita? La reputazione scender√† a livelli sotto zero, perderemo tutti i soldi, la carriera sar√† definitivamente finita?</p>

<p>Se nel caso peggiore accade che perdiamo¬†<em>un po‚Äô</em> di soldi, o veniamo licenziati (posto che riusciamo a trovare un altro lavoro subito), o rischi semplicemente di sentirti inadeguato, <strong>dovresti comunque provarci</strong>. Almeno finch√© hai un <a href="https://michelenasti.com/2015/11/serve-un-piano/">solido Piano Z</a>.</p>

<h3 id="3-puoi-cambiare-la-decisione-a-met√†-dellopera-puoi-passare-al-piano-b">3. Puoi cambiare la decisione a met√† dell‚Äôopera? Puoi passare al piano B?</h3>

<p>Quando vediamo che le cose si stanno mettendo male, possiamo fare delle scelte che ti permettono di tornare indietro e ricominciare?</p>

<h3 id="4-non-confondiamo-lincertezza-con-il-rischio">4. Non confondiamo l‚Äôincertezza con il rischio</h3>

<p>Nessuno pu√≤ sapere come andr√† prima del tempo. Ma questo non significa che l‚Äôincertezza sia un rischio! <strong>Le opportunit√† migliori sono quelle con i pi√π grandi punti interrogativi</strong>.</p>

<h3 id="5-considera-la-tua-et√†-e-a-che-fase-della-tua-vita-ti-trovi-quali-saranno-i-rischi-tra-un-paio-danni">5. Considera la tua et√† e a che fase della tua vita ti trovi. Quali saranno i rischi tra un paio d‚Äôanni?</h3>

<p>Fallire da ragazzi √® considerato formativo; √® per questo che sono i ventenni a fondare le aziende pi√π strampalate.</p>

<p>Man mano che invecchi, la tua percezione del rischio cambia. Arrivano i bambini, la casa, l‚Äôauto, etc.</p>

<p><strong>Meglio fare qualcosa di rischioso prima che sia troppo tardi</strong> ;)</p>

<h2 id="facciamo-un-rapido-test">Facciamo un rapido test‚Ä¶</h2>

<p>Prendetevi 30 secondi per ogni punto sottostante. Provate a immaginare i pro e i contro delle seguenti situazioni. Considerati i cinque punti espressi precedentemente, come cambierebbe la tua vita se:</p>

<ul>
  <li>trovi un lavoro fantastico e strapagato ma √® negli USA</li>
  <li>la tua azienda smette di pagare gli stipendi</li>
  <li>inizi a dirigere un team</li>
</ul>

<p>Questo semplice esercizio mentale magari vi far√† riflettere su come percepite il rischio; nel mio caso mi ha aiutato a fare scelte pi√π consapevoli nel mondo del lavoro.</p>

<p>In bocca al rischio ;)</p>


                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>Diventare Senior‚Ñ¢ con Javascript: le funzioni filter, map, reduce</title>
        <link>https://michelenasti.com/2017/04/14/javascript-filter-map-reduce.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/04/14/javascript-filter-map-reduce.html</guid>
        <pubDate>Fri, 14 Apr 2017 10:09:00 +0000</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Si pu√≤ lavorare per anni con javascript senza mai arrivare a conoscere tre funzioni fantastiche (e standard) che permettono di scrivere codice veloce e testabile.&lt;/p&gt;

&lt;p&gt;E‚Äô vero che si diventa senior principalmente con l‚Äôesperienza, ma se dite di aver lavorato per 3+ anni con JS dovete anche mostrare che avete un‚Äô&lt;em&gt;esperienza di un certo livello&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aprite la console del browser e provate gli esempi!&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-partire-da-un-array-come-filtriamo-solo-gli-elementi-pari-senza-usare-il-ciclo-for&quot;&gt;A partire da un array, come filtriamo solo gli elementi pari senza usare il ciclo for?&lt;/h3&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filtered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filtered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt; prende in input una funzione di &lt;em&gt;test&lt;/em&gt; che viene eseguita su ogni elemento dell‚Äôinput: se la funzione restituisce &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;elem&lt;/code&gt; viene aggiunto all‚Äôarray in output.&lt;/p&gt;

&lt;h3 id=&quot;come-raddoppiamo-tutti-gli-element-di-un-array-senza-usare-il-ciclo-for&quot;&gt;Come raddoppiamo tutti gli element di un array senza usare il ciclo for?&lt;/h3&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Anche qui la funzione &lt;code class=&quot;highlighter-rouge&quot;&gt;map()&lt;/code&gt; prende in input una funzione che viene eseguita su ogni elemento dell‚Äôinput. Per ogni elemento, questo viene &lt;em&gt;trasformato&lt;/em&gt; in un altro valore in base al risultato della funzione.&lt;/p&gt;

&lt;h3 id=&quot;come-sommiamo-tutti-gli-elementi-di-un-array-senza-usare-il-ciclo-for&quot;&gt;Come sommiamo tutti gli elementi di un array senza usare il ciclo for?&lt;/h3&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reduced&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce()&lt;/code&gt; √® pi√π complessa da spiegare, ma poi sar√† facilissima da usare: permette di applicare una funzione &lt;em&gt;N-a-1&lt;/em&gt; dove da un array tiriamo fuori un unico risultato. Nel nostro esempio abbiamo applicato la somma (voi come esercizio potreste provare a tirare fuori la media!).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce()&lt;/code&gt; prende in input due elementi: una funzione e un elemento di partenza (Sarebbe lo &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; specificato in fondo). Per capire cosa accade, facciamo un esempio sull‚Äôarray &lt;code class=&quot;highlighter-rouge&quot;&gt;[8, 7]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alla prima iterazione viene chiamata la funzione con &lt;code class=&quot;highlighter-rouge&quot;&gt;prev = 0&lt;/code&gt;¬†e &lt;code class=&quot;highlighter-rouge&quot;&gt;elem = 8&lt;/code&gt;: siccome stiamo iterando sul primo elemento e non c‚Äô√® nessun elemento precedente, viene usato il secondo argomento di &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt; come valore di inizio (ricordate quello &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; l√¨ in fondo?). A questo punto viene eseguita la somma, che √® &lt;code class=&quot;highlighter-rouge&quot;&gt;8&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alla seconda iterazione, la funzione viene chiamata con &lt;code class=&quot;highlighter-rouge&quot;&gt;prev = 8&lt;/code&gt; (risultato dell‚Äôiterazione precedente!) e &lt;code class=&quot;highlighter-rouge&quot;&gt;elem = 7&lt;/code&gt;:  Anche in questo caso verr√† eseguita la somma che √® &lt;code class=&quot;highlighter-rouge&quot;&gt;15&lt;/code&gt;, che sar√† anche l‚Äôoutput di &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;domanda-implicita-del-lettore-perch√®-tutto-staccanimento-contro-il-ciclo-for&quot;&gt;(Domanda implicita del lettore: Perch√® tutto st‚Äôaccanimento contro il ciclo for?)&lt;/h3&gt;
&lt;p&gt;Il ciclo for √® un ottimo costrutto per iterare gli array, tuttavia non fa capire a chi legge cosa sta accadendo, oltre al fatto di non essere manutenibile. e componibile.&lt;/p&gt;

&lt;p&gt;Supponiamo di voler filtrare tutti i numeri pari da un array; successivamente raddoppiarli e poi sommarli (ossia, la composizione delle tre domande precedenti).&lt;/p&gt;

&lt;p&gt;Con le funzioni presentate prima, ecco la soluzione:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;E‚Äô ovvio che si pu√≤ scrivere anche con un bel (paio di) for. Ma quante righe ci vogliono? e rileggendolo dopo sei mesi, si capisce?&lt;/p&gt;

&lt;p&gt;Per concludere, con la svolta funzionale di altri linguaggi (chi ha detto Java?!) questi concetti sono stati applicati anche altrove, proprio per la loro semplicit√† e componibilit√†. Magari hanno altri nomi, ma il funzionamento √® lo stesso. Cercateli e ‚Ä¶usateli!&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/04/14/javascript-filter-map-reduce.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>Diventare Senior‚Ñ¢ con Javascript: le funzioni filter, map, reduce</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" Diventare Senior‚Ñ¢ con Javascript: le funzioni filter, map, reduce ">
                          <figcaption>Diventare Senior‚Ñ¢ con Javascript: le funzioni filter, map, reduce</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-04-14 10:09:00 UTC">Fri, 14 Apr 2017 10:09:00 +0000</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Si pu√≤ lavorare per anni con javascript senza mai arrivare a conoscere tre funzioni fantastiche (e standard) che permettono di scrivere codice veloce e testabile.</p>

<p>E‚Äô vero che si diventa senior principalmente con l‚Äôesperienza, ma se dite di aver lavorato per 3+ anni con JS dovete anche mostrare che avete un‚Äô<em>esperienza di un certo livello</em>.</p>

<p><strong>Aprite la console del browser e provate gli esempi!</strong></p>

<h3 id="a-partire-da-un-array-come-filtriamo-solo-gli-elementi-pari-senza-usare-il-ciclo-for">A partire da un array, come filtriamo solo gli elementi pari senza usare il ciclo for?</h3>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">];</span>

<span class="kd">let</span> <span class="nx">filtered</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">elem</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">elem</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span> <span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">filtered</span><span class="p">);</span>
</code></pre>
</div>

<p><code class="highlighter-rouge">filter()</code> prende in input una funzione di <em>test</em> che viene eseguita su ogni elemento dell‚Äôinput: se la funzione restituisce <code class="highlighter-rouge">true</code>, <code class="highlighter-rouge">elem</code> viene aggiunto all‚Äôarray in output.</p>

<h3 id="come-raddoppiamo-tutti-gli-element-di-un-array-senza-usare-il-ciclo-for">Come raddoppiamo tutti gli element di un array senza usare il ciclo for?</h3>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">mapped</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">elem</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">elem</span> <span class="o">*</span> <span class="mi">2</span> <span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">mapped</span><span class="p">);</span>
</code></pre>
</div>

<p>Anche qui la funzione <code class="highlighter-rouge">map()</code> prende in input una funzione che viene eseguita su ogni elemento dell‚Äôinput. Per ogni elemento, questo viene <em>trasformato</em> in un altro valore in base al risultato della funzione.</p>

<h3 id="come-sommiamo-tutti-gli-elementi-di-un-array-senza-usare-il-ciclo-for">Come sommiamo tutti gli elementi di un array senza usare il ciclo for?</h3>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">reduced</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">prev</span><span class="p">,</span> <span class="nx">elem</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">prev</span> <span class="o">+</span> <span class="nx">elem</span> <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">reduced</span><span class="p">);</span>
</code></pre>
</div>

<p><code class="highlighter-rouge">reduce()</code> √® pi√π complessa da spiegare, ma poi sar√† facilissima da usare: permette di applicare una funzione <em>N-a-1</em> dove da un array tiriamo fuori un unico risultato. Nel nostro esempio abbiamo applicato la somma (voi come esercizio potreste provare a tirare fuori la media!).</p>

<p><code class="highlighter-rouge">reduce()</code> prende in input due elementi: una funzione e un elemento di partenza (Sarebbe lo <code class="highlighter-rouge">0</code> specificato in fondo). Per capire cosa accade, facciamo un esempio sull‚Äôarray <code class="highlighter-rouge">[8, 7]</code>.</p>

<p>Alla prima iterazione viene chiamata la funzione con <code class="highlighter-rouge">prev = 0</code>¬†e <code class="highlighter-rouge">elem = 8</code>: siccome stiamo iterando sul primo elemento e non c‚Äô√® nessun elemento precedente, viene usato il secondo argomento di <code class="highlighter-rouge">reduce</code> come valore di inizio (ricordate quello <code class="highlighter-rouge">0</code> l√¨ in fondo?). A questo punto viene eseguita la somma, che √® <code class="highlighter-rouge">8</code>.</p>

<p>Alla seconda iterazione, la funzione viene chiamata con <code class="highlighter-rouge">prev = 8</code> (risultato dell‚Äôiterazione precedente!) e <code class="highlighter-rouge">elem = 7</code>:  Anche in questo caso verr√† eseguita la somma che √® <code class="highlighter-rouge">15</code>, che sar√† anche l‚Äôoutput di <code class="highlighter-rouge">reduce</code>.</p>

<h3 id="domanda-implicita-del-lettore-perch√®-tutto-staccanimento-contro-il-ciclo-for">(Domanda implicita del lettore: Perch√® tutto st‚Äôaccanimento contro il ciclo for?)</h3>
<p>Il ciclo for √® un ottimo costrutto per iterare gli array, tuttavia non fa capire a chi legge cosa sta accadendo, oltre al fatto di non essere manutenibile. e componibile.</p>

<p>Supponiamo di voler filtrare tutti i numeri pari da un array; successivamente raddoppiarli e poi sommarli (ossia, la composizione delle tre domande precedenti).</p>

<p>Con le funzioni presentate prima, ecco la soluzione:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">arr</span>
	<span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">elem</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">elem</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">elem</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">elem</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">prev</span><span class="p">,</span> <span class="nx">elem</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">prev</span> <span class="o">+</span> <span class="nx">elem</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</code></pre>
</div>

<p>E‚Äô ovvio che si pu√≤ scrivere anche con un bel (paio di) for. Ma quante righe ci vogliono? e rileggendolo dopo sei mesi, si capisce?</p>

<p>Per concludere, con la svolta funzionale di altri linguaggi (chi ha detto Java?!) questi concetti sono stati applicati anche altrove, proprio per la loro semplicit√† e componibilit√†. Magari hanno altri nomi, ma il funzionamento √® lo stesso. Cercateli e ‚Ä¶usateli!</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>All my articles about Testing in Javascript in one post</title>
        <link>https://michelenasti.com/2017/04/08/all-my-articles-about-testing-in-javascript-in-one-post.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/04/08/all-my-articles-about-testing-in-javascript-in-one-post.html</guid>
        <pubDate>Sat, 08 Apr 2017 13:23:03 +0000</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Hey there,&lt;/p&gt;

&lt;p&gt;in the last month I have done a great work to understand how testing in javascript could be done in a effective, elegant way.&lt;/p&gt;

&lt;p&gt;Here are all my articles about it:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://michelenasti.com/2017/03/23/node-js-testing-easy-with-mocha.html&quot;&gt;Easy testing of NodeJS applications with Mocha&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://michelenasti.com/2017/03/27/become-a-test-expert-in-nodejs-with-these-tricks.html&quot;&gt;Become a test expert in NodeJS with these tricks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://michelenasti.com/2017/04/07/fantastic-unit-tests-in-javascript-with-mocks.html&quot;&gt;Fantastic Unit Tests in Javascript with Mocks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/04/08/all-my-articles-about-testing-in-javascript-in-one-post.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>All my articles about Testing in Javascript in one post</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" All my articles about Testing in Javascript in one post ">
                          <figcaption>All my articles about Testing in Javascript in one post</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-04-08 13:23:03 UTC">Sat, 08 Apr 2017 13:23:03 +0000</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Hey there,</p>

<p>in the last month I have done a great work to understand how testing in javascript could be done in a effective, elegant way.</p>

<p>Here are all my articles about it:</p>
<ul>
  <li><a href="https://michelenasti.com/2017/03/23/node-js-testing-easy-with-mocha.html">Easy testing of NodeJS applications with Mocha</a></li>
  <li><a href="https://michelenasti.com/2017/03/27/become-a-test-expert-in-nodejs-with-these-tricks.html">Become a test expert in NodeJS with these tricks</a></li>
  <li><a href="https://michelenasti.com/2017/04/07/fantastic-unit-tests-in-javascript-with-mocks.html">Fantastic Unit Tests in Javascript with Mocks</a></li>
</ul>

<p>Enjoy!</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>Fantastic Unit Tests in Javascript with Mocks</title>
        <link>https://michelenasti.com/2017/04/07/fantastic-unit-tests-in-javascript-with-mocks.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/04/07/fantastic-unit-tests-in-javascript-with-mocks.html</guid>
        <pubDate>Fri, 07 Apr 2017 09:49:00 +0000</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Let‚Äôs start with the example. We have two files, one that is the main one called &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; that exports just one method, called &lt;code class=&quot;highlighter-rouge&quot;&gt;handleSignup()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// file app.js
const db = require('./db.js');

module.exports.handleSignup = (email, password) =&amp;gt; {
  // ...
  // save the user to the database
  db.saveUser({ email, password });
  // ...
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;, at some point, calls the &lt;code class=&quot;highlighter-rouge&quot;&gt;db.saveUser()&lt;/code&gt; function. Let‚Äôs see the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; module:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// file db.js
module.exports.saveUser = user =&amp;gt; {
  console.log('Saving the user...', user);
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Nothing very special, it‚Äôs just a demo. Let‚Äôs go with the important question.&lt;/p&gt;

&lt;h2 id=&quot;how-do-we-unit-test-appjs&quot;&gt;How do we unit-test app.js?&lt;/h2&gt;

&lt;p&gt;For those not used to &lt;strong&gt;unit testing&lt;/strong&gt;, it &lt;strong&gt;is a way of testing classes atomically&lt;/strong&gt;. This means that app.js may depend on other classes, but we will not test these.&lt;/p&gt;

&lt;p&gt;Let me be more specific. the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; module could be really calling a database, this means that if the database connection is not working, the test would fail. OR, if the test is &lt;em&gt;really&lt;/em&gt; saving a user, next time we launch the test it could be failing because the user is already in the db.&lt;/p&gt;

&lt;p&gt;To handle all these scenarios, we will &lt;strong&gt;mock&lt;/strong&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; module. We will provide a fake implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; that will reply as we will, every time. This way, &lt;em&gt;we will be testing only app.js code&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;but-what-if-db-module-has-a-bug&quot;&gt;But‚Ä¶ what if db module has a bug?&lt;/h2&gt;

&lt;p&gt;You &lt;strong&gt;MUST&lt;/strong&gt; test the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; module, too! However, it‚Äôs not a good practice to test the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; module by testing the &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;If you don‚Äôt test the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; module, and all of a sudden your test has a bug, how can you say where the bug is? Imagine this in a layer of 10-15 modules‚Ä¶ you get the complexity.&lt;/p&gt;

&lt;p&gt;However, let me point out that &lt;strong&gt;unit testing alone is not the solution to all of your problems&lt;/strong&gt;. Unit testing can test that a single class will perform as specified, but another kind of testing (I call it ‚Äúintegration testing‚Äù) should be responsible to check that everything is wired correctly.&lt;/p&gt;

&lt;p&gt;Here is a famous gif about this concept:&lt;img src=&quot;/images/unit-testing-1.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-before-showing-the-code-let-me-introduce-to-you-rewire&quot;&gt;1. Before showing the code, let me introduce to you: rewire()&lt;/h2&gt;

&lt;p&gt;To test &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; we need &lt;a href=&quot;https://www.npmjs.com/package/rewire&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rewire&lt;/code&gt;&lt;/a&gt;, a nodejs module.&lt;/p&gt;

&lt;p&gt;To install:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;npm&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; i --save-dev rewire 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rewire()&lt;/code&gt; works like the &lt;code class=&quot;highlighter-rouge&quot;&gt;require()&lt;/code&gt; function, this mean that you &lt;em&gt;could&lt;/em&gt; use rewire for your applications, even if it does not make any sense. It is indeed very useful in tests.&lt;/p&gt;

&lt;p&gt;When you &lt;code class=&quot;highlighter-rouge&quot;&gt;rewire&lt;/code&gt;¬†a module, the module is imported &lt;em&gt;but&lt;/em&gt; some new methods are added: these are &lt;code class=&quot;highlighter-rouge&quot;&gt;__get__()&lt;/code&gt;¬†and &lt;code class=&quot;highlighter-rouge&quot;&gt;__set__()&lt;/code&gt;. Whith these two methods you can retrive any local variable instantiated locally.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rewire&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'rewire'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rewire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//like require but...&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__get__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'db'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// will return the db object! &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;rewire-has-a-problem-with-const&quot;&gt;Rewire has a problem with const&lt;/h3&gt;

&lt;p&gt;You might be tempted to do this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rewire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;saveUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__set__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'db'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//this will not work in this case!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt;¬†is declared as a &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;rewire&lt;/code&gt;¬†cannot do the magic: &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; variables in javascript are not reassignable.&lt;/p&gt;

&lt;p&gt;However, even if the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt;¬†object is not reassignable, we can still modify its internals, as long they are declared as &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;. That‚Äôs &lt;strong&gt;why we will mock single functions and not the whole object&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;2-before-showing-the-code-let-me-introduce-to-you-expectcreatespy&quot;&gt;2. Before showing the code, let me introduce to you: expect.createSpy()&lt;/h2&gt;

&lt;p&gt;I have already talked about the &lt;a href=&quot;https://michelenasti.com/2017/03/27/become-a-test-expert-in-nodejs-with-these-tricks.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt;&lt;/a&gt; assertion library.&lt;/p&gt;

&lt;p&gt;The good thing is, &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt;¬†has also a way to create mocks - that they call spies&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What is a &lt;em&gt;spy&lt;/em&gt;? it‚Äôs a function that can substitute the real implementation. It can be ‚Äútrained‚Äù to return the value you want, to simulate errors, throw exceptions, etc.&lt;/p&gt;

&lt;p&gt;With spies, you can also check that the function has been called, with the right parameters.&lt;/p&gt;

&lt;h2 id=&quot;tldr---here-is-the-code&quot;&gt;TL;DR - Here is the CODE&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//file app.test.js &lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'expect'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rewire&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'rewire'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rewire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (1) &lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'App'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//mock&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__get__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'db'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// (2) &lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;saveUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createSpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (3) &lt;/span&gt;
 
  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'should call saveUser with user object'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'michele@example.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'123abc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleSignup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// (4) &lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;saveUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHaveBeenCalledWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; 
      &lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;   
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You should find familiar what happens at (1): we are importing the app module with &lt;code class=&quot;highlighter-rouge&quot;&gt;rewire&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;then, we are (2) using the &lt;code class=&quot;highlighter-rouge&quot;&gt;__get__()&lt;/code&gt; function to retrieve the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt;¬†object from the module. At (3) we are replacing the function &lt;code class=&quot;highlighter-rouge&quot;&gt;saveUser()&lt;/code&gt; with a spy, created by us.&lt;/p&gt;

&lt;p&gt;The test is created as always; we prepare some input parameters and pass them to &lt;code class=&quot;highlighter-rouge&quot;&gt;app.handleSignup()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At (4) we can check that the spy has been called for real with the function &lt;code class=&quot;highlighter-rouge&quot;&gt;toHaveBeenCalledWith&lt;/code&gt; and we can check also that the parameters are the same!&lt;/p&gt;

&lt;h2 id=&quot;theres-more&quot;&gt;There‚Äôs more‚Ä¶&lt;/h2&gt;
&lt;p&gt;But that‚Äôs enough for now! Testing is something I really like, because it can tell you instantly if you‚Äôre doing something wrong. The overall quality of a project is greatly improved when you test and know how to test.&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/04/07/fantastic-unit-tests-in-javascript-with-mocks.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>Fantastic Unit Tests in Javascript with Mocks</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" Fantastic Unit Tests in Javascript with Mocks ">
                          <figcaption>Fantastic Unit Tests in Javascript with Mocks</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-04-07 09:49:00 UTC">Fri, 07 Apr 2017 09:49:00 +0000</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Let‚Äôs start with the example. We have two files, one that is the main one called <code class="highlighter-rouge">app.js</code> that exports just one method, called <code class="highlighter-rouge">handleSignup()</code>:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>// file app.js
const db = require('./db.js');

module.exports.handleSignup = (email, password) =&gt; {
  // ...
  // save the user to the database
  db.saveUser({ email, password });
  // ...
};
</code></pre>
</div>

<p>This <code class="highlighter-rouge">app.js</code>, at some point, calls the <code class="highlighter-rouge">db.saveUser()</code> function. Let‚Äôs see the <code class="highlighter-rouge">db</code> module:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>// file db.js
module.exports.saveUser = user =&gt; {
  console.log('Saving the user...', user);
};
</code></pre>
</div>

<p>Nothing very special, it‚Äôs just a demo. Let‚Äôs go with the important question.</p>

<h2 id="how-do-we-unit-test-appjs">How do we unit-test app.js?</h2>

<p>For those not used to <strong>unit testing</strong>, it <strong>is a way of testing classes atomically</strong>. This means that app.js may depend on other classes, but we will not test these.</p>

<p>Let me be more specific. the <code class="highlighter-rouge">db</code> module could be really calling a database, this means that if the database connection is not working, the test would fail. OR, if the test is <em>really</em> saving a user, next time we launch the test it could be failing because the user is already in the db.</p>

<p>To handle all these scenarios, we will <strong>mock</strong> the <code class="highlighter-rouge">db</code> module. We will provide a fake implementation of <code class="highlighter-rouge">db</code> that will reply as we will, every time. This way, <em>we will be testing only app.js code</em>.</p>

<h2 id="but-what-if-db-module-has-a-bug">But‚Ä¶ what if db module has a bug?</h2>

<p>You <strong>MUST</strong> test the <code class="highlighter-rouge">db</code> module, too! However, it‚Äôs not a good practice to test the <code class="highlighter-rouge">db</code> module by testing the <code class="highlighter-rouge">app</code> module.</p>

<p>If you don‚Äôt test the <code class="highlighter-rouge">db</code> module, and all of a sudden your test has a bug, how can you say where the bug is? Imagine this in a layer of 10-15 modules‚Ä¶ you get the complexity.</p>

<p>However, let me point out that <strong>unit testing alone is not the solution to all of your problems</strong>. Unit testing can test that a single class will perform as specified, but another kind of testing (I call it ‚Äúintegration testing‚Äù) should be responsible to check that everything is wired correctly.</p>

<p>Here is a famous gif about this concept:<img src="/images/unit-testing-1.gif" alt="" /></p>

<h2 id="1-before-showing-the-code-let-me-introduce-to-you-rewire">1. Before showing the code, let me introduce to you: rewire()</h2>

<p>To test <code class="highlighter-rouge">app.js</code> we need <a href="https://www.npmjs.com/package/rewire"><code class="highlighter-rouge">rewire</code></a>, a nodejs module.</p>

<p>To install:</p>

<div class="language-console highlighter-rouge"><pre class="highlight"><code><span class="w">$ </span><span class="nc">npm</span><span class="kv"> i --save-dev rewire 
</span></code></pre>
</div>

<p><code class="highlighter-rouge">rewire()</code> works like the <code class="highlighter-rouge">require()</code> function, this mean that you <em>could</em> use rewire for your applications, even if it does not make any sense. It is indeed very useful in tests.</p>

<p>When you <code class="highlighter-rouge">rewire</code>¬†a module, the module is imported <em>but</em> some new methods are added: these are <code class="highlighter-rouge">__get__()</code>¬†and <code class="highlighter-rouge">__set__()</code>. Whith these two methods you can retrive any local variable instantiated locally.</p>

<p>Example:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kr">const</span> <span class="nx">rewire</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'rewire'</span><span class="p">);</span> 

<span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">rewire</span><span class="p">(</span><span class="s1">'app'</span><span class="p">);</span> <span class="c1">//like require but...</span>

<span class="kr">const</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">__get__</span><span class="p">(</span><span class="s1">'db'</span><span class="p">);</span> <span class="c1">// will return the db object! </span>
</code></pre>
</div>

<h3 id="rewire-has-a-problem-with-const">Rewire has a problem with const</h3>

<p>You might be tempted to do this:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">...</span>
<span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">rewire</span><span class="p">(</span><span class="s1">'app'</span><span class="p">);</span>

<span class="kr">const</span> <span class="nx">db</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="na">saveUser</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{...}</span>
<span class="p">}</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">__set__</span><span class="p">(</span><span class="s1">'db'</span><span class="p">,</span> <span class="nx">db</span><span class="p">);</span> <span class="c1">//this will not work in this case!</span>
</code></pre>
</div>

<p>Since <code class="highlighter-rouge">db</code>¬†is declared as a <code class="highlighter-rouge">const</code> in <code class="highlighter-rouge">app</code>, <code class="highlighter-rouge">rewire</code>¬†cannot do the magic: <code class="highlighter-rouge">const</code> variables in javascript are not reassignable.</p>

<p>However, even if the <code class="highlighter-rouge">db</code>¬†object is not reassignable, we can still modify its internals, as long they are declared as <code class="highlighter-rouge">let</code> and <code class="highlighter-rouge">var</code>. That‚Äôs <strong>why we will mock single functions and not the whole object</strong>.</p>

<h2 id="2-before-showing-the-code-let-me-introduce-to-you-expectcreatespy">2. Before showing the code, let me introduce to you: expect.createSpy()</h2>

<p>I have already talked about the <a href="https://michelenasti.com/2017/03/27/become-a-test-expert-in-nodejs-with-these-tricks.html"><code class="highlighter-rouge">expect</code></a> assertion library.</p>

<p>The good thing is, <strong><code class="highlighter-rouge">expect</code>¬†has also a way to create mocks - that they call spies</strong>.</p>

<p>What is a <em>spy</em>? it‚Äôs a function that can substitute the real implementation. It can be ‚Äútrained‚Äù to return the value you want, to simulate errors, throw exceptions, etc.</p>

<p>With spies, you can also check that the function has been called, with the right parameters.</p>

<h2 id="tldr---here-is-the-code">TL;DR - Here is the CODE</h2>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="c1">//file app.test.js </span>
<span class="kr">const</span> <span class="nx">expect</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'expect'</span><span class="p">);</span>
<span class="kr">const</span> <span class="nx">rewire</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'rewire'</span><span class="p">);</span>

<span class="kd">let</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">rewire</span><span class="p">(</span><span class="s1">'./app'</span><span class="p">);</span> <span class="c1">// (1) </span>

<span class="nx">describe</span><span class="p">(</span><span class="s1">'App'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">//mock</span>
  <span class="kd">let</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">__get__</span><span class="p">(</span><span class="s1">'db'</span><span class="p">);</span>       <span class="c1">// (2) </span>
  <span class="nx">db</span><span class="p">.</span><span class="nx">saveUser</span> <span class="o">=</span> <span class="nx">expect</span><span class="p">.</span><span class="nx">createSpy</span><span class="p">();</span> <span class="c1">// (3) </span>
 
  <span class="nx">it</span><span class="p">(</span><span class="s1">'should call saveUser with user object'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">email</span> <span class="o">=</span> <span class="s1">'michele@example.com'</span><span class="p">;</span>
    <span class="kd">let</span> <span class="nx">password</span> <span class="o">=</span> <span class="s1">'123abc'</span><span class="p">;</span>

    <span class="nx">app</span><span class="p">.</span><span class="nx">handleSignup</span><span class="p">(</span><span class="nx">email</span><span class="p">,</span> <span class="nx">password</span><span class="p">);</span>

    <span class="c1">// (4) </span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">db</span><span class="p">.</span><span class="nx">saveUser</span><span class="p">).</span><span class="nx">toHaveBeenCalledWith</span><span class="p">({</span> 
      <span class="nx">email</span><span class="p">,</span>
      <span class="nx">password</span>
    <span class="p">});</span>   
  <span class="p">});</span>
<span class="p">});</span>

</code></pre>
</div>

<p>You should find familiar what happens at (1): we are importing the app module with <code class="highlighter-rouge">rewire</code>.</p>

<p>then, we are (2) using the <code class="highlighter-rouge">__get__()</code> function to retrieve the <code class="highlighter-rouge">db</code>¬†object from the module. At (3) we are replacing the function <code class="highlighter-rouge">saveUser()</code> with a spy, created by us.</p>

<p>The test is created as always; we prepare some input parameters and pass them to <code class="highlighter-rouge">app.handleSignup()</code>.</p>

<p>At (4) we can check that the spy has been called for real with the function <code class="highlighter-rouge">toHaveBeenCalledWith</code> and we can check also that the parameters are the same!</p>

<h2 id="theres-more">There‚Äôs more‚Ä¶</h2>
<p>But that‚Äôs enough for now! Testing is something I really like, because it can tell you instantly if you‚Äôre doing something wrong. The overall quality of a project is greatly improved when you test and know how to test.</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>Become a test expert in NodeJS with these tricks</title>
        <link>https://michelenasti.com/2017/03/27/become-a-test-expert-in-nodejs-with-these-tricks.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/03/27/become-a-test-expert-in-nodejs-with-these-tricks.html</guid>
        <pubDate>Mon, 27 Mar 2017 10:55:00 +0000</pubDate>
        <author></author>
        
          <description>&lt;p&gt;After reading my first guide to¬†
&lt;a href=&quot;https://michelenasti.com/2017/03/23/node-js-testing-easy-with-mocha.html&quot;&gt;testing NodeJS with Mocha&lt;/a&gt; you might have grasped the fundamental concepts of NodeJS testing. However, &lt;strong&gt;real word code is usually tested with some other expedients&lt;/strong&gt; that you might know to be a better tester (and coder).&lt;/p&gt;

&lt;h2 id=&quot;using-an-assertion-library&quot;&gt;Using an assertion library&lt;/h2&gt;

&lt;p&gt;In my previous article I wrote how to check the test result: to set a test as failing, you throw a &lt;code class=&quot;highlighter-rouge&quot;&gt;new Error()&lt;/code&gt; object with the message to show.&lt;/p&gt;

&lt;p&gt;This is the naive approach; the default is to use an assertion library. These libraries will expose an API that is clearer and simpler to manage, and will let you test more conditions with less code. Under the hood, they will launch the &lt;code class=&quot;highlighter-rouge&quot;&gt;new Error()&lt;/code&gt; if the conditions are not respected.&lt;/p&gt;

&lt;p&gt;Let‚Äôs see one of these libraries. One of the most famous libraries is called 
&lt;a href=&quot;https://github.com/mjackson/expect&quot;&gt;&lt;code&gt;expect&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you use expect, you write assertions similarly to how you would say them, e.g. &quot;I expect this value to be equal to 3&quot; or &quot;I expect this array to contain 3&quot;. When you write assertions in this way, you don't need to remember the order of actual and expected arguments to functions like assert.equal, which helps you write better tests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let‚Äôs see an example. Here is the test for a &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;¬†function, and the test is contained in file &lt;code class=&quot;highlighter-rouge&quot;&gt;utils.test.js&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//utils.test.js
const expect = require('expect');

const utils = require('./utils');

it('should add two numbers', () =&amp;gt; {
  let res = utils.add(33, 11);

  expect(res).toBe(44).toBeA('number');
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Easier to write, and to reason about. with &lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt; you can also check if objects have properties, etc. Have a look on their website to see all aviable methods.&lt;/p&gt;

&lt;h2 id=&quot;testing-async-code&quot;&gt;Testing async code&lt;/h2&gt;

&lt;p&gt;If you‚Äôre using NodeJS, or Javascript, you‚Äôre also probably using async functions. No matter if it‚Äôs in the form of promises or callbacks, stuff in JS happens async, and we must deal with it.&lt;/p&gt;

&lt;p&gt;Let‚Äôs prepare an example async function:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//utils.js
module.exports.asyncAdd = (a,b, callback) =&amp;gt; {
  setTimeout(() =&amp;gt; {
    callback(a+b);
  }, 1000);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;How do we test it? The first approach we might think would be to write the test like before:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//utils.test.js
it('should add two numbers', () =&amp;gt; {
  let res = utils.asyncAdd(33, 11, (res) =&amp;gt; {
  
    // will this work? 
    expect(res).toBe(44).toBeA('number'); 
  });
});

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you launch this example, &lt;em&gt;the test will pass, but for the &lt;strong&gt;wrong reason&lt;/strong&gt;&lt;/em&gt;. Infact, Mocha will not wait the result callback an will end the test instantly. Try to break the test or the function‚Ä¶ Mocha will say that everything is ok. That‚Äôs not good.&lt;/p&gt;

&lt;p&gt;How can we fix this? Mocha has a super-simple solution, just add a &lt;code class=&quot;highlighter-rouge&quot;&gt;done&lt;/code&gt; argument to the test callback. When &lt;code class=&quot;highlighter-rouge&quot;&gt;done&lt;/code&gt; is present, Mocha will not end the test before you call the &lt;code class=&quot;highlighter-rouge&quot;&gt;done()&lt;/code&gt; function. Let‚Äôs try:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//utils.test.js
it('should add two numbers', (done) =&amp;gt; {
  let res = utils.asyncAdd(33, 11, (res) =&amp;gt; {
  
    expect(res).toBe(44).toBeA('number'); 
    done();
  });
});

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, if you try to break the test or the function, you‚Äôll see that Mocha will fail. Exactely what we want.&lt;/p&gt;

&lt;h2 id=&quot;testing-an-express-application&quot;&gt;Testing an Express application&lt;/h2&gt;

&lt;p&gt;It‚Äôs very difficult for the random developer to write a NodeJS app without using &lt;a href=&quot;https://expressjs.com/it/&quot;&gt;Express&lt;/a&gt;, a framework for web applicatons that allows you to write REST endpoints easily.&lt;/p&gt;

&lt;p&gt;How do I test an express application?&lt;/p&gt;

&lt;p&gt;the creators of Express have come in help by creating another library called &lt;a href=&quot;https://github.com/visionmedia/supertest&quot;&gt;supertest&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;¬†HTTP assertions made easy via superagent.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let‚Äôs write a simple http application with Express:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//file server.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'express'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Page not found'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hello baby'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (1)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This simple express app will return a &lt;code class=&quot;highlighter-rouge&quot;&gt;404&lt;/code&gt; error with a json payload, everytime you navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:3000/&lt;/code&gt;. Why? Because there‚Äôs nothing to see, obviously! :p&lt;/p&gt;

&lt;p&gt;The only point worth of noting is that we simply export the app, as every other node module. Adding this line at (1) does not break anything, and makes testing possible.&lt;/p&gt;

&lt;p&gt;To test this app, let‚Äôs write the test using &lt;em&gt;supertest&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//server.test.js&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'supertest'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'expect'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./server'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'should return hello world response'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// (1)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// (2)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//supertest expect!!&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// (3)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// (4)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//expect library! &lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toInclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Page not found'&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// (5)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That‚Äôs interesting. At (1) we are importing the express app and using &lt;code class=&quot;highlighter-rouge&quot;&gt;supertest&lt;/code&gt; to wrap it. Then we perform a &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt; request over &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; (2) and start expecting things about the result. Unfortunately, supertest has another &lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt; method that is not related to the one in the &lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt; library.&lt;/p&gt;

&lt;p&gt;By the way, with supertest we can make assumptions about the status code (3), and if we want to assert something about the body of the request, we can do like in (4): when using a callback we can do everything over the &lt;code class=&quot;highlighter-rouge&quot;&gt;res&lt;/code&gt; variable, and infact we are using the &lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt; library to see if the body includes the &lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Since this Mocha test is async, we need a way to tell mocha that the test has ended. In (5) we see that supertest is already aware of mocha and will stop the test by passing the &lt;code class=&quot;highlighter-rouge&quot;&gt;done&lt;/code&gt; function to &lt;code class=&quot;highlighter-rouge&quot;&gt;end()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;For a novice, the problem of testing Node apps is that there are many libraries the same thing. For an expert, this becomes an advantage: you can choose the best for your purposes (but you must know them in advance).&lt;/p&gt;

&lt;p&gt;By the way, testing is important. Test everything is testable. Otherwise, maintaining javascript code can only be a mess.&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/03/27/become-a-test-expert-in-nodejs-with-these-tricks.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>Become a test expert in NodeJS with these tricks</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" Become a test expert in NodeJS with these tricks ">
                          <figcaption>Become a test expert in NodeJS with these tricks</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-03-27 10:55:00 UTC">Mon, 27 Mar 2017 10:55:00 +0000</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>After reading my first guide to¬†
<a href="https://michelenasti.com/2017/03/23/node-js-testing-easy-with-mocha.html">testing NodeJS with Mocha</a> you might have grasped the fundamental concepts of NodeJS testing. However, <strong>real word code is usually tested with some other expedients</strong> that you might know to be a better tester (and coder).</p>

<h2 id="using-an-assertion-library">Using an assertion library</h2>

<p>In my previous article I wrote how to check the test result: to set a test as failing, you throw a <code class="highlighter-rouge">new Error()</code> object with the message to show.</p>

<p>This is the naive approach; the default is to use an assertion library. These libraries will expose an API that is clearer and simpler to manage, and will let you test more conditions with less code. Under the hood, they will launch the <code class="highlighter-rouge">new Error()</code> if the conditions are not respected.</p>

<p>Let‚Äôs see one of these libraries. One of the most famous libraries is called 
<a href="https://github.com/mjackson/expect"><code>expect</code></a>:</p>
<blockquote>
<p>When you use expect, you write assertions similarly to how you would say them, e.g. "I expect this value to be equal to 3" or "I expect this array to contain 3". When you write assertions in this way, you don't need to remember the order of actual and expected arguments to functions like assert.equal, which helps you write better tests.</p>
</blockquote>

<p>Let‚Äôs see an example. Here is the test for a <code class="highlighter-rouge">add</code>¬†function, and the test is contained in file <code class="highlighter-rouge">utils.test.js</code>:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>//utils.test.js
const expect = require('expect');

const utils = require('./utils');

it('should add two numbers', () =&gt; {
  let res = utils.add(33, 11);

  expect(res).toBe(44).toBeA('number');
});
</code></pre>
</div>

<p>Easier to write, and to reason about. with <code class="highlighter-rouge">expect</code> you can also check if objects have properties, etc. Have a look on their website to see all aviable methods.</p>

<h2 id="testing-async-code">Testing async code</h2>

<p>If you‚Äôre using NodeJS, or Javascript, you‚Äôre also probably using async functions. No matter if it‚Äôs in the form of promises or callbacks, stuff in JS happens async, and we must deal with it.</p>

<p>Let‚Äôs prepare an example async function:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>//utils.js
module.exports.asyncAdd = (a,b, callback) =&gt; {
  setTimeout(() =&gt; {
    callback(a+b);
  }, 1000);
}

</code></pre>
</div>

<p>How do we test it? The first approach we might think would be to write the test like before:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>//utils.test.js
it('should add two numbers', () =&gt; {
  let res = utils.asyncAdd(33, 11, (res) =&gt; {
  
    // will this work? 
    expect(res).toBe(44).toBeA('number'); 
  });
});

</code></pre>
</div>

<p>If you launch this example, <em>the test will pass, but for the <strong>wrong reason</strong></em>. Infact, Mocha will not wait the result callback an will end the test instantly. Try to break the test or the function‚Ä¶ Mocha will say that everything is ok. That‚Äôs not good.</p>

<p>How can we fix this? Mocha has a super-simple solution, just add a <code class="highlighter-rouge">done</code> argument to the test callback. When <code class="highlighter-rouge">done</code> is present, Mocha will not end the test before you call the <code class="highlighter-rouge">done()</code> function. Let‚Äôs try:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>//utils.test.js
it('should add two numbers', (done) =&gt; {
  let res = utils.asyncAdd(33, 11, (res) =&gt; {
  
    expect(res).toBe(44).toBeA('number'); 
    done();
  });
});

</code></pre>
</div>

<p>Now, if you try to break the test or the function, you‚Äôll see that Mocha will fail. Exactely what we want.</p>

<h2 id="testing-an-express-application">Testing an Express application</h2>

<p>It‚Äôs very difficult for the random developer to write a NodeJS app without using <a href="https://expressjs.com/it/">Express</a>, a framework for web applicatons that allows you to write REST endpoints easily.</p>

<p>How do I test an express application?</p>

<p>the creators of Express have come in help by creating another library called <a href="https://github.com/visionmedia/supertest">supertest</a>:</p>

<blockquote>
  <p>¬†HTTP assertions made easy via superagent.</p>
</blockquote>

<p>Let‚Äôs write a simple http application with Express:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="c1">//file server.js</span>
<span class="kr">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'express'</span><span class="p">);</span>

<span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'/'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">404</span><span class="p">).</span><span class="nx">send</span><span class="p">({</span>
    <span class="na">error</span><span class="p">:</span> <span class="s1">'Page not found'</span><span class="p">,</span>
    <span class="na">name</span><span class="p">:</span> <span class="s1">'hello baby'</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">app</span> <span class="o">=</span> <span class="nx">app</span><span class="p">;</span> <span class="c1">// (1)</span>
</code></pre>
</div>

<p>This simple express app will return a <code class="highlighter-rouge">404</code> error with a json payload, everytime you navigate to <code class="highlighter-rouge">http://localhost:3000/</code>. Why? Because there‚Äôs nothing to see, obviously! :p</p>

<p>The only point worth of noting is that we simply export the app, as every other node module. Adding this line at (1) does not break anything, and makes testing possible.</p>

<p>To test this app, let‚Äôs write the test using <em>supertest</em>:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="c1">//server.test.js</span>

<span class="kr">const</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'supertest'</span><span class="p">);</span>
<span class="kr">const</span> <span class="nx">expect</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'expect'</span><span class="p">);</span>

<span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./server'</span><span class="p">);</span>

<span class="nx">it</span><span class="p">(</span><span class="s1">'should return hello world response'</span><span class="p">,</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">request</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>          <span class="c1">// (1)</span>
    <span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'/'</span><span class="p">)</span>           <span class="c1">// (2)</span>
    <span class="c1">//supertest expect!!</span>
    <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>        <span class="c1">// (3)</span>
    <span class="p">.</span><span class="nx">expect</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>  <span class="c1">// (4)</span>
      <span class="c1">//expect library! </span>
      <span class="nx">expect</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">toInclude</span><span class="p">({</span>
        <span class="na">error</span><span class="p">:</span> <span class="s1">'Page not found'</span>
      <span class="p">})</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">done</span><span class="p">);</span>         <span class="c1">// (5)</span>
<span class="p">});</span>
</code></pre>
</div>

<p>That‚Äôs interesting. At (1) we are importing the express app and using <code class="highlighter-rouge">supertest</code> to wrap it. Then we perform a <code class="highlighter-rouge">get</code> request over <code class="highlighter-rouge">/</code> (2) and start expecting things about the result. Unfortunately, supertest has another <code class="highlighter-rouge">expect</code> method that is not related to the one in the <code class="highlighter-rouge">expect</code> library.</p>

<p>By the way, with supertest we can make assumptions about the status code (3), and if we want to assert something about the body of the request, we can do like in (4): when using a callback we can do everything over the <code class="highlighter-rouge">res</code> variable, and infact we are using the <code class="highlighter-rouge">expect</code> library to see if the body includes the <code class="highlighter-rouge">error</code> property.</p>

<p>Since this Mocha test is async, we need a way to tell mocha that the test has ended. In (5) we see that supertest is already aware of mocha and will stop the test by passing the <code class="highlighter-rouge">done</code> function to <code class="highlighter-rouge">end()</code>.</p>

<h2 id="conclusions">Conclusions</h2>

<p>For a novice, the problem of testing Node apps is that there are many libraries the same thing. For an expert, this becomes an advantage: you can choose the best for your purposes (but you must know them in advance).</p>

<p>By the way, testing is important. Test everything is testable. Otherwise, maintaining javascript code can only be a mess.</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>Easy testing of NodeJS applications with Mocha</title>
        <link>https://michelenasti.com/2017/03/23/node-js-testing-easy-with-mocha.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/03/23/node-js-testing-easy-with-mocha.html</guid>
        <pubDate>Thu, 23 Mar 2017 18:13:00 +0000</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Testing in Javascript has become an immensely popular argument, but still there‚Äôs a lot of people that has not clear how to do it effectively. &lt;a href=&quot;/2016/08/my-very-personal-javascript-fatigue/&quot;&gt;I was one of these&lt;/a&gt;. There are many troubles that a young developer has to overcome in order to master Javascript testing. In this article, I‚Äôm going to explain Javascript testing with Mocha, a powerful library.&lt;/p&gt;

&lt;h2 id=&quot;why-testing-in-javascript&quot;&gt;Why testing in Javascript&lt;/h2&gt;

&lt;p&gt;An easy example. You write a function that takes only one argument, and use it extensively. After some days, you modify this function to take two arguments.&lt;/p&gt;

&lt;p&gt;Obviously you try to find every place where this function is called and add the missing parameter. Since the scripting nature of the language, how can you tell that this modification did not break anything? How to discover rapidly what to fix? Are users our only testers?&lt;/p&gt;

&lt;h2 id=&quot;setup-the-example&quot;&gt;Setup the example&lt;/h2&gt;

&lt;p&gt;Let‚Äôs write a simple Node test file. Let‚Äôs call it¬†&lt;code class=&quot;highlighter-rouge&quot;&gt;utils.js&lt;/code&gt;, a file where we put all the functions that do not fit in a specific module.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module.exports.add = (a,b) =&amp;amp;gt;  a + b;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That‚Äôs it! Let‚Äôs test this function. Is our sum function really doing its job?&lt;/p&gt;

&lt;h2 id=&quot;setup-the-test&quot;&gt;Setup the test&lt;/h2&gt;

&lt;p&gt;First, let‚Äôs install 
&lt;a href=&quot;https://mochajs.org&quot;&gt;&lt;strong&gt;Mocha&lt;/strong&gt;&lt;/a&gt;. This is easy as launching&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install --save-dev mocha 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let‚Äôs modify our &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; (you did run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt;, didn‚Äôt you?) to add a new task:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;scripts&quot;: {
    ... 
    &quot;test&quot;: &quot;mocha **/*.test.js&quot;
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Mocha will be installed as a &lt;em&gt;development dependency&lt;/em&gt;, this means that it is not necessary to run our code. Some deployment systems (like Heroku) will not download these dev dependencies.&lt;/p&gt;

&lt;p&gt;As you can see, the &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; command will execute all files in every directory ending with &lt;code class=&quot;highlighter-rouge&quot;&gt;.test.js&lt;/code&gt;. This is incredibly fast.&lt;/p&gt;

&lt;p&gt;Let‚Äôs create in the very same directory where we put &lt;code class=&quot;highlighter-rouge&quot;&gt;utils.js&lt;/code&gt;, another file called &lt;code class=&quot;highlighter-rouge&quot;&gt;utils.test.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is the test code:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const utils = require('./utils'); //(1)

it('should add two numbers', () =&amp;amp;gt; {   //(2)
  let res = utils.add(33,11);
  if (res !== 44) {
     throw new Error(`Expected: 44, but got ${res}`); //(3)
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And now you can simply run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm test&lt;/code&gt;. you should see an out like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm test

&amp;amp;gt; node-tests@1.0.0 test /Users/michelenasti/Doc
uments/node-tests
&amp;amp;gt; mocha **/*.test.js



  ‚úì should add two numbers

  1 passing (13ms)

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;whats-going-on&quot;&gt;What‚Äôs going on&lt;/h2&gt;

&lt;p&gt;Our tests are run directly by Mocha, that‚Äôs why we don‚Äôt import the library in this function.&lt;/p&gt;

&lt;p&gt;Mocha provides us a function called &lt;code class=&quot;highlighter-rouge&quot;&gt;it()&lt;/code&gt;. You might notice this function at (1). It takes two parameters: a description of the test, and a function with the code to execute.&lt;/p&gt;

&lt;p&gt;In the JS community tests are usually written in a &lt;em&gt;Behaviour Driven Development&lt;/em&gt; paradygm, this is a complex notion, for now let‚Äôs just say that test description starts with ‚Äú&lt;em&gt;should ‚Ä¶&lt;/em&gt;‚Äù. I‚Äôll write more in the future :)&lt;/p&gt;

&lt;p&gt;The second argument passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;it()&lt;/code&gt; is a function with the actual test code. Here we call the function under test, take the result and check the correctness.&lt;/p&gt;

&lt;p&gt;How Mocha decides if a test has passed or not? If no errors are thrown in our test code, then the test is marked as passed. On the other side, if an &lt;code class=&quot;highlighter-rouge&quot;&gt;Error()&lt;/code&gt; object is thrown, the test will stop and the message of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Error&lt;/code&gt; is printed to the terminal.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise for you: modify &lt;code class=&quot;highlighter-rouge&quot;&gt;utils.js&lt;/code&gt; to let the test fail :)&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;do-js-developers-throw-errors-to-test-their-functions&quot;&gt;Do JS developers throw errors to test their functions?&lt;/h2&gt;

&lt;p&gt;No, in reality JS developers NEVER throw Errors. Usually in JS we use some other libraries to &lt;em&gt;assert&lt;/em&gt; some properties on the result, using functions that are more expressive. We will talk about this aspect in another post. However, I think that seeing how tests work without assertion libraries is &lt;em&gt;fundamental&lt;/em&gt; to use such libraries.&lt;/p&gt;

&lt;h2 id=&quot;last-but-not-least&quot;&gt;Last but not least&lt;/h2&gt;

&lt;p&gt;Do you want your test to run automatically everytime you change some file? Of course you can, mixing some code coming from a previous post (&lt;a href=&quot;https://michelenasti.com/2017/01/31/develop-faster-in-nodejs-with-nodemon.html&quot;&gt;nodemon&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; add the script &lt;code class=&quot;highlighter-rouge&quot;&gt;test-watch&lt;/code&gt;‚Ä¶&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mocha **/*.test.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&quot;test-watch&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;nodemon --exec \&quot;npm test\&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Happy testing!&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/03/23/node-js-testing-easy-with-mocha.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>Easy testing of NodeJS applications with Mocha</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" Easy testing of NodeJS applications with Mocha ">
                          <figcaption>Easy testing of NodeJS applications with Mocha</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-03-23 18:13:00 UTC">Thu, 23 Mar 2017 18:13:00 +0000</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Testing in Javascript has become an immensely popular argument, but still there‚Äôs a lot of people that has not clear how to do it effectively. <a href="/2016/08/my-very-personal-javascript-fatigue/">I was one of these</a>. There are many troubles that a young developer has to overcome in order to master Javascript testing. In this article, I‚Äôm going to explain Javascript testing with Mocha, a powerful library.</p>

<h2 id="why-testing-in-javascript">Why testing in Javascript</h2>

<p>An easy example. You write a function that takes only one argument, and use it extensively. After some days, you modify this function to take two arguments.</p>

<p>Obviously you try to find every place where this function is called and add the missing parameter. Since the scripting nature of the language, how can you tell that this modification did not break anything? How to discover rapidly what to fix? Are users our only testers?</p>

<h2 id="setup-the-example">Setup the example</h2>

<p>Let‚Äôs write a simple Node test file. Let‚Äôs call it¬†<code class="highlighter-rouge">utils.js</code>, a file where we put all the functions that do not fit in a specific module.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>module.exports.add = (a,b) =&amp;gt;  a + b;
</code></pre>
</div>

<p>That‚Äôs it! Let‚Äôs test this function. Is our sum function really doing its job?</p>

<h2 id="setup-the-test">Setup the test</h2>

<p>First, let‚Äôs install 
<a href="https://mochajs.org"><strong>Mocha</strong></a>. This is easy as launching</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ npm install --save-dev mocha 
</code></pre>
</div>

<p>Let‚Äôs modify our <code class="highlighter-rouge">package.json</code> (you did run <code class="highlighter-rouge">npm init</code>, didn‚Äôt you?) to add a new task:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>"scripts": {
    ... 
    "test": "mocha **/*.test.js"
  },
</code></pre>
</div>

<p>Mocha will be installed as a <em>development dependency</em>, this means that it is not necessary to run our code. Some deployment systems (like Heroku) will not download these dev dependencies.</p>

<p>As you can see, the <code class="highlighter-rouge">test</code> command will execute all files in every directory ending with <code class="highlighter-rouge">.test.js</code>. This is incredibly fast.</p>

<p>Let‚Äôs create in the very same directory where we put <code class="highlighter-rouge">utils.js</code>, another file called <code class="highlighter-rouge">utils.test.js</code>.</p>

<p>Here is the test code:</p>
<div class="highlighter-rouge"><pre class="highlight"><code>const utils = require('./utils'); //(1)

it('should add two numbers', () =&amp;gt; {   //(2)
  let res = utils.add(33,11);
  if (res !== 44) {
     throw new Error(`Expected: 44, but got ${res}`); //(3)
  }
});
</code></pre>
</div>

<p>And now you can simply run <code class="highlighter-rouge">npm test</code>. you should see an out like this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ npm test

&amp;gt; node-tests@1.0.0 test /Users/michelenasti/Doc
uments/node-tests
&amp;gt; mocha **/*.test.js



  ‚úì should add two numbers

  1 passing (13ms)

</code></pre>
</div>

<h2 id="whats-going-on">What‚Äôs going on</h2>

<p>Our tests are run directly by Mocha, that‚Äôs why we don‚Äôt import the library in this function.</p>

<p>Mocha provides us a function called <code class="highlighter-rouge">it()</code>. You might notice this function at (1). It takes two parameters: a description of the test, and a function with the code to execute.</p>

<p>In the JS community tests are usually written in a <em>Behaviour Driven Development</em> paradygm, this is a complex notion, for now let‚Äôs just say that test description starts with ‚Äú<em>should ‚Ä¶</em>‚Äù. I‚Äôll write more in the future :)</p>

<p>The second argument passed to <code class="highlighter-rouge">it()</code> is a function with the actual test code. Here we call the function under test, take the result and check the correctness.</p>

<p>How Mocha decides if a test has passed or not? If no errors are thrown in our test code, then the test is marked as passed. On the other side, if an <code class="highlighter-rouge">Error()</code> object is thrown, the test will stop and the message of the <code class="highlighter-rouge">Error</code> is printed to the terminal.</p>

<p><em>Exercise for you: modify <code class="highlighter-rouge">utils.js</code> to let the test fail :)</em></p>

<h2 id="do-js-developers-throw-errors-to-test-their-functions">Do JS developers throw errors to test their functions?</h2>

<p>No, in reality JS developers NEVER throw Errors. Usually in JS we use some other libraries to <em>assert</em> some properties on the result, using functions that are more expressive. We will talk about this aspect in another post. However, I think that seeing how tests work without assertion libraries is <em>fundamental</em> to use such libraries.</p>

<h2 id="last-but-not-least">Last but not least</h2>

<p>Do you want your test to run automatically everytime you change some file? Of course you can, mixing some code coming from a previous post (<a href="https://michelenasti.com/2017/01/31/develop-faster-in-nodejs-with-nodemon.html">nodemon</a>).</p>

<p>In <code class="highlighter-rouge">package.json</code> add the script <code class="highlighter-rouge">test-watch</code>‚Ä¶</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="s2">"scripts"</span><span class="err">:</span> <span class="p">{</span>
   <span class="s2">"test"</span><span class="err">:</span> <span class="s2">"mocha **/*.test.js"</span><span class="p">,</span>
   <span class="s2">"test-watch"</span><span class="err">:</span> <span class="s2">"nodemon --exec \"npm test\""</span>
  <span class="p">},</span>
</code></pre>
</div>

<p>Happy testing!</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>L'Inglese tra italiani, a lavoro, √® una scelta sbagliata</title>
        <link>https://michelenasti.com/2017/03/20/l-inglese-tra-italiani-a-lavoro-e-una-scelta-sbagliata.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/03/20/l-inglese-tra-italiani-a-lavoro-e-una-scelta-sbagliata.html</guid>
        <pubDate>Mon, 20 Mar 2017 09:56:01 +0000</pubDate>
        <author></author>
        
          <description>&lt;p&gt;C‚Äô√® un trend che ogni tanto ritorna, ossia quello di usare l‚Äôinglese come lingua ufficiale durante l‚Äôorario di lavoro. Con colleghi italiani. In un ufficio italiano.&lt;/p&gt;

&lt;p&gt;La prima volta che ho sentito di questa pratica era durante la mia prima esperienza lavorativa; realizzando un software per un‚Äôazienda inglese, una grande parte delle specifiche arrivavano in quella lingua (giustamente!) e i nostri Business Analyst dovevano interfacciarsi continuamente con loro per documentare il software. Da qui, la scelta del team di analisti di parlare solo in inglese, tra di loro, per un giorno a settimana.&lt;/p&gt;

&lt;p&gt;Ora che lavoro da remoto, e interazione ‚Äúsincrona‚Äù con i colleghi √® molto scarsa, per uno specifico progetto √® stato concordato di comunicare (in chat!) solo ed esclusivamente in inglese.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pexels-photo-119689%20(1).jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;it‚Äôs time for a cup of tea!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Chi vi scrive ha un inglese decente, complice il pap√† professore di Inglese che si √® sbattuto per insegnarglielo fin da piccolo. Ovvio che non sono madrelingua ma non faccio pena, anzi mi sento tranquillamente a mio agio a parlare il mio fantastico &lt;em&gt;English&lt;/em&gt; con accento napoletano.&lt;/p&gt;

&lt;p&gt;Ebbene, &lt;strong&gt;trovo questa idea di sforzarsi a parlare inglese, tra italiani, una cagata pazzesca.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;i-tipi-di-comunicazione&quot;&gt;I tipi di comunicazione&lt;/h2&gt;

&lt;p&gt;Faccio solo un rapido e semplice excursus sul tipo di comunicazioni possibili in un ambiente di lavoro:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Comunicazione Sincrona&lt;/strong&gt; - √® quel tipo di comunicazione che prevede due o pi√π persone impegnate nello stesso momento. Esempi: la classica chiacchierata face-2-face, la telefonata, una videocall (skype...) etc. Qui √® importante l'immediatezza e la chiarezza dei concetti espressi.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Comunicazione Asincrona&lt;/strong&gt; - Le comunicazioni che non prevedono una risposta immediata tra gli interlocutori. Tra questi tipi di comunicazione ci sono chat, mail, blog post, commenti a un wiki, documentazione, documenti word... Qui invece √® desiderabile ottenere una comunicazione non ambigua e chiara anche a distanza di mesi.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aspettarsi una risposta istantanea a una chat √® da stupidi, cos√¨ come vi sembrerebbe piuttosto strano se un interlocutore fisico (con cui state conversando al distributore) smetta di rispondervi all‚Äôimprovviso.&lt;/p&gt;

&lt;p&gt;Bene, avete appena completato il primo corso base di comunicazione aziendale :)&lt;/p&gt;

&lt;h2 id=&quot;perch√©-parlare-in-inglese-tra-italiani-√®-una-cagata-pazzesca&quot;&gt;Perch√© parlare in inglese tra italiani √® una cagata pazzesca&lt;/h2&gt;

&lt;p&gt;Ho sentito molti motivi per cui le aziende vogliono introdurre l‚Äôinglese aggressivo tra i propri dipendenti. Smontiamoli uno ad uno.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&quot;Cos√¨ possiamo attrarre talenti stranieri&quot;.&lt;/strong&gt;&amp;nbsp;Cazzata. I talenti stranieri non vengono perch√© in Italia si parla inglese, anzi si aspettano che con loro parliate in inglese (che li avete chiamati a fare?). Per attrarre talenti stranieri servono &lt;strong&gt;idee sfidanti&lt;/strong&gt;, &lt;strong&gt;stipendi alti&lt;/strong&gt;, e un&amp;nbsp;&lt;strong&gt;ecosistema dinamico.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&quot;Cos√¨ i dipendenti migliorano l'inglese&quot;.&lt;/strong&gt; Mi dispiace davvero che qualcuno pensi che, se due persone che non conoscono l'inglese iniziano improvvisamente a parlarlo (sotto tortura), poi lo imparano. Anche questa √® una &lt;em&gt;cazzata&lt;/em&gt;. Se volete imparare l'inglese esiste una sola strada: un bel corso di lingue in cui si parla molto (e in cui la grammatica non √® trascurata).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&quot;Cos√¨ ci sentiamo pi√π internazionali&quot;&lt;/strong&gt;. Equivale a misurarsi il pene col righello senza mai confrontare le misure con gli altri. L'unica metrica che dovrebbe interessarvi √® il FATTURATO.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;Aggiungo, per completezza, che sul luogo di lavoro √® importante che la comunicazione sia &lt;strong&gt;efficace, semplice e chiara&lt;/strong&gt;. &lt;em&gt;Ogni sovrastruttura, impedimento, legaccio, costrizione finir√† col logorare il vostro lavoro.&lt;/em&gt; Io ad esempio non sopporto quando devo parlare con qualcuno e mi si risponde ‚Äúmandami una mail che sono SEMPRE impegnato‚Äù (non riesci neanche a trovare 10 minuti per me?). Anche questo √® un esempio di costrizione che non migliora il problem solving.¬†&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;lestremo-opposto-only-italian-please&quot;&gt;L‚Äôestremo opposto: only Italian, please&lt;/h2&gt;

&lt;p&gt;Siccome sono un programmatore (e se siete su questa pagina dovreste averlo intuito) posso gi√† dirvi che il 99% dei libri su cui ho studiato, gli articoli on line che ho letto (e scritto) , le guide tecniche e i siti delle aziende pi√π importanti sono in inglese.&lt;/p&gt;

&lt;p&gt;Questo vuol dire sostanzialmente due cose:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;La documentazione dei vostri software e dei vostri processi di business non pu√≤ essere in italiano&lt;/strong&gt;. Anche se oggi siete tutti italiani sul progetto, un bel giorno potreste trovarvi ad assumere degli stranieri, o delocalizzare lo sviluppo in qualche paese asiatico, e l‚Äôunico modo che avete per comunicare con loro sar√† l‚Äôinglese. Siate future-proof e usate l‚Äôinglese come fa il resto del mondo.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Il vostro codice sorgente deve essere in inglese.&lt;/strong&gt; Il motivo √® lo stesso del punto precedente, con l‚Äôaggravante che &lt;code class=&quot;highlighter-rouge&quot;&gt;checkIfCodiceFiscaleIsValid()&lt;/code&gt; non si pu√≤ sentire.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E‚Äô importante dunque che chi voglia lavorare in questo mondo debba per lo meno saper leggere e scrivere un Inglese decente.&lt;/p&gt;

&lt;h2 id=&quot;quando-√®-giusto-parlare-inglese-o-qualsiasi-altra-lingua-straniera&quot;&gt;Quando √® giusto parlare inglese (o qualsiasi altra lingua straniera)&lt;/h2&gt;

&lt;p&gt;Quando nella vostra conversazione sincrona uno dei partecipanti non capisce l‚Äôitaliano. A quel punto si sceglie una lingua compresa da tutti e la si usa.&lt;/p&gt;

&lt;h2 id=&quot;implicazioni-filosofiche-di-questa-scelta&quot;&gt;Implicazioni filosofiche di questa scelta&lt;/h2&gt;

&lt;p&gt;Siamo costretti a restare confinati nella nostra italianit√†? Non avremo mai accesso ai ‚Äútalenti stranieri‚Äù?&lt;/p&gt;

&lt;p&gt;Se la tua azienda √® una s.r.l., non puoi certo definirla L.T.D. :)&lt;/p&gt;

&lt;p&gt;Un altra conseguenza √® che non √® la lingua che si parla a rendere &lt;em&gt;grande&lt;/em&gt; un workplace.&lt;/p&gt;

&lt;p&gt;Infine: meglio un ottimo performer con un inglese zoppicante, o un ¬†inglese madrelingua che lavora cos√¨ cos√¨?&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/03/20/l-inglese-tra-italiani-a-lavoro-e-una-scelta-sbagliata.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>L'Inglese tra italiani, a lavoro, √® una scelta sbagliata</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" L'Inglese tra italiani, a lavoro, √® una scelta sbagliata ">
                          <figcaption>L'Inglese tra italiani, a lavoro, √® una scelta sbagliata</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-03-20 09:56:01 UTC">Mon, 20 Mar 2017 09:56:01 +0000</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>C‚Äô√® un trend che ogni tanto ritorna, ossia quello di usare l‚Äôinglese come lingua ufficiale durante l‚Äôorario di lavoro. Con colleghi italiani. In un ufficio italiano.</p>

<p>La prima volta che ho sentito di questa pratica era durante la mia prima esperienza lavorativa; realizzando un software per un‚Äôazienda inglese, una grande parte delle specifiche arrivavano in quella lingua (giustamente!) e i nostri Business Analyst dovevano interfacciarsi continuamente con loro per documentare il software. Da qui, la scelta del team di analisti di parlare solo in inglese, tra di loro, per un giorno a settimana.</p>

<p>Ora che lavoro da remoto, e interazione ‚Äúsincrona‚Äù con i colleghi √® molto scarsa, per uno specifico progetto √® stato concordato di comunicare (in chat!) solo ed esclusivamente in inglese.</p>

<p><img src="/images/pexels-photo-119689%20(1).jpeg" alt="" /></p>

<p><em>it‚Äôs time for a cup of tea!</em></p>

<p>Chi vi scrive ha un inglese decente, complice il pap√† professore di Inglese che si √® sbattuto per insegnarglielo fin da piccolo. Ovvio che non sono madrelingua ma non faccio pena, anzi mi sento tranquillamente a mio agio a parlare il mio fantastico <em>English</em> con accento napoletano.</p>

<p>Ebbene, <strong>trovo questa idea di sforzarsi a parlare inglese, tra italiani, una cagata pazzesca.</strong></p>

<h2 id="i-tipi-di-comunicazione">I tipi di comunicazione</h2>

<p>Faccio solo un rapido e semplice excursus sul tipo di comunicazioni possibili in un ambiente di lavoro:</p>
<ul>
  <li>
    <p><strong>Comunicazione Sincrona</strong> - √® quel tipo di comunicazione che prevede due o pi√π persone impegnate nello stesso momento. Esempi: la classica chiacchierata face-2-face, la telefonata, una videocall (skype...) etc. Qui √® importante l'immediatezza e la chiarezza dei concetti espressi.</p>
  </li>
  <li>
    <p><strong>Comunicazione Asincrona</strong> - Le comunicazioni che non prevedono una risposta immediata tra gli interlocutori. Tra questi tipi di comunicazione ci sono chat, mail, blog post, commenti a un wiki, documentazione, documenti word... Qui invece √® desiderabile ottenere una comunicazione non ambigua e chiara anche a distanza di mesi.</p>
  </li>
</ul>

<p>Aspettarsi una risposta istantanea a una chat √® da stupidi, cos√¨ come vi sembrerebbe piuttosto strano se un interlocutore fisico (con cui state conversando al distributore) smetta di rispondervi all‚Äôimprovviso.</p>

<p>Bene, avete appena completato il primo corso base di comunicazione aziendale :)</p>

<h2 id="perch√©-parlare-in-inglese-tra-italiani-√®-una-cagata-pazzesca">Perch√© parlare in inglese tra italiani √® una cagata pazzesca</h2>

<p>Ho sentito molti motivi per cui le aziende vogliono introdurre l‚Äôinglese aggressivo tra i propri dipendenti. Smontiamoli uno ad uno.</p>
<ul>
  <li>
    <p><strong>"Cos√¨ possiamo attrarre talenti stranieri".</strong>&nbsp;Cazzata. I talenti stranieri non vengono perch√© in Italia si parla inglese, anzi si aspettano che con loro parliate in inglese (che li avete chiamati a fare?). Per attrarre talenti stranieri servono <strong>idee sfidanti</strong>, <strong>stipendi alti</strong>, e un&nbsp;<strong>ecosistema dinamico.</strong></p>
  </li>
  <li>
    <p><strong>"Cos√¨ i dipendenti migliorano l'inglese".</strong> Mi dispiace davvero che qualcuno pensi che, se due persone che non conoscono l'inglese iniziano improvvisamente a parlarlo (sotto tortura), poi lo imparano. Anche questa √® una <em>cazzata</em>. Se volete imparare l'inglese esiste una sola strada: un bel corso di lingue in cui si parla molto (e in cui la grammatica non √® trascurata).</p>
  </li>
  <li>
    <p><strong>"Cos√¨ ci sentiamo pi√π internazionali"</strong>. Equivale a misurarsi il pene col righello senza mai confrontare le misure con gli altri. L'unica metrica che dovrebbe interessarvi √® il FATTURATO.</p>
  </li>
</ul>

<p><span style="font-size: 18px;">Aggiungo, per completezza, che sul luogo di lavoro √® importante che la comunicazione sia <strong>efficace, semplice e chiara</strong>. <em>Ogni sovrastruttura, impedimento, legaccio, costrizione finir√† col logorare il vostro lavoro.</em> Io ad esempio non sopporto quando devo parlare con qualcuno e mi si risponde ‚Äúmandami una mail che sono SEMPRE impegnato‚Äù (non riesci neanche a trovare 10 minuti per me?). Anche questo √® un esempio di costrizione che non migliora il problem solving.¬†</span></p>

<h2 id="lestremo-opposto-only-italian-please">L‚Äôestremo opposto: only Italian, please</h2>

<p>Siccome sono un programmatore (e se siete su questa pagina dovreste averlo intuito) posso gi√† dirvi che il 99% dei libri su cui ho studiato, gli articoli on line che ho letto (e scritto) , le guide tecniche e i siti delle aziende pi√π importanti sono in inglese.</p>

<p>Questo vuol dire sostanzialmente due cose:</p>
<ul>
  <li><strong>La documentazione dei vostri software e dei vostri processi di business non pu√≤ essere in italiano</strong>. Anche se oggi siete tutti italiani sul progetto, un bel giorno potreste trovarvi ad assumere degli stranieri, o delocalizzare lo sviluppo in qualche paese asiatico, e l‚Äôunico modo che avete per comunicare con loro sar√† l‚Äôinglese. Siate future-proof e usate l‚Äôinglese come fa il resto del mondo.</li>
  <li><strong>Il vostro codice sorgente deve essere in inglese.</strong> Il motivo √® lo stesso del punto precedente, con l‚Äôaggravante che <code class="highlighter-rouge">checkIfCodiceFiscaleIsValid()</code> non si pu√≤ sentire.</li>
</ul>

<p>E‚Äô importante dunque che chi voglia lavorare in questo mondo debba per lo meno saper leggere e scrivere un Inglese decente.</p>

<h2 id="quando-√®-giusto-parlare-inglese-o-qualsiasi-altra-lingua-straniera">Quando √® giusto parlare inglese (o qualsiasi altra lingua straniera)</h2>

<p>Quando nella vostra conversazione sincrona uno dei partecipanti non capisce l‚Äôitaliano. A quel punto si sceglie una lingua compresa da tutti e la si usa.</p>

<h2 id="implicazioni-filosofiche-di-questa-scelta">Implicazioni filosofiche di questa scelta</h2>

<p>Siamo costretti a restare confinati nella nostra italianit√†? Non avremo mai accesso ai ‚Äútalenti stranieri‚Äù?</p>

<p>Se la tua azienda √® una s.r.l., non puoi certo definirla L.T.D. :)</p>

<p>Un altra conseguenza √® che non √® la lingua che si parla a rendere <em>grande</em> un workplace.</p>

<p>Infine: meglio un ottimo performer con un inglese zoppicante, o un ¬†inglese madrelingua che lavora cos√¨ cos√¨?</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
  </channel>
</rss>