<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>I'm a full stack Developer with an eye for the web.</description>
    <link>https://michelenasti.com/</link>
    <atom:link href="https://michelenasti.com/feed.xml" rel="self" type="application/rss+xml" />
    <updated>2017-07-18T09:21:31+00:00</updated>
    <id>https://michelenasti.com</id>
    <author>
      <name></name>
    </author>
    
      <item>
        <title>Recensione del libro: Codice Montemagno</title>
        <link>https://michelenasti.com/2017/07/17/recensione-del-libro-codice-montemagno.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/07/17/recensione-del-libro-codice-montemagno.html</guid>
        <pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Il libro di cui vi parlo oggi è &lt;a href=&quot;http://amzn.to/2uqzV4j&quot;&gt;Codice Montemagno&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/codice_montemagno.jpg&quot; class=&quot; forestry--none forestry--none forestry--none&quot; style=&quot;float: none;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Marco &lt;em&gt;Monty&lt;/em&gt; Montemagno&lt;/strong&gt; è un esperto di social media e di comunicazione  italiano. Da circa 15-20 anni si occupa di tutto ciò che è tecnologia &amp;amp; comunicazione. Ha fondato la piattaforma Blogo nel 2005, che poi ha venduto, e ora diciamo che lavora &lt;em&gt;in proprio&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Un altro elemento per comprendere l’autore è la sua &lt;strong&gt;presenza on line&lt;/strong&gt;. Da circa 2 anni Marco pubblica un breve video quotidiano, in cui parla di business, comunicazione, digital, social, strategie, etc. Da quando ha iniziato quest’opera di divulgazione è passato da 7000 a 200.000 fan su facebook. A ogni video che posta fa centinaia di commenti e like. Perché?&lt;/p&gt;

&lt;p&gt;Oltre che puntare ai contenuti, che sono di indubbia qualità, Marco ha ridefinito lo standard della comunicazione digitale in Italia. Ha creato un nuovo linguaggio visivo che, dobbiamo ammetterlo, è stato copiato in lungo e in largo dagli altri.&lt;/p&gt;

&lt;h2 id=&quot;ma-parliamo-del-libro&quot;&gt;Ma parliamo del libro&lt;/h2&gt;

&lt;p&gt;Se quindi conoscete Montemagno per i suoi trascorsi on line, non vi dovrebbe stupire il fatto che nel momento in cui ha “annunciato” il libro, quindi senza aver spedito neanche una copia, già era in cima alla classifica dei libri più venduti su Amazon.&lt;/p&gt;

&lt;p&gt;Il libro è una versione riveduta e corretta, anzi meglio organizzata, di quanto ha già proposto online. Nel libro ci sono tantissime citazioni di altri libri (quanto leggi, monty?!) da cui partono una serie di riflessioni e come possiamo applicare questo genere di info al nostro business, che sia tradizionale o innovativo.&lt;/p&gt;

&lt;p&gt;Mi hanno in particolare stupito un paio di paragrafi. Uno che analizzava il fenomeno Trump dal punto di vista mediatico e come fosse possibile prevedere, un anno prima delle elezioni, che le avrebbe vinte lui nonostante gli scandali. Questo perchè Trump è un personaggio mediatico straordinario (ricordate Berlusconi?) e quindi è un maestro nell’antica arte di “spararla grossa”.&lt;/p&gt;

&lt;p&gt;Un altro spunto interessante riguarda il ruolo che i video avranno nel futuro dei social. Il testo ormai sta scomparando, complice anche una generazione di analfabeti funzionali che ci circonda (questa opinione è mia, non del Monty). I video invece funzionano perchè sono diretti, perchè Facebook li predilige rispetto al testo, e soprattutto perchè la gente li guarda. Ho suggerito a mia moglie di applicare questo consiglio dei video alla sua attività e lei ha potuto davvero confermare che il tasso di interazione ai suoi post è aumentato.&lt;/p&gt;

&lt;h2 id=&quot;un-giudizio-più-ragionato&quot;&gt;Un giudizio più ragionato&lt;/h2&gt;

&lt;p&gt;Se non avete mai visto nulla di Montemagno, questo libro sarà per voi una  sorpresa, specialmente se avete a che fare col digitale.&lt;/p&gt;

&lt;p&gt;Se come me, avete visto una decina di suoi video (considerate che ne ha fatti più di 400!), il libro vi ripresenterà le idee in forma più chiara, discorsiva, organica.&lt;/p&gt;

&lt;p&gt;I contenuti hanno secondo me senso a prescindere dal personaggio che li propone, anche se detti da lui che li ha vissuti in prima persona assumono un ulteriore senso di realtà.&lt;/p&gt;

&lt;p&gt;Se invece pensi che i video di Montemagno siano banali, o li hai già visti tutti almeno due volte, puoi anche risparmiarti di comprare il libro: ti sembrerà di rileggere ciò che hai già sentito.&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/07/17/recensione-del-libro-codice-montemagno.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>Recensione del libro: Codice Montemagno</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" Recensione del libro: Codice Montemagno ">
                          <figcaption>Recensione del libro: Codice Montemagno</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-07-17 00:00:00 UTC">Mon, 17 Jul 2017 00:00:00 +0000</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Il libro di cui vi parlo oggi è <a href="http://amzn.to/2uqzV4j">Codice Montemagno</a>.</p>

<p><img src="/images/codice_montemagno.jpg" class=" forestry--none forestry--none forestry--none" style="float: none;" /></p>

<p><strong>Marco <em>Monty</em> Montemagno</strong> è un esperto di social media e di comunicazione  italiano. Da circa 15-20 anni si occupa di tutto ciò che è tecnologia &amp; comunicazione. Ha fondato la piattaforma Blogo nel 2005, che poi ha venduto, e ora diciamo che lavora <em>in proprio</em>.</p>

<p>Un altro elemento per comprendere l’autore è la sua <strong>presenza on line</strong>. Da circa 2 anni Marco pubblica un breve video quotidiano, in cui parla di business, comunicazione, digital, social, strategie, etc. Da quando ha iniziato quest’opera di divulgazione è passato da 7000 a 200.000 fan su facebook. A ogni video che posta fa centinaia di commenti e like. Perché?</p>

<p>Oltre che puntare ai contenuti, che sono di indubbia qualità, Marco ha ridefinito lo standard della comunicazione digitale in Italia. Ha creato un nuovo linguaggio visivo che, dobbiamo ammetterlo, è stato copiato in lungo e in largo dagli altri.</p>

<h2 id="ma-parliamo-del-libro">Ma parliamo del libro</h2>

<p>Se quindi conoscete Montemagno per i suoi trascorsi on line, non vi dovrebbe stupire il fatto che nel momento in cui ha “annunciato” il libro, quindi senza aver spedito neanche una copia, già era in cima alla classifica dei libri più venduti su Amazon.</p>

<p>Il libro è una versione riveduta e corretta, anzi meglio organizzata, di quanto ha già proposto online. Nel libro ci sono tantissime citazioni di altri libri (quanto leggi, monty?!) da cui partono una serie di riflessioni e come possiamo applicare questo genere di info al nostro business, che sia tradizionale o innovativo.</p>

<p>Mi hanno in particolare stupito un paio di paragrafi. Uno che analizzava il fenomeno Trump dal punto di vista mediatico e come fosse possibile prevedere, un anno prima delle elezioni, che le avrebbe vinte lui nonostante gli scandali. Questo perchè Trump è un personaggio mediatico straordinario (ricordate Berlusconi?) e quindi è un maestro nell’antica arte di “spararla grossa”.</p>

<p>Un altro spunto interessante riguarda il ruolo che i video avranno nel futuro dei social. Il testo ormai sta scomparando, complice anche una generazione di analfabeti funzionali che ci circonda (questa opinione è mia, non del Monty). I video invece funzionano perchè sono diretti, perchè Facebook li predilige rispetto al testo, e soprattutto perchè la gente li guarda. Ho suggerito a mia moglie di applicare questo consiglio dei video alla sua attività e lei ha potuto davvero confermare che il tasso di interazione ai suoi post è aumentato.</p>

<h2 id="un-giudizio-più-ragionato">Un giudizio più ragionato</h2>

<p>Se non avete mai visto nulla di Montemagno, questo libro sarà per voi una  sorpresa, specialmente se avete a che fare col digitale.</p>

<p>Se come me, avete visto una decina di suoi video (considerate che ne ha fatti più di 400!), il libro vi ripresenterà le idee in forma più chiara, discorsiva, organica.</p>

<p>I contenuti hanno secondo me senso a prescindere dal personaggio che li propone, anche se detti da lui che li ha vissuti in prima persona assumono un ulteriore senso di realtà.</p>

<p>Se invece pensi che i video di Montemagno siano banali, o li hai già visti tutti almeno due volte, puoi anche risparmiarti di comprare il libro: ti sembrerà di rileggere ciò che hai già sentito.</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>Quanto è complicato essere Elon Musk</title>
        <link>https://michelenasti.com/2017/06/29/caspiterina-quanto-e-complicato-essere-elon-musk.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/06/29/caspiterina-quanto-e-complicato-essere-elon-musk.html</guid>
        <pubDate>Thu, 29 Jun 2017 00:00:00 +0000</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Stamattina ho “audioascoltato” &lt;a href=&quot;http://amzn.to/2ullR8A&quot;&gt;un libro su Elon Musk&lt;/a&gt;, che è davvero un personaggio fuori dalle righe. Mi hanno colpito un paio di passaggi.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/FabMelodia-MarteELONmusk.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Da adolescente studiava solo le materie che riteneva davvero necessarie, come matematica e fisica; in tutte le altre si accontentava della sufficienza.&lt;/li&gt;
  &lt;li&gt;Passava i weekend a leggere, dai fumetti alla fantascienza. Anche 2 libri al giorno!&lt;/li&gt;
  &lt;li&gt;Veniva bullizzato perchè aveva quel famoso atteggiamento “so tutto io”&lt;/li&gt;
  &lt;li&gt;E nella sua prima azienda, da lui fondata, era a capo dello sviluppo tecnico. Si confrontava tutti i giorni con persone che non avevano le sue spiccate doti e si incazzava quando gli sviluppatori non lo seguivano, non lo capivano, o lo contraddicevano. Addirittura gli sviluppatori, quando tornavano al lavoro al mattino, trovavano il loro lavoro cambiato o completato perchè Elon ci aveva messo mano!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Insomma, un personaggio davvero fuori dalle righe.I progetti più rivoluzionari vengono dalla testa di quest’uomo: l’&lt;strong&gt;auto elettrica&lt;/strong&gt;, il &lt;strong&gt;razzo spaziale riutilizzabile&lt;/strong&gt;, la &lt;strong&gt;capsula-treno superveloce&lt;/strong&gt;…&lt;/p&gt;

&lt;p&gt;Qual è la differenza tra un genio come lui, e un genio qualsiasi? Elon (ormai siamo amici) ha uno spiccato senso degli affari. La sua intelligenza l’ha sempre utilizzata per ricavarci qualcosa, dal punto di vista economico. Ecco alcuni esempi:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A 12 anni ha venduto il suo primo videogioco piuttosto rudimentale, per 550$.&lt;/li&gt;
  &lt;li&gt;Al college, oltre a riparare pc e a scrivere piccoli software per gli amici, aveva trasformato il dormitorio in un night club in cui si pagava 5€ l’ingresso. Il sabato registravano anche 500 ingressi!&lt;/li&gt;
  &lt;li&gt;Da adolescente stava per aprire una sala giochi col fratello, progetto arenatosi quando nessun adulto ha voluto mettere la firma per gli adempimenti normativi.&lt;/li&gt;
  &lt;li&gt;Aveva meno di 30 anni ed era già multimilionario.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Musk ha davvero stravolto le idee che avevamo sulla genialità: in futuro lo paragoneremo a un Leonardo Da Vinci, o a un Einstein? Chissà.&lt;/p&gt;

</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/06/29/caspiterina-quanto-e-complicato-essere-elon-musk.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>Quanto è complicato essere Elon Musk</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" Quanto è complicato essere Elon Musk ">
                          <figcaption>Quanto è complicato essere Elon Musk</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-06-29 00:00:00 UTC">Thu, 29 Jun 2017 00:00:00 +0000</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Stamattina ho “audioascoltato” <a href="http://amzn.to/2ullR8A">un libro su Elon Musk</a>, che è davvero un personaggio fuori dalle righe. Mi hanno colpito un paio di passaggi.</p>

<p><img src="/images/FabMelodia-MarteELONmusk.jpg" alt="" /></p>

<ul>
  <li>Da adolescente studiava solo le materie che riteneva davvero necessarie, come matematica e fisica; in tutte le altre si accontentava della sufficienza.</li>
  <li>Passava i weekend a leggere, dai fumetti alla fantascienza. Anche 2 libri al giorno!</li>
  <li>Veniva bullizzato perchè aveva quel famoso atteggiamento “so tutto io”</li>
  <li>E nella sua prima azienda, da lui fondata, era a capo dello sviluppo tecnico. Si confrontava tutti i giorni con persone che non avevano le sue spiccate doti e si incazzava quando gli sviluppatori non lo seguivano, non lo capivano, o lo contraddicevano. Addirittura gli sviluppatori, quando tornavano al lavoro al mattino, trovavano il loro lavoro cambiato o completato perchè Elon ci aveva messo mano!</li>
</ul>

<p>Insomma, un personaggio davvero fuori dalle righe.I progetti più rivoluzionari vengono dalla testa di quest’uomo: l’<strong>auto elettrica</strong>, il <strong>razzo spaziale riutilizzabile</strong>, la <strong>capsula-treno superveloce</strong>…</p>

<p>Qual è la differenza tra un genio come lui, e un genio qualsiasi? Elon (ormai siamo amici) ha uno spiccato senso degli affari. La sua intelligenza l’ha sempre utilizzata per ricavarci qualcosa, dal punto di vista economico. Ecco alcuni esempi:</p>

<ul>
  <li>A 12 anni ha venduto il suo primo videogioco piuttosto rudimentale, per 550$.</li>
  <li>Al college, oltre a riparare pc e a scrivere piccoli software per gli amici, aveva trasformato il dormitorio in un night club in cui si pagava 5€ l’ingresso. Il sabato registravano anche 500 ingressi!</li>
  <li>Da adolescente stava per aprire una sala giochi col fratello, progetto arenatosi quando nessun adulto ha voluto mettere la firma per gli adempimenti normativi.</li>
  <li>Aveva meno di 30 anni ed era già multimilionario.</li>
</ul>

<p>Musk ha davvero stravolto le idee che avevamo sulla genialità: in futuro lo paragoneremo a un Leonardo Da Vinci, o a un Einstein? Chissà.</p>


                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>We' waglio', vuoi venire a lavorare nella mia startup?</title>
        <link>https://michelenasti.com/2017/06/09/we-waglio-vuoi-venire-a-lavorare-nella-mia-startup.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/06/09/we-waglio-vuoi-venire-a-lavorare-nella-mia-startup.html</guid>
        <pubDate>Fri, 09 Jun 2017 09:20:50 +0000</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Ricevo almeno &lt;strong&gt;due richieste al mese&lt;/strong&gt; per collaborare con startup. 
Più o meno il copione è sempre lo stesso:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;“Ciao Michele, non ci conosciamo, ma ti ho trovato on line e ho pensato di parlarti della mia startup…“&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;“Dimmi!”&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;“Abbiamo questa idea rivoluzionaria, sorprenderemo il mondo, &lt;strong&gt;non abbiamo competitor&lt;/strong&gt;, etc etc”&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;“Fantastico! Dove posso vedere una demo?”&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;“No, per ora non abbiamo ancora nulla. Anzi, stavamo proprio cercando qualcuno che voglia collaborare con noi per realizzarla… Per caso sei interessato?”&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;“Quindi non c’è nulla? solo un’idea nella tua testa?”&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;“C’è molto più dell’idea! Ho quasi fatto tutto, manca solo il prodotto!”&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;“…”&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;“Ti darò una quota importante della società, il 30%”&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;“…”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;michele-sei-troppo-spocchioso&quot;&gt;Michele, sei troppo spocchioso&lt;/h2&gt;

&lt;p&gt;Cari amici startupper, E’ dal 2012 che è esplosa la moda in Italia. Non so se ve ne ho mai parlato ma il mio rimpianto più grande è quello di &lt;strong&gt;non&lt;/strong&gt; aver lavorato in una startup, da neolaureato; ma questa è un’altra storia che approfondirò successivamente.&lt;/p&gt;

&lt;p&gt;Ciò che sbagliano tutte le persone che mi contattano (e giuro che sono &lt;em&gt;almeno&lt;/em&gt; due al mese) è che pretendono che io debba rimanere affascinato dal loro racconto e quasi quasi debba chiedere io di lavorare per loro. Non funziona così.&lt;/p&gt;

&lt;p&gt;Innanzitutto, &lt;strong&gt;la mia tolleranza al rischio si è abbassata di molto&lt;/strong&gt;. Ora che ho una figlia ci penso 10 volte prima di prendere qualsiasi scelta che possa compromettere non la mia vita, ma la sua. Per questo motivo &lt;em&gt;il momento migliore in cui si deve lanciare (o lavorare per) una startup è subito dopo l’università&lt;/em&gt;, quando si è ancora ragazzini e c’è un fantastico paracadute, ossia mamma &amp;amp; papà.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lavorare per una startup implica un periodo più o meno lungo di lavoro senza un’entrata fissa&lt;/strong&gt;, che in genere arriva quando si realizza una delle seguenti condizioni:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Un investitore ci mette i soldi&lt;/li&gt;
  &lt;li&gt;La startup trova dei clienti paganti&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Trovare un investitore è difficile:  in Italia i fondi di investimento disposti a finanziare qualcosa si contano sulle dita di una mano. E se ti danno il cash, te lo danno quando hai almeno un MVP o una demo da mostrare.&lt;/p&gt;

&lt;p&gt;Per questo penso che in Italia convenga partire con l’idea di fatturare prima possibile, per quanto difficile questo possa sembrare.&lt;/p&gt;

&lt;p&gt;Motivo per cui scarto tutte le startup che non sanno rispondere alla domanda &lt;strong&gt;“come intendi fare soldi?”&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tra-ceo-e-cto-deve-esserci-qualcosa-di-più-forte-di-un-matrimonio&quot;&gt;Tra CEO e CTO deve esserci qualcosa di più forte di un matrimonio&lt;/h2&gt;

&lt;p&gt;Leggevo un interessante articolo in cui si diceva che il 65% delle startup non falliscono perchè non trovano clienti o investitori, bensì perchè &lt;a href=&quot;http://money.cnn.com/2014/02/24/smallbusiness/startups-entrepreneur-cofounder/index.html&quot;&gt;i fondatori litigano&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mettiamoci nei panni dell’aspirante startupper che ho citato prima: contatta persone a caso su facebook chiedendogli di lavorare alla sua idea.&lt;/p&gt;

&lt;p&gt;Troverà mai qualcuno? Gli auguro di si, ma non penso proprio che succederà in maniera così scontata. Ma chi?&lt;/p&gt;

&lt;p&gt;Dovendo lavorare con qualcuno per lanciare un’azienda, con l’ansia costante di finire i soldi, le persone che fanno nascere una startup dovrebbero essere:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;affiatate tra di loro&lt;/li&gt;
  &lt;li&gt;avere lo stesso obiettivo&lt;/li&gt;
  &lt;li&gt;persone che si fanno guidare dai “numeri” e non dai sentimenti.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Una coppia di sposi &lt;a href=&quot;http://fundersandfounders.com/startup-dirty-laundry-conflicts-that-kill-partnerships/&quot;&gt;litiga in media 321 volte in un anno&lt;/a&gt; (Statistiche USA eh, io e mia moglie litighiamo molto meno 😂) eppure nel migliore dei casi restano insieme per tutta la vita; Tra fondatori di una startup deve esserci un grado di alchimia più forte, visto che in questo caso non c’è amore ma ambizione.&lt;/p&gt;

&lt;p&gt;E qui andiamo a finire su un’altra fissa dei founder: &lt;strong&gt;sono così convinto che debba funzionare, che funzionerà&lt;/strong&gt;. Purtroppo non funziona così. Lo startupper eccellente fa esperimenti continui, verifica con i numeri che le sue ipotesi erano corrette, e se sono sbagliate, cambia modello di business.&lt;/p&gt;

&lt;h2 id=&quot;perchè-non-riesco-a-trovare-sviluppatori-per-la-mia-startup&quot;&gt;Perchè non riesco a trovare sviluppatori per la mia startup?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tutti quelli che contatto mi dicono che sono impegnati o che non stanno valutando di cambiare lavoro. Io però offro di diventare capi in un’azienda che sarà anche loro. Perchè non accettano?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I motivi possono essere tanti e diversi. Ad esempio:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Il rischio&lt;/strong&gt;. Lo sviluppatore non vede prospettive nell’idea proposta e teme di rimanere con nulla in mano nel giro di poco.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;La sensazione di inadeguatezza.&lt;/strong&gt; Chi sono io per mettermi a fare il “capo” in una startup?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;La mancanza di risparmi accantonati&lt;/strong&gt;. Senza soldi, è impossibile lavorare per un lungo periodo senza entrate.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Quando si propone uno stipendio, questo è molto basso&lt;/strong&gt;. Un altro motivo per cui bisogna cercare tra i neolaureati.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Quando lo stipendio è basso, si propongono le equity&lt;/strong&gt;. Per me le equity di un progetto in cui non credo valgono zero.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Perché sembra che il grosso del lavoro lo debba fare proprio io&lt;/strong&gt;. Se il mio fantomatico CEO dice di aver fatto “tutto”, tranne il prodotto, mentre io svilupperò lui che fa?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Perchè io a questo CEO non lo conosco e non so se mi sta antipatico&lt;/strong&gt;. Come fai a &lt;em&gt;fidanzarti&lt;/em&gt; con uno che non conosci?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;e-possibile-superare-questi-problemi-troverò-sviluppatori-per-la-mia-idea&quot;&gt;E’ possibile superare questi problemi? Troverò sviluppatori per la mia idea?&lt;/h2&gt;

&lt;p&gt;Ho dei consigli a riguardo, non posso garantire nulla, ma certe cose funzionano meglio di altre. Ne parlerò in futuro. Intanto, se avete critiche, suggerimenti o impressioni, i commenti sono qui sotto.&lt;/p&gt;

</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/06/09/we-waglio-vuoi-venire-a-lavorare-nella-mia-startup.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>We' waglio', vuoi venire a lavorare nella mia startup?</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" We' waglio', vuoi venire a lavorare nella mia startup? ">
                          <figcaption>We' waglio', vuoi venire a lavorare nella mia startup?</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-06-09 09:20:50 UTC">Fri, 09 Jun 2017 09:20:50 +0000</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Ricevo almeno <strong>due richieste al mese</strong> per collaborare con startup. 
Più o meno il copione è sempre lo stesso:</p>

<ul>
  <li><em>“Ciao Michele, non ci conosciamo, ma ti ho trovato on line e ho pensato di parlarti della mia startup…“</em></li>
  <li>“Dimmi!”</li>
  <li><em>“Abbiamo questa idea rivoluzionaria, sorprenderemo il mondo, <strong>non abbiamo competitor</strong>, etc etc”</em></li>
  <li>“Fantastico! Dove posso vedere una demo?”</li>
  <li><em>“No, per ora non abbiamo ancora nulla. Anzi, stavamo proprio cercando qualcuno che voglia collaborare con noi per realizzarla… Per caso sei interessato?”</em></li>
  <li>“Quindi non c’è nulla? solo un’idea nella tua testa?”</li>
  <li><em>“C’è molto più dell’idea! Ho quasi fatto tutto, manca solo il prodotto!”</em></li>
  <li>“…”</li>
  <li><em>“Ti darò una quota importante della società, il 30%”</em></li>
  <li>“…”</li>
</ul>

<h2 id="michele-sei-troppo-spocchioso">Michele, sei troppo spocchioso</h2>

<p>Cari amici startupper, E’ dal 2012 che è esplosa la moda in Italia. Non so se ve ne ho mai parlato ma il mio rimpianto più grande è quello di <strong>non</strong> aver lavorato in una startup, da neolaureato; ma questa è un’altra storia che approfondirò successivamente.</p>

<p>Ciò che sbagliano tutte le persone che mi contattano (e giuro che sono <em>almeno</em> due al mese) è che pretendono che io debba rimanere affascinato dal loro racconto e quasi quasi debba chiedere io di lavorare per loro. Non funziona così.</p>

<p>Innanzitutto, <strong>la mia tolleranza al rischio si è abbassata di molto</strong>. Ora che ho una figlia ci penso 10 volte prima di prendere qualsiasi scelta che possa compromettere non la mia vita, ma la sua. Per questo motivo <em>il momento migliore in cui si deve lanciare (o lavorare per) una startup è subito dopo l’università</em>, quando si è ancora ragazzini e c’è un fantastico paracadute, ossia mamma &amp; papà.</p>

<p><strong>Lavorare per una startup implica un periodo più o meno lungo di lavoro senza un’entrata fissa</strong>, che in genere arriva quando si realizza una delle seguenti condizioni:</p>

<ul>
  <li>Un investitore ci mette i soldi</li>
  <li>La startup trova dei clienti paganti</li>
</ul>

<p>Trovare un investitore è difficile:  in Italia i fondi di investimento disposti a finanziare qualcosa si contano sulle dita di una mano. E se ti danno il cash, te lo danno quando hai almeno un MVP o una demo da mostrare.</p>

<p>Per questo penso che in Italia convenga partire con l’idea di fatturare prima possibile, per quanto difficile questo possa sembrare.</p>

<p>Motivo per cui scarto tutte le startup che non sanno rispondere alla domanda <strong>“come intendi fare soldi?”</strong>.</p>

<h2 id="tra-ceo-e-cto-deve-esserci-qualcosa-di-più-forte-di-un-matrimonio">Tra CEO e CTO deve esserci qualcosa di più forte di un matrimonio</h2>

<p>Leggevo un interessante articolo in cui si diceva che il 65% delle startup non falliscono perchè non trovano clienti o investitori, bensì perchè <a href="http://money.cnn.com/2014/02/24/smallbusiness/startups-entrepreneur-cofounder/index.html">i fondatori litigano</a>.</p>

<p>Mettiamoci nei panni dell’aspirante startupper che ho citato prima: contatta persone a caso su facebook chiedendogli di lavorare alla sua idea.</p>

<p>Troverà mai qualcuno? Gli auguro di si, ma non penso proprio che succederà in maniera così scontata. Ma chi?</p>

<p>Dovendo lavorare con qualcuno per lanciare un’azienda, con l’ansia costante di finire i soldi, le persone che fanno nascere una startup dovrebbero essere:</p>

<ul>
  <li>affiatate tra di loro</li>
  <li>avere lo stesso obiettivo</li>
  <li>persone che si fanno guidare dai “numeri” e non dai sentimenti.</li>
</ul>

<p>Una coppia di sposi <a href="http://fundersandfounders.com/startup-dirty-laundry-conflicts-that-kill-partnerships/">litiga in media 321 volte in un anno</a> (Statistiche USA eh, io e mia moglie litighiamo molto meno 😂) eppure nel migliore dei casi restano insieme per tutta la vita; Tra fondatori di una startup deve esserci un grado di alchimia più forte, visto che in questo caso non c’è amore ma ambizione.</p>

<p>E qui andiamo a finire su un’altra fissa dei founder: <strong>sono così convinto che debba funzionare, che funzionerà</strong>. Purtroppo non funziona così. Lo startupper eccellente fa esperimenti continui, verifica con i numeri che le sue ipotesi erano corrette, e se sono sbagliate, cambia modello di business.</p>

<h2 id="perchè-non-riesco-a-trovare-sviluppatori-per-la-mia-startup">Perchè non riesco a trovare sviluppatori per la mia startup?</h2>

<blockquote>
  <p>Tutti quelli che contatto mi dicono che sono impegnati o che non stanno valutando di cambiare lavoro. Io però offro di diventare capi in un’azienda che sarà anche loro. Perchè non accettano?</p>
</blockquote>

<p>I motivi possono essere tanti e diversi. Ad esempio:</p>

<ul>
  <li><strong>Il rischio</strong>. Lo sviluppatore non vede prospettive nell’idea proposta e teme di rimanere con nulla in mano nel giro di poco.</li>
  <li><strong>La sensazione di inadeguatezza.</strong> Chi sono io per mettermi a fare il “capo” in una startup?</li>
  <li><strong>La mancanza di risparmi accantonati</strong>. Senza soldi, è impossibile lavorare per un lungo periodo senza entrate.</li>
  <li><strong>Quando si propone uno stipendio, questo è molto basso</strong>. Un altro motivo per cui bisogna cercare tra i neolaureati.</li>
  <li><strong>Quando lo stipendio è basso, si propongono le equity</strong>. Per me le equity di un progetto in cui non credo valgono zero.</li>
  <li><strong>Perché sembra che il grosso del lavoro lo debba fare proprio io</strong>. Se il mio fantomatico CEO dice di aver fatto “tutto”, tranne il prodotto, mentre io svilupperò lui che fa?</li>
  <li><strong>Perchè io a questo CEO non lo conosco e non so se mi sta antipatico</strong>. Come fai a <em>fidanzarti</em> con uno che non conosci?</li>
</ul>

<h2 id="e-possibile-superare-questi-problemi-troverò-sviluppatori-per-la-mia-idea">E’ possibile superare questi problemi? Troverò sviluppatori per la mia idea?</h2>

<p>Ho dei consigli a riguardo, non posso garantire nulla, ma certe cose funzionano meglio di altre. Ne parlerò in futuro. Intanto, se avete critiche, suggerimenti o impressioni, i commenti sono qui sotto.</p>


                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>Cinque tool per migliorare la vostra developer experience</title>
        <link>https://michelenasti.com/2017/05/30/cinque-tool-per-migliorare-la-vostra-developer-experience.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/05/30/cinque-tool-per-migliorare-la-vostra-developer-experience.html</guid>
        <pubDate>Tue, 30 May 2017 12:07:50 +0000</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Riuscireste a svolgere il vostro lavoro senza la linea di comando? Se siete come me, ossia amanti di bash, ecco alcuni tool che vi permetteranno di migliorare la vostra &lt;em&gt;developer experience&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;mac-command-line&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mac&lt;/code&gt; command line&lt;/h3&gt;

&lt;p&gt;Si &lt;a href=&quot;https://github.com/guarinogabriel/Mac-CLI&quot;&gt;installa da linea di comando&lt;/a&gt; e crea un eseguibile, &lt;code class=&quot;highlighter-rouge&quot;&gt;mac&lt;/code&gt;, che permette di svolgere molte operazioni comuni con pochi click.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/demo-mac-cli.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Un esempio?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mac ip:public&lt;/code&gt; vi restituisce il vostro ip pubblico&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mac speedtest&lt;/code&gt; esegue uno speed test da linea di comando&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mac memory&lt;/code&gt; vi dice quale app sta consumando la vostra preziosa RAM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e tanti altri. Sono circa una cinquantina!&lt;/p&gt;

&lt;h3 id=&quot;oh-my-zsh-per-un-terminale-più-combattivo&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Oh-my-zsh&lt;/code&gt; per un terminale più combattivo&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;Oh-my-zsh&lt;/a&gt; è un tool che va a sovrascrivere un po’ di cose nei vostri file di configurazione di zsh. In particolare, modifica il funzionamento del prompt di comando mostrandovi le informazioni di cui più avete bisogno:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/oh-my-zsh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Insomma, avrete sott’occhio user, cartella in cui vi trovate, repository e branch, senza impazzire. E poi migliora anche l’utilizzo dell’autocompletamento (il TAB). Ci sono anche i plugin. Oh my!&lt;/p&gt;

&lt;h3 id=&quot;ngrok-per-testare-chiamate-api-dallesterno&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ngrok&lt;/code&gt;, per testare chiamate API dall’esterno&lt;/h3&gt;

&lt;p&gt;Dovete testare le chiamate di un sistema esterno verso il vostro software? Ad esempio, io ho avuto questa esigenza con le API di Paypal e Gestpay: a un certo punto questi sistemi dovevano notificarmi che i pagamenti erano andati a buon fine e mi avrebbero contattato agli indirizzi configurati.&lt;/p&gt;

&lt;p&gt;Come testare e come verificare il contenuto di queste chiamate? Facile, con &lt;a href=&quot;https://ngrok.com/&quot;&gt;ngrok&lt;/a&gt;: un tool che permette di creare un tunnel privato da un indirizzo http esterno.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ngrok.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Per farla facile, voi lanciate &lt;code class=&quot;highlighter-rouge&quot;&gt;ngrok http 8000&lt;/code&gt; e ngrok creerà un indirizzo tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;http://abc33344422.ngrok.io&lt;/code&gt;. Visitando questo indirizzo (anche dall’esterno della vostra rete privata!) ngrok redirige il traffico a&lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8000&lt;/code&gt;. Tutto ciò che passa per ngrok viene loggato e mostrato!&lt;/p&gt;

&lt;h3 id=&quot;git-flow-una-metodologia-per-semplificare-e-standardizzare-git-nel-team&quot;&gt;Git Flow, una metodologia per semplificare e standardizzare git nel team&lt;/h3&gt;

&lt;p&gt;Git flow è sia &lt;a href=&quot;https://github.com/nvie/gitflow&quot;&gt;un tool installabile da linea di comando&lt;/a&gt;, sia un approccio filosofico alla domanda “come lavorare in gruppo”.&lt;/p&gt;

&lt;p&gt;Git è un potentissimo sistema di versioning e branching; spero per voi che lo stiate già utilizzando altrimenti brrrr.&lt;/p&gt;

&lt;p&gt;Con git flow organizziamo il lavoro in due &lt;em&gt;meta-filoni&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;branch &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, che corrisponde alle versioni rilasciate&lt;/li&gt;
  &lt;li&gt;branch &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;, ossia dove gli sviluppatori committano le feature sviluppate, in attesa di rilascio.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oltre a questi due branch “generali”, ogni azione degli sviluppatori è realizzata creando nuovi branch:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gli sviluppi delle singole feature sui branch &lt;code class=&quot;highlighter-rouge&quot;&gt;feature/*tua_feature*&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;I rilasci (da develop a master) su branch chiamati &lt;code class=&quot;highlighter-rouge&quot;&gt;release/*nome_release*&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;le hotfix (fix, correzioni a bug, di versioni già rilasciate) su branch &lt;code class=&quot;highlighter-rouge&quot;&gt;hotfix/*nome_fix*&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Non ci avete capito niente? &lt;a href=&quot;https://danielkummer.github.io/git-flow-cheatsheet/&quot;&gt;Qui un grafico che prova a spiegare comandi e funzioni&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;bonus-postman-per-testare-le-interfacce-rest&quot;&gt;Bonus: Postman per testare le interfacce Rest&lt;/h3&gt;

&lt;p&gt;Ho iniziato a lavorare che c’era SOAP e si stava appena iniziando a parlare di REST. Qualche anno dopo, SOAP è diventato &lt;em&gt;legacy&lt;/em&gt; e tutti si dichiarano REST, chi bene e chi male.&lt;/p&gt;

&lt;p&gt;Ad ogni modo, è sorta l’esigenza di testare le interfacce REST e come testarle se non con &lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.getpostman.com/img/v2/logo-big.svg&quot; alt=&quot;Postman&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Questa è  una vera e propria applicazione &lt;em&gt;standalone&lt;/em&gt; che permette di effettuare ogni tipo di chiamata desideriate, GET - PUT - POST - HEAD etc. C’è la possibilità di salvare le chiamate, passare header aggiuntivi, visualizzare i dati in molti modi (ad esempio JSON), etc etc.&lt;/p&gt;

&lt;p&gt;Come dite? non è un tool da linea di comando? Avete ragione, ma questo è il mio blog e qui comando io 😂&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/05/30/cinque-tool-per-migliorare-la-vostra-developer-experience.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>Cinque tool per migliorare la vostra developer experience</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" Cinque tool per migliorare la vostra developer experience ">
                          <figcaption>Cinque tool per migliorare la vostra developer experience</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-05-30 12:07:50 UTC">Tue, 30 May 2017 12:07:50 +0000</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Riuscireste a svolgere il vostro lavoro senza la linea di comando? Se siete come me, ossia amanti di bash, ecco alcuni tool che vi permetteranno di migliorare la vostra <em>developer experience</em>.</p>

<h3 id="mac-command-line"><code class="highlighter-rouge">mac</code> command line</h3>

<p>Si <a href="https://github.com/guarinogabriel/Mac-CLI">installa da linea di comando</a> e crea un eseguibile, <code class="highlighter-rouge">mac</code>, che permette di svolgere molte operazioni comuni con pochi click.</p>

<p><img src="/images/demo-mac-cli.gif" alt="" /></p>

<p>Un esempio?</p>

<ul>
  <li><code class="highlighter-rouge">mac ip:public</code> vi restituisce il vostro ip pubblico</li>
  <li><code class="highlighter-rouge">mac speedtest</code> esegue uno speed test da linea di comando</li>
  <li><code class="highlighter-rouge">mac memory</code> vi dice quale app sta consumando la vostra preziosa RAM</li>
</ul>

<p>e tanti altri. Sono circa una cinquantina!</p>

<h3 id="oh-my-zsh-per-un-terminale-più-combattivo"><code class="highlighter-rouge">Oh-my-zsh</code> per un terminale più combattivo</h3>

<p><a href="https://github.com/robbyrussell/oh-my-zsh">Oh-my-zsh</a> è un tool che va a sovrascrivere un po’ di cose nei vostri file di configurazione di zsh. In particolare, modifica il funzionamento del prompt di comando mostrandovi le informazioni di cui più avete bisogno:</p>

<p><img src="/images/oh-my-zsh.jpg" alt="" /></p>

<p>Insomma, avrete sott’occhio user, cartella in cui vi trovate, repository e branch, senza impazzire. E poi migliora anche l’utilizzo dell’autocompletamento (il TAB). Ci sono anche i plugin. Oh my!</p>

<h3 id="ngrok-per-testare-chiamate-api-dallesterno"><code class="highlighter-rouge">ngrok</code>, per testare chiamate API dall’esterno</h3>

<p>Dovete testare le chiamate di un sistema esterno verso il vostro software? Ad esempio, io ho avuto questa esigenza con le API di Paypal e Gestpay: a un certo punto questi sistemi dovevano notificarmi che i pagamenti erano andati a buon fine e mi avrebbero contattato agli indirizzi configurati.</p>

<p>Come testare e come verificare il contenuto di queste chiamate? Facile, con <a href="https://ngrok.com/">ngrok</a>: un tool che permette di creare un tunnel privato da un indirizzo http esterno.</p>

<p><img src="/images/ngrok.png" alt="" /></p>

<p>Per farla facile, voi lanciate <code class="highlighter-rouge">ngrok http 8000</code> e ngrok creerà un indirizzo tipo <code class="highlighter-rouge">http://abc33344422.ngrok.io</code>. Visitando questo indirizzo (anche dall’esterno della vostra rete privata!) ngrok redirige il traffico a<code class="highlighter-rouge">localhost:8000</code>. Tutto ciò che passa per ngrok viene loggato e mostrato!</p>

<h3 id="git-flow-una-metodologia-per-semplificare-e-standardizzare-git-nel-team">Git Flow, una metodologia per semplificare e standardizzare git nel team</h3>

<p>Git flow è sia <a href="https://github.com/nvie/gitflow">un tool installabile da linea di comando</a>, sia un approccio filosofico alla domanda “come lavorare in gruppo”.</p>

<p>Git è un potentissimo sistema di versioning e branching; spero per voi che lo stiate già utilizzando altrimenti brrrr.</p>

<p>Con git flow organizziamo il lavoro in due <em>meta-filoni</em>:</p>

<ul>
  <li>branch <code class="highlighter-rouge">master</code>, che corrisponde alle versioni rilasciate</li>
  <li>branch <code class="highlighter-rouge">develop</code>, ossia dove gli sviluppatori committano le feature sviluppate, in attesa di rilascio.</li>
</ul>

<p>Oltre a questi due branch “generali”, ogni azione degli sviluppatori è realizzata creando nuovi branch:</p>

<ul>
  <li>Gli sviluppi delle singole feature sui branch <code class="highlighter-rouge">feature/*tua_feature*</code></li>
  <li>I rilasci (da develop a master) su branch chiamati <code class="highlighter-rouge">release/*nome_release*</code></li>
  <li>le hotfix (fix, correzioni a bug, di versioni già rilasciate) su branch <code class="highlighter-rouge">hotfix/*nome_fix*</code>.</li>
</ul>

<p>Non ci avete capito niente? <a href="https://danielkummer.github.io/git-flow-cheatsheet/">Qui un grafico che prova a spiegare comandi e funzioni</a>.</p>

<h3 id="bonus-postman-per-testare-le-interfacce-rest">Bonus: Postman per testare le interfacce Rest</h3>

<p>Ho iniziato a lavorare che c’era SOAP e si stava appena iniziando a parlare di REST. Qualche anno dopo, SOAP è diventato <em>legacy</em> e tutti si dichiarano REST, chi bene e chi male.</p>

<p>Ad ogni modo, è sorta l’esigenza di testare le interfacce REST e come testarle se non con <a href="https://www.getpostman.com/">Postman</a>?</p>

<p><img src="https://www.getpostman.com/img/v2/logo-big.svg" alt="Postman" /></p>

<p>Questa è  una vera e propria applicazione <em>standalone</em> che permette di effettuare ogni tipo di chiamata desideriate, GET - PUT - POST - HEAD etc. C’è la possibilità di salvare le chiamate, passare header aggiuntivi, visualizzare i dati in molti modi (ad esempio JSON), etc etc.</p>

<p>Come dite? non è un tool da linea di comando? Avete ragione, ma questo è il mio blog e qui comando io 😂</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>I colloqui di lavoro nelle Big</title>
        <link>https://michelenasti.com/2017/05/22/i-colloqui-di-lavoro-nelle-big.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/05/22/i-colloqui-di-lavoro-nelle-big.html</guid>
        <pubDate>Mon, 22 May 2017 15:08:19 +0000</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Recentemente sono stato speaker all’evento &lt;a href=&quot;https://www.meetup.com/it-IT/GDGCampania/events/239723850/&quot;&gt;pre-Google I/O&lt;/a&gt; organizzato dal &lt;a href=&quot;http://gdgcampania.com&quot;&gt;Google Developers Group Campania&lt;/a&gt;, a Napoli.&lt;/p&gt;

&lt;p&gt;Il mio talk verteva sui colloqui di lavoro delle aziende top, e qui ci sta bene un bel disclaimer: &lt;em&gt;non ho mai fatto colloqui per aziende top  - tranne un piccolo frangente con Amazon&lt;/em&gt;. Ma ho letto molto sull’argomento, e ho chiesto in giro ad alcuni amici che hanno fatto le selezioni per queste aziende, quindi avevo un po’ di materiale che era bello condividere.&lt;/p&gt;

&lt;iframe src=&quot;https://docs.google.com/presentation/d/1eQce7aEOl8qaGPbmhQVmUQb99Sf2bioBJhmuEER4_B8/embed?start=false&amp;amp;loop=false&amp;amp;delayms=60000&quot; frameborder=&quot;0&quot; width=&quot;480&quot; height=&quot;389&quot; allowfullscreen=&quot;true&quot; mozallowfullscreen=&quot;true&quot; webkitallowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Una parte del talk riguardava alcuni “rompicapi” che in passato, più che oggi, venivano sottoposti agli aspiranti candidati. Fermo restando che agli intervistatori non interessa sapere la risposta (ammesso che esista!), semmai vogliono vedere in che modo approcciate i problemi, che ragionamenti fate, insomma quanta creatività avete.&lt;/p&gt;

&lt;p&gt;Torno a ribadire: queste domande sono “rare” e tutte le persone in carne ed ossa con cui ho parlato non le hanno ricevute; tuttavia, dato che esiste un libro sull’argomento (&lt;a href=&quot;http://amzn.to/2rKTgbo&quot;&gt;“sei abbastanza sveglio per lavorare in google?”, di William Poundstone&lt;/a&gt;), e considerato che sono un appassionato di indovinelli, non ho potuto ignorare.&lt;/p&gt;

&lt;p&gt;A fine talk molti sono venuti per chiedermi le “soluzioni” (che ripeto: non sempre esistono) o gli approcci; altri sono venuti a pormi degli indovinelli, ai quali per mia fortuna sono riuscito a trovare la risposta in tempo (ed evitare la figura di merda 😅 ).&lt;/p&gt;

&lt;p&gt;Eccovene alcuni!&lt;/p&gt;

&lt;h3 id=&quot;dado-senza-dado&quot;&gt;Dado senza dado&lt;/h3&gt;

&lt;p&gt;Sai simulare un dado con una monetina? Puoi lanciare la moneta più volte.&lt;/p&gt;

&lt;h3 id=&quot;i-filosofi-bugiardi&quot;&gt;I Filosofi bugiardi&lt;/h3&gt;

&lt;p&gt;Attorno a un tavolo sono seduti tanti filosofi. Alcuni dicono sempre la verità; altri solo bugie.&lt;/p&gt;

&lt;p&gt;A turno, ogni filosofo prende la parola e dice: “Il filosofo alla mia sinistra è un bugiardo!”&lt;/p&gt;

&lt;p&gt;Quando tutti i filosofi hanno espresso questo importantissimo concetto, prende la parola un altro filosofo ed esclama: “siamo 21 seduti a questo tavolo!”&lt;/p&gt;

&lt;p&gt;Il suo vicino ribatte: “Non è vero! Siamo 22!”&lt;/p&gt;

&lt;p&gt;Che diamine stanno dicendo?! Quanti sono? Chi ha ragione? Come sono seduti?&lt;/p&gt;

&lt;h2 id=&quot;le-risposte-di-mia-moglie&quot;&gt;Le risposte di mia moglie&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Dado senza dado:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;Con la moneta entro in un negozio e compro il dado.&amp;nbsp;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Problema dei filosofi bugiardi:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;Cambio tavolo: vado a sedermi da un'altra parte.&amp;nbsp;&lt;/blockquote&gt;

&lt;p&gt;Posso dirvi che in aziende come Google queste risposte non sarebbero state solo degli &lt;em&gt;ice-breaker&lt;/em&gt;, ma verrebbero probabilmente considerate nel giudizio globale del&lt;span style=&quot;font-size: 1rem;&quot;&gt; candidato. &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-size: 1rem;&quot;&gt;Tuttavia non basta per superare il colloquio 😅  Scrivi la tua risposta nei commenti ;) &lt;/span&gt;&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/05/22/i-colloqui-di-lavoro-nelle-big.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>I colloqui di lavoro nelle Big</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" I colloqui di lavoro nelle Big ">
                          <figcaption>I colloqui di lavoro nelle Big</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-05-22 15:08:19 UTC">Mon, 22 May 2017 15:08:19 +0000</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Recentemente sono stato speaker all’evento <a href="https://www.meetup.com/it-IT/GDGCampania/events/239723850/">pre-Google I/O</a> organizzato dal <a href="http://gdgcampania.com">Google Developers Group Campania</a>, a Napoli.</p>

<p>Il mio talk verteva sui colloqui di lavoro delle aziende top, e qui ci sta bene un bel disclaimer: <em>non ho mai fatto colloqui per aziende top  - tranne un piccolo frangente con Amazon</em>. Ma ho letto molto sull’argomento, e ho chiesto in giro ad alcuni amici che hanno fatto le selezioni per queste aziende, quindi avevo un po’ di materiale che era bello condividere.</p>

<iframe src="https://docs.google.com/presentation/d/1eQce7aEOl8qaGPbmhQVmUQb99Sf2bioBJhmuEER4_B8/embed?start=false&amp;loop=false&amp;delayms=60000" frameborder="0" width="480" height="389" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>

<p>Una parte del talk riguardava alcuni “rompicapi” che in passato, più che oggi, venivano sottoposti agli aspiranti candidati. Fermo restando che agli intervistatori non interessa sapere la risposta (ammesso che esista!), semmai vogliono vedere in che modo approcciate i problemi, che ragionamenti fate, insomma quanta creatività avete.</p>

<p>Torno a ribadire: queste domande sono “rare” e tutte le persone in carne ed ossa con cui ho parlato non le hanno ricevute; tuttavia, dato che esiste un libro sull’argomento (<a href="http://amzn.to/2rKTgbo">“sei abbastanza sveglio per lavorare in google?”, di William Poundstone</a>), e considerato che sono un appassionato di indovinelli, non ho potuto ignorare.</p>

<p>A fine talk molti sono venuti per chiedermi le “soluzioni” (che ripeto: non sempre esistono) o gli approcci; altri sono venuti a pormi degli indovinelli, ai quali per mia fortuna sono riuscito a trovare la risposta in tempo (ed evitare la figura di merda 😅 ).</p>

<p>Eccovene alcuni!</p>

<h3 id="dado-senza-dado">Dado senza dado</h3>

<p>Sai simulare un dado con una monetina? Puoi lanciare la moneta più volte.</p>

<h3 id="i-filosofi-bugiardi">I Filosofi bugiardi</h3>

<p>Attorno a un tavolo sono seduti tanti filosofi. Alcuni dicono sempre la verità; altri solo bugie.</p>

<p>A turno, ogni filosofo prende la parola e dice: “Il filosofo alla mia sinistra è un bugiardo!”</p>

<p>Quando tutti i filosofi hanno espresso questo importantissimo concetto, prende la parola un altro filosofo ed esclama: “siamo 21 seduti a questo tavolo!”</p>

<p>Il suo vicino ribatte: “Non è vero! Siamo 22!”</p>

<p>Che diamine stanno dicendo?! Quanti sono? Chi ha ragione? Come sono seduti?</p>

<h2 id="le-risposte-di-mia-moglie">Le risposte di mia moglie</h2>

<p><strong>Dado senza dado:</strong></p>

<blockquote>Con la moneta entro in un negozio e compro il dado.&nbsp;</blockquote>

<p><strong>Problema dei filosofi bugiardi:</strong></p>

<blockquote>Cambio tavolo: vado a sedermi da un'altra parte.&nbsp;</blockquote>

<p>Posso dirvi che in aziende come Google queste risposte non sarebbero state solo degli <em>ice-breaker</em>, ma verrebbero probabilmente considerate nel giudizio globale del<span style="font-size: 1rem;"> candidato. </span></p>

<p><span style="font-size: 1rem;">Tuttavia non basta per superare il colloquio 😅  Scrivi la tua risposta nei commenti ;) </span></p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>Agile? No grazie, noi siamo Lean</title>
        <link>https://michelenasti.com/2017/05/04/agile-no-grazie-preferisco-lean.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/05/04/agile-no-grazie-preferisco-lean.html</guid>
        <pubDate>Thu, 04 May 2017 00:00:00 +0000</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Agile, agile, agile… ormai tutti fanno Agile, implementando un framework tipo Scrum (che è uno dei possibili modi di essere Agile).&lt;/p&gt;

&lt;p&gt;Per dare una definizione: siete &lt;em&gt;Agile&lt;/em&gt;® se la vostra metodologia di sviluppo segue il &lt;a href=&quot;http://agilemanifesto.org/iso/it/manifesto.html&quot;&gt;&lt;em&gt;Manifesto Agile&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tuttavia, è facile prendere un framework (ripeto: Scrum) e sputtanarlo per tirare fuori qualcosa che non va. Spesso ciò accade quando il management continua a ragionare a delivery fisse, chi-fa-cosa, butta-a-mare-la-qualità-dobbiamo-consegnà, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/geografia_metodologie.png&quot; alt=&quot;Quest'immagine prova a spiegare com'è fatto il mondo&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ma-in-questo-post-dovevi-parlare-di-lean&quot;&gt;Ma in questo post dovevi parlare di LEAN&lt;/h2&gt;

&lt;p&gt;Avete ragione.&lt;/p&gt;

&lt;p&gt;Ritorniamo sulle definizioni. &lt;em&gt;Lean&lt;/em&gt; (in italiano: magro, scarno) è un termine preso in prestito dal settore manifatturiero, e consiste in una serie di principi da seguire per ottenere &lt;em&gt;qualità, velocità &amp;amp; soddisfazione del cliente&lt;/em&gt;. (Stesse finalità di Agile!)&lt;/p&gt;

&lt;p&gt;Il punto è che i principi base del &lt;em&gt;Lean thinking&lt;/em&gt; non sono filosofici, ma pratici. Vediamoli:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Eliminate Waste&lt;/strong&gt;: fate riunioni che non servono? Non fatele. Scrivete documenti che nessuno leggerà? Non scriveteli. Più chiaro di così!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Build Quality In&lt;/strong&gt;: Mettere in pratica tutte quelle pratiche che portano a evitare i bug, o a correggerli subito. Correggerli dopo è sempre peggio.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Create Knowledge&lt;/strong&gt;: All’inizio di un progetto difficilmente avrete idea di cosa vuole il cliente. Inoltre, ciò che sapete voi è molto diverso da ciò che conosce il vostro collega. Creare conoscenza significa soprattutto &lt;em&gt;condividerla&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Defer Commitment&lt;/strong&gt;: Prendere le decisioni all’ultmo momento utile (ossia quando non sono più rinviabili) permette di avere la maggior conoscenza possibile, e quindi di prendere decisioni migliori.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Deliver Fast&lt;/strong&gt;: Prima fate vedere il prodotto al cliente, prima saprete se è quello che vuole.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Respect People&lt;/strong&gt;: non significa solo evitare di mandare a cagare il tuo collega; significa anche rispettare le scelte del gruppo, riconoscerne gli sforzi e aiutarli quando gli sforzi non producono frutti.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Optimize the Whole&lt;/strong&gt;. Ottimizzare il processo, nella sua interezza, significa applicare i punti precedenti. Si deve ottimizzare continuamente, a ogni livello.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fin qui era filosofia. Ma praticamente che dobbiamo fare?&lt;/p&gt;

&lt;h2 id=&quot;lean-in-pratica-gli-step-zero&quot;&gt;Lean in pratica: gli step zero&lt;/h2&gt;

&lt;p&gt;Per essere Lean nel mondo del software ci sono due &lt;strong&gt;step zero&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Source code management&lt;/strong&gt; - perchè il codice non si condivide più via email o via floppy da un bel pò. Tools come SVN (antichi!) o GIT dovreste conoscerli tutti ormai.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Scripted builds&lt;/strong&gt; - il vostro prodotto deve essere generabile a partire da &lt;strong&gt;un solo comando&lt;/strong&gt;. Ancora meglio: ogni volta che committate, un ambiente di &lt;em&gt;continuous integration&lt;/em&gt; dovrebbe far partire una build automatica e verificare che sia tutto ok. Non dimenticate di mandare una mail a chi ha rotto la build ;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Principi Lean rispettati&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;create knowledge&lt;/strong&gt; - il codice è in un solo posto&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;eliminate waste&lt;/strong&gt; - nessun lavoro manuale per compilare e deployare il progetto!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;build quality in&lt;/strong&gt; - l’automazione elimina possibili cause d’errore.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vediamo ora altre pratiche che possono aiutarvi a diventare &lt;em&gt;Lean&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;il-meeting-giornaliero&quot;&gt;Il meeting giornaliero&lt;/h3&gt;

&lt;p&gt;Se dovessi scegliere un unico punto da implementare, tra tutti i punti di questo articolo, il meeting giornaliero è sicuramente quello che sceglierei io. &lt;em&gt;La comunicazione tra membri del team è dannatamente importante.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Per fare un daily meeting perfetto bisogna:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;farlo tutti i giorni, alla stessa ora&lt;/li&gt;
  &lt;li&gt;non deve superare 15 minuti&lt;/li&gt;
  &lt;li&gt;partecipano e parlano tutti&lt;/li&gt;
  &lt;li&gt;quando parla qualcuno non si fanno domande e non si interrompe&lt;/li&gt;
  &lt;li&gt;si risponde a tre domande: &lt;em&gt;cosa ho fatto ieri?&lt;/em&gt;, &lt;em&gt;cosa farò oggi?&lt;/em&gt;, &lt;em&gt;che problemi ho avuto?&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;facoltativo&lt;/em&gt;: fare il meeting in piedi (così durerà anche meno di 15 minuti)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Principi Lean rispettati&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;respect people&lt;/em&gt; - stiamo mettendo il team al centro dello sviluppo. Tutti si sentiranno di far parte di una squadra.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;create knowledge&lt;/em&gt; - Parlare di ciò che si sta facendo è il modo migliore di creare una conoscenza condivisa.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;testing-automatico&quot;&gt;Testing automatico&lt;/h3&gt;
&lt;p&gt;Qui parliamo dell’&lt;strong&gt;esecuzione automatica dei test a partire da un singolo comando&lt;/strong&gt;, con tanto di report a fine esecuzione. In questo modo avremo test che sono sempre eseguiti nello stesso modo e che non sono soggetti a errori umani.&lt;/p&gt;

&lt;p&gt;I test dovrebbero essere lanciati sia dai singoli sviluppatori mentre realizzano le feature, che dall’ambiene di continuous integration quando committiamo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principi Lean rispettati&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Build Quality In&lt;/em&gt; - test automatici eseguiti regolarmente aiutano a prevenire i difetti.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Eliminate Waste&lt;/em&gt; - i bug vengono trovati prima, e quindi corretti prima.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Create Knowledge&lt;/em&gt; - i test sono un modo per documentare come funziona il codice.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;continuous-integration&quot;&gt;Continuous Integration&lt;/h3&gt;
&lt;p&gt;La &lt;strong&gt;continuous integration&lt;/strong&gt; è una pratica che consiste nell’integrare i piccoli cambiamenti al codice in maniera frequente. Ciò cerca di ridurre, o addirittura eliminare, la fase di integrazione post-sviluppo.&lt;/p&gt;

&lt;p&gt;Per farlo:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Usate una macchina (vera o virtuale) per il sistema di CI.&lt;/li&gt;
  &lt;li&gt;a ogni commit, la CI deve far partire una build e i test.&lt;/li&gt;
  &lt;li&gt;I developer devono aggiornare il codice una volta al giorno; una volta all’ora è meglio.&lt;/li&gt;
  &lt;li&gt;Le build fallite devono essere subito sistemate.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Principi Lean rispettati&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Build Quality In&lt;/em&gt; - in Continuous Integration, siamo sicuri che il codice sia sempre funzionante.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Eliminate Waste&lt;/em&gt; - E’ più efficiente integrare continuamente piccole modifiche che una singola grande fase di integrazione finale.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;less-code&quot;&gt;Less Code&lt;/h3&gt;
&lt;p&gt;“Less Code” significa &lt;strong&gt;scrivere solo il codice necessario per implementare la funzionalità richiesta&lt;/strong&gt;. Qui stiamo ribadendo il principio della semplicità: se una cosa è piccola è anche facile capirla; un codice sorgente vasto diventa difficile non solo da capire, ma anche testare e debuggare. Scrivere (&lt;em&gt;poco&lt;/em&gt;) codice in modo semplice è un’arte. Per poter scrivere meno codice bisogna:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;eliminare codice inutile&lt;/strong&gt;. Facile a dirsi 😊 In pratica bisogna trovare il codice, o le &lt;em&gt;forze&lt;/em&gt; che creano il codice non necessario, ed eliminarlo. Ogni codice aggiunto al repository deve essere &lt;em&gt;giustificabile&lt;/em&gt;. Sviluppa solo per l’iterazione o il task corrente, non per quelle del futuro che verrà. (Verrà?)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Migliorare l’efficienza del codice&lt;/strong&gt;. Ciò si fa applicando degli standard o comunque le best practices.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Principi Lean rispettati&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Build Quality In&lt;/em&gt; - Codice che fa quello che deve fare. Cosa vuoi di più?&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Eliminate Waste&lt;/em&gt; - Codice che non serve, o mega-design-patterns che non si capiscono (o che si capiscono solo nella mente dell’autore), sono scoraggiati.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;short-iterations&quot;&gt;Short Iterations&lt;/h3&gt;

&lt;p&gt;Prima si sviluppavano applicazioni con un ciclo di rilascio da 6 mesi a 1 anno; adesso la moda è 15/30 giorni. Questo tipo di rilasci permette ai clienti di capire se stiamo realizzando davvero il software di cui hanno bisogno, e permette di capirlo &lt;em&gt;prima che sia troppo tardi&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principi Lean rispettati&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Eliminate Waste&lt;/em&gt; - rilasci frequenti permettono di concentrarsi solo su ciò che serve davvero.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Deliver Fast&lt;/em&gt; - Il nuovo codice viene rilasciato al cliente ad intervalli regolari.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;customer-partecipation&quot;&gt;Customer Partecipation&lt;/h3&gt;

&lt;p&gt;In passato il cliente veniva coinvolto solo per le specifiche, a inizio progetto, e poi ci si vedeva alla fine per mostrare il risultato. E lì sentivi frasi “ma non era quello che volevo” 😫&lt;/p&gt;

&lt;p&gt;Usando un approccio &lt;em&gt;Lean&lt;/em&gt; invece il cliente fa parte del team. E’ il cliente a fornire i requisiti, a prioritizzarli, e ad accettarli a fine iterazione.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principi Lean rispettati&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Create Knowledge&lt;/em&gt; - Attraverso la collaborazione col cliente, i requisiti vengono determinati prima e meglio.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Defer Commitment&lt;/em&gt; - Siccome il cliente è coinvolto nel processo, è possibile prendere le decisioni architetturali solo quando servono.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lean-è-uguale-o-diverso-da-agile&quot;&gt;Lean è uguale o diverso da Agile?&lt;/h2&gt;

&lt;p&gt;Chi ha fatto un po’ di Agile starà ora dicendo: “Ma tutte queste cose le facciamo anche noi!”. Già! Dov’è la differenza?&lt;/p&gt;

&lt;p&gt;Le differenze sono sostanzialmente due: &lt;em&gt;scope&lt;/em&gt; e &lt;em&gt;focus&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;Agile&lt;/strong&gt; lo scopo è di migliorare lo sviluppo del software e si focalizza sull’adattabilità e sul rilascio veloce. Oppure, come piace dire a me, si parte dalla filosofia e si trovano i mezzi per metterla in pratica.&lt;/p&gt;

&lt;p&gt;Nell’approccio &lt;strong&gt;Lean&lt;/strong&gt; invece si guarda al quadro generale, e ci si focalizza più sulle pratiche (che sono il punto di partenza!) che sulla filosofia. Infatti &lt;strong&gt;non è obbligatorio mettere in pratica contemporaneamente tutte le pratiche&lt;/strong&gt;, si può tranquillamente iniziare a integrarle una alla volta; e soprattutto, si può seguire qualsiasi tipo di metodologia ma usare le pratiche &lt;em&gt;Lean&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Per questo, &lt;strong&gt;negli ultimi team con cui ho collaborato&lt;/strong&gt;, piuttosto che mettere insieme tutte le cerimonie di Scrum &lt;strong&gt;ho preferito privilegiare quelle pratiche che sicuramente avrebbero portato un valore effettivo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Non avrei conosciuto le pratiche Lean senza Agile. &lt;strong&gt;Non potrei fare Agile senza mettere in pratica i principi Lean. Al contrario, si può essere Lean senza essere Agile&lt;/strong&gt;. Questi due mondi si sovrappongono per molte cose e sono, alla fine della fiera, &lt;strong&gt;complementari tra loro&lt;/strong&gt;.&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/05/04/agile-no-grazie-preferisco-lean.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>Agile? No grazie, noi siamo Lean</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" Agile? No grazie, noi siamo Lean ">
                          <figcaption>Agile? No grazie, noi siamo Lean</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-05-04 00:00:00 UTC">Thu, 04 May 2017 00:00:00 +0000</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Agile, agile, agile… ormai tutti fanno Agile, implementando un framework tipo Scrum (che è uno dei possibili modi di essere Agile).</p>

<p>Per dare una definizione: siete <em>Agile</em>® se la vostra metodologia di sviluppo segue il <a href="http://agilemanifesto.org/iso/it/manifesto.html"><em>Manifesto Agile</em></a>.</p>

<p>Tuttavia, è facile prendere un framework (ripeto: Scrum) e sputtanarlo per tirare fuori qualcosa che non va. Spesso ciò accade quando il management continua a ragionare a delivery fisse, chi-fa-cosa, butta-a-mare-la-qualità-dobbiamo-consegnà, etc.</p>

<p><img src="/images/geografia_metodologie.png" alt="Quest'immagine prova a spiegare com'è fatto il mondo" /></p>

<h2 id="ma-in-questo-post-dovevi-parlare-di-lean">Ma in questo post dovevi parlare di LEAN</h2>

<p>Avete ragione.</p>

<p>Ritorniamo sulle definizioni. <em>Lean</em> (in italiano: magro, scarno) è un termine preso in prestito dal settore manifatturiero, e consiste in una serie di principi da seguire per ottenere <em>qualità, velocità &amp; soddisfazione del cliente</em>. (Stesse finalità di Agile!)</p>

<p>Il punto è che i principi base del <em>Lean thinking</em> non sono filosofici, ma pratici. Vediamoli:</p>

<ul>
  <li><strong>Eliminate Waste</strong>: fate riunioni che non servono? Non fatele. Scrivete documenti che nessuno leggerà? Non scriveteli. Più chiaro di così!</li>
  <li><strong>Build Quality In</strong>: Mettere in pratica tutte quelle pratiche che portano a evitare i bug, o a correggerli subito. Correggerli dopo è sempre peggio.</li>
  <li><strong>Create Knowledge</strong>: All’inizio di un progetto difficilmente avrete idea di cosa vuole il cliente. Inoltre, ciò che sapete voi è molto diverso da ciò che conosce il vostro collega. Creare conoscenza significa soprattutto <em>condividerla</em>.</li>
  <li><strong>Defer Commitment</strong>: Prendere le decisioni all’ultmo momento utile (ossia quando non sono più rinviabili) permette di avere la maggior conoscenza possibile, e quindi di prendere decisioni migliori.</li>
  <li><strong>Deliver Fast</strong>: Prima fate vedere il prodotto al cliente, prima saprete se è quello che vuole.</li>
  <li><strong>Respect People</strong>: non significa solo evitare di mandare a cagare il tuo collega; significa anche rispettare le scelte del gruppo, riconoscerne gli sforzi e aiutarli quando gli sforzi non producono frutti.</li>
  <li><strong>Optimize the Whole</strong>. Ottimizzare il processo, nella sua interezza, significa applicare i punti precedenti. Si deve ottimizzare continuamente, a ogni livello.</li>
</ul>

<p>Fin qui era filosofia. Ma praticamente che dobbiamo fare?</p>

<h2 id="lean-in-pratica-gli-step-zero">Lean in pratica: gli step zero</h2>

<p>Per essere Lean nel mondo del software ci sono due <strong>step zero</strong>:</p>
<ul>
  <li><strong>Source code management</strong> - perchè il codice non si condivide più via email o via floppy da un bel pò. Tools come SVN (antichi!) o GIT dovreste conoscerli tutti ormai.</li>
  <li><strong>Scripted builds</strong> - il vostro prodotto deve essere generabile a partire da <strong>un solo comando</strong>. Ancora meglio: ogni volta che committate, un ambiente di <em>continuous integration</em> dovrebbe far partire una build automatica e verificare che sia tutto ok. Non dimenticate di mandare una mail a chi ha rotto la build ;)</li>
</ul>

<p><strong>Principi Lean rispettati</strong>:</p>
<ul>
  <li><strong>create knowledge</strong> - il codice è in un solo posto</li>
  <li><strong>eliminate waste</strong> - nessun lavoro manuale per compilare e deployare il progetto!</li>
  <li><strong>build quality in</strong> - l’automazione elimina possibili cause d’errore.</li>
</ul>

<p>Vediamo ora altre pratiche che possono aiutarvi a diventare <em>Lean</em>.</p>

<h3 id="il-meeting-giornaliero">Il meeting giornaliero</h3>

<p>Se dovessi scegliere un unico punto da implementare, tra tutti i punti di questo articolo, il meeting giornaliero è sicuramente quello che sceglierei io. <em>La comunicazione tra membri del team è dannatamente importante.</em></p>

<p>Per fare un daily meeting perfetto bisogna:</p>
<ul>
  <li>farlo tutti i giorni, alla stessa ora</li>
  <li>non deve superare 15 minuti</li>
  <li>partecipano e parlano tutti</li>
  <li>quando parla qualcuno non si fanno domande e non si interrompe</li>
  <li>si risponde a tre domande: <em>cosa ho fatto ieri?</em>, <em>cosa farò oggi?</em>, <em>che problemi ho avuto?</em></li>
  <li><em>facoltativo</em>: fare il meeting in piedi (così durerà anche meno di 15 minuti)</li>
</ul>

<p><strong>Principi Lean rispettati</strong>:</p>
<ul>
  <li><em>respect people</em> - stiamo mettendo il team al centro dello sviluppo. Tutti si sentiranno di far parte di una squadra.</li>
  <li><em>create knowledge</em> - Parlare di ciò che si sta facendo è il modo migliore di creare una conoscenza condivisa.</li>
</ul>

<h3 id="testing-automatico">Testing automatico</h3>
<p>Qui parliamo dell’<strong>esecuzione automatica dei test a partire da un singolo comando</strong>, con tanto di report a fine esecuzione. In questo modo avremo test che sono sempre eseguiti nello stesso modo e che non sono soggetti a errori umani.</p>

<p>I test dovrebbero essere lanciati sia dai singoli sviluppatori mentre realizzano le feature, che dall’ambiene di continuous integration quando committiamo.</p>

<p><strong>Principi Lean rispettati</strong>:</p>
<ul>
  <li><em>Build Quality In</em> - test automatici eseguiti regolarmente aiutano a prevenire i difetti.</li>
  <li><em>Eliminate Waste</em> - i bug vengono trovati prima, e quindi corretti prima.</li>
  <li><em>Create Knowledge</em> - i test sono un modo per documentare come funziona il codice.</li>
</ul>

<h3 id="continuous-integration">Continuous Integration</h3>
<p>La <strong>continuous integration</strong> è una pratica che consiste nell’integrare i piccoli cambiamenti al codice in maniera frequente. Ciò cerca di ridurre, o addirittura eliminare, la fase di integrazione post-sviluppo.</p>

<p>Per farlo:</p>
<ul>
  <li>Usate una macchina (vera o virtuale) per il sistema di CI.</li>
  <li>a ogni commit, la CI deve far partire una build e i test.</li>
  <li>I developer devono aggiornare il codice una volta al giorno; una volta all’ora è meglio.</li>
  <li>Le build fallite devono essere subito sistemate.</li>
</ul>

<p><strong>Principi Lean rispettati</strong>:</p>
<ul>
  <li><em>Build Quality In</em> - in Continuous Integration, siamo sicuri che il codice sia sempre funzionante.</li>
  <li><em>Eliminate Waste</em> - E’ più efficiente integrare continuamente piccole modifiche che una singola grande fase di integrazione finale.</li>
</ul>

<h3 id="less-code">Less Code</h3>
<p>“Less Code” significa <strong>scrivere solo il codice necessario per implementare la funzionalità richiesta</strong>. Qui stiamo ribadendo il principio della semplicità: se una cosa è piccola è anche facile capirla; un codice sorgente vasto diventa difficile non solo da capire, ma anche testare e debuggare. Scrivere (<em>poco</em>) codice in modo semplice è un’arte. Per poter scrivere meno codice bisogna:</p>

<ul>
  <li><strong>eliminare codice inutile</strong>. Facile a dirsi 😊 In pratica bisogna trovare il codice, o le <em>forze</em> che creano il codice non necessario, ed eliminarlo. Ogni codice aggiunto al repository deve essere <em>giustificabile</em>. Sviluppa solo per l’iterazione o il task corrente, non per quelle del futuro che verrà. (Verrà?)</li>
  <li><strong>Migliorare l’efficienza del codice</strong>. Ciò si fa applicando degli standard o comunque le best practices.</li>
</ul>

<p><strong>Principi Lean rispettati</strong>:</p>
<ul>
  <li><em>Build Quality In</em> - Codice che fa quello che deve fare. Cosa vuoi di più?</li>
  <li><em>Eliminate Waste</em> - Codice che non serve, o mega-design-patterns che non si capiscono (o che si capiscono solo nella mente dell’autore), sono scoraggiati.</li>
</ul>

<h3 id="short-iterations">Short Iterations</h3>

<p>Prima si sviluppavano applicazioni con un ciclo di rilascio da 6 mesi a 1 anno; adesso la moda è 15/30 giorni. Questo tipo di rilasci permette ai clienti di capire se stiamo realizzando davvero il software di cui hanno bisogno, e permette di capirlo <em>prima che sia troppo tardi</em>.</p>

<p><strong>Principi Lean rispettati</strong>:</p>
<ul>
  <li><em>Eliminate Waste</em> - rilasci frequenti permettono di concentrarsi solo su ciò che serve davvero.</li>
  <li><em>Deliver Fast</em> - Il nuovo codice viene rilasciato al cliente ad intervalli regolari.</li>
</ul>

<h3 id="customer-partecipation">Customer Partecipation</h3>

<p>In passato il cliente veniva coinvolto solo per le specifiche, a inizio progetto, e poi ci si vedeva alla fine per mostrare il risultato. E lì sentivi frasi “ma non era quello che volevo” 😫</p>

<p>Usando un approccio <em>Lean</em> invece il cliente fa parte del team. E’ il cliente a fornire i requisiti, a prioritizzarli, e ad accettarli a fine iterazione.</p>

<p><strong>Principi Lean rispettati</strong>:</p>
<ul>
  <li><em>Create Knowledge</em> - Attraverso la collaborazione col cliente, i requisiti vengono determinati prima e meglio.</li>
  <li><em>Defer Commitment</em> - Siccome il cliente è coinvolto nel processo, è possibile prendere le decisioni architetturali solo quando servono.</li>
</ul>

<h2 id="lean-è-uguale-o-diverso-da-agile">Lean è uguale o diverso da Agile?</h2>

<p>Chi ha fatto un po’ di Agile starà ora dicendo: “Ma tutte queste cose le facciamo anche noi!”. Già! Dov’è la differenza?</p>

<p>Le differenze sono sostanzialmente due: <em>scope</em> e <em>focus</em>.</p>

<p>In <strong>Agile</strong> lo scopo è di migliorare lo sviluppo del software e si focalizza sull’adattabilità e sul rilascio veloce. Oppure, come piace dire a me, si parte dalla filosofia e si trovano i mezzi per metterla in pratica.</p>

<p>Nell’approccio <strong>Lean</strong> invece si guarda al quadro generale, e ci si focalizza più sulle pratiche (che sono il punto di partenza!) che sulla filosofia. Infatti <strong>non è obbligatorio mettere in pratica contemporaneamente tutte le pratiche</strong>, si può tranquillamente iniziare a integrarle una alla volta; e soprattutto, si può seguire qualsiasi tipo di metodologia ma usare le pratiche <em>Lean</em>.</p>

<p>Per questo, <strong>negli ultimi team con cui ho collaborato</strong>, piuttosto che mettere insieme tutte le cerimonie di Scrum <strong>ho preferito privilegiare quelle pratiche che sicuramente avrebbero portato un valore effettivo</strong>.</p>

<p>Non avrei conosciuto le pratiche Lean senza Agile. <strong>Non potrei fare Agile senza mettere in pratica i principi Lean. Al contrario, si può essere Lean senza essere Agile</strong>. Questi due mondi si sovrappongono per molte cose e sono, alla fine della fiera, <strong>complementari tra loro</strong>.</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>&quot;Vorrei, ma ho paura che vada male&quot;	&amp;#58 come assumersi dei &quot;rischi intelligenti&quot;</title>
        <link>https://michelenasti.com/2017/04/21/vorrei-ma-ho-paura-che-vada-male-come-assumersi-dei-rischi-intelligenti.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/04/21/vorrei-ma-ho-paura-che-vada-male-come-assumersi-dei-rischi-intelligenti.html</guid>
        <pubDate>Fri, 21 Apr 2017 00:00:00 +0000</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Oggi vorrei parlarvi di &lt;strong&gt;come assumersi dei rischi intelligenti&lt;/strong&gt;. Intelligenti in che senso?!&lt;/p&gt;

&lt;p&gt;Questo post ce l’ho in testa da molto tempo, almeno da quando ho letto il libro &lt;a href=&quot;http://amzn.to/2oaDAB6&quot;&gt;Startup Of You&lt;/a&gt; di Reid Hoffman (fondatore di LinkedIn) e Ben Casnocha. Per i duri di comprendorio inglese qui c’è la &lt;a href=&quot;http://amzn.to/2oQsY92&quot;&gt;versione in Italiano&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nel libro gli autori spiegano cosa si può fare per &lt;strong&gt;conferire alla propria vita e alla propria carriera un atteggiamento “da startup”&lt;/strong&gt;: ci sono una lunga serie di consigli, discussioni, esempi, e insomma è uno dei libri che ho letto con più piacere.&lt;img src=&quot;/images/rischio-investimenti-definizione-749x400.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;i-rischi-intelligenti&quot;&gt;I rischi intelligenti&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Siamo abituati a pensare ai rischi come qualcosa di negativo&lt;/em&gt;: perdite di denaro sui mercati azionari, o guida di una moto senza casco. Ma il rischio non è un nemico; è qualcosa che fa intrinsecamente parte della nostra vita.&lt;/p&gt;

&lt;p&gt;Le situazioni rischiose, comunque, sono quelle in cui la possibilità che le cose vadano male è decisamente più alto del vantaggio che si ottiene se le cose vanno bene.&lt;/p&gt;

&lt;p&gt;Ad esempio, &lt;strong&gt;volare in aereo non è rischioso&lt;/strong&gt;, perché anche se lo scenario peggiore è &lt;em&gt;molto **doloroso&lt;/em&gt; la possibilità che questo accada è bassissima. Invece, il tempo di viaggio risparmiato è un dato di fatto.&lt;/p&gt;

&lt;p&gt;Alcuni imprenditori sono dei cowboy del rischio; tuttavia, &lt;strong&gt;ciò che distingue un imprenditore giudizioso da un semplice spavaldo non è l’alta tolleranza al rischio, ma l’abilità di saperlo valutare e gestire correttamente&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Il rischio, in un contesto come quello del lavoro, è correlato alle scelte che facciamo, e alla possibilità che qualcosa vada storto. Ad esempio, quando cambiamo lavoro, ci assumiamo il rischio che il nuovo possa essere anche peggiore del vecchio, e invochiamo tutte le divinità affinché non sia così!&lt;/p&gt;

&lt;p&gt;Ma non solo tutto ciò che facciamo comporta rischi; &lt;strong&gt;anche&lt;/strong&gt; &lt;strong&gt;ciò che NON facciamo è altamente rischioso&lt;/strong&gt;. Questo vale specialmente quando il mondo intorno a noi sta cambiando e richiede un nostro adattamento.&lt;/p&gt;

&lt;h2 id=&quot;valutare-i-rischi&quot;&gt;Valutare i rischi&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Valutare i rischi è difficile, ma non impossibile. Gli imprenditori lo fanno tutti i giorni.&lt;/strong&gt; Tuttavia, essi non usano analisi matematiche o economiche (degne di Wall Street!) per prendere decisioni; sinceramente, non dovremmo farlo neanche noi.&lt;/p&gt;

&lt;p&gt;Ecco alcuni princìpi guida:&lt;/p&gt;

&lt;h3 id=&quot;1-stiamo-esagerando-nella-valutazione&quot;&gt;1. stiamo esagerando nella valutazione?&lt;/h3&gt;

&lt;p&gt;Il primo passo nella valutazione di un rischio è ricordarsi che &lt;strong&gt;il caso peggiore probabilmente non è così brutto, o così probabile, come sembra&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;2-il-caso-peggiore-è-tollerabile&quot;&gt;2. Il caso peggiore è tollerabile?&lt;/h3&gt;

&lt;p&gt;Se accade il caso peggiore cosa succede alla nostra vita? La reputazione scenderà a livelli sotto zero, perderemo tutti i soldi, la carriera sarà definitivamente finita?&lt;/p&gt;

&lt;p&gt;Se nel caso peggiore accade che perdiamo &lt;em&gt;un po’&lt;/em&gt; di soldi, o veniamo licenziati (posto che riusciamo a trovare un altro lavoro subito), o rischi semplicemente di sentirti inadeguato, &lt;strong&gt;dovresti comunque provarci&lt;/strong&gt;. Almeno finché hai un &lt;a href=&quot;https://michelenasti.com/2015/11/serve-un-piano/&quot;&gt;solido Piano Z&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;3-puoi-cambiare-la-decisione-a-metà-dellopera-puoi-passare-al-piano-b&quot;&gt;3. Puoi cambiare la decisione a metà dell’opera? Puoi passare al piano B?&lt;/h3&gt;

&lt;p&gt;Quando vediamo che le cose si stanno mettendo male, possiamo fare delle scelte che ti permettono di tornare indietro e ricominciare?&lt;/p&gt;

&lt;h3 id=&quot;4-non-confondiamo-lincertezza-con-il-rischio&quot;&gt;4. Non confondiamo l’incertezza con il rischio&lt;/h3&gt;

&lt;p&gt;Nessuno può sapere come andrà prima del tempo. Ma questo non significa che l’incertezza sia un rischio! &lt;strong&gt;Le opportunità migliori sono quelle con i più grandi punti interrogativi&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;5-considera-la-tua-età-e-a-che-fase-della-tua-vita-ti-trovi-quali-saranno-i-rischi-tra-un-paio-danni&quot;&gt;5. Considera la tua età e a che fase della tua vita ti trovi. Quali saranno i rischi tra un paio d’anni?&lt;/h3&gt;

&lt;p&gt;Fallire da ragazzi è considerato formativo; è per questo che sono i ventenni a fondare le aziende più strampalate.&lt;/p&gt;

&lt;p&gt;Man mano che invecchi, la tua percezione del rischio cambia. Arrivano i bambini, la casa, l’auto, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Meglio fare qualcosa di rischioso prima che sia troppo tardi&lt;/strong&gt; ;)&lt;/p&gt;

&lt;h2 id=&quot;facciamo-un-rapido-test&quot;&gt;Facciamo un rapido test…&lt;/h2&gt;

&lt;p&gt;Prendetevi 30 secondi per ogni punto sottostante. Provate a immaginare i pro e i contro delle seguenti situazioni. Considerati i cinque punti espressi precedentemente, come cambierebbe la tua vita se:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;trovi un lavoro fantastico e strapagato ma è negli USA&lt;/li&gt;
  &lt;li&gt;la tua azienda smette di pagare gli stipendi&lt;/li&gt;
  &lt;li&gt;inizi a dirigere un team&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Questo semplice esercizio mentale magari vi farà riflettere su come percepite il rischio; nel mio caso mi ha aiutato a fare scelte più consapevoli nel mondo del lavoro.&lt;/p&gt;

&lt;p&gt;In bocca al rischio ;)&lt;/p&gt;

</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/04/21/vorrei-ma-ho-paura-che-vada-male-come-assumersi-dei-rischi-intelligenti.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>&quot;Vorrei, ma ho paura che vada male&quot;	&amp;#58 come assumersi dei &quot;rischi intelligenti&quot;</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" "Vorrei, ma ho paura che vada male"	&#58 come assumersi dei "rischi intelligenti" ">
                          <figcaption>"Vorrei, ma ho paura che vada male"	&#58 come assumersi dei "rischi intelligenti"</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-04-21 00:00:00 UTC">Fri, 21 Apr 2017 00:00:00 +0000</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Oggi vorrei parlarvi di <strong>come assumersi dei rischi intelligenti</strong>. Intelligenti in che senso?!</p>

<p>Questo post ce l’ho in testa da molto tempo, almeno da quando ho letto il libro <a href="http://amzn.to/2oaDAB6">Startup Of You</a> di Reid Hoffman (fondatore di LinkedIn) e Ben Casnocha. Per i duri di comprendorio inglese qui c’è la <a href="http://amzn.to/2oQsY92">versione in Italiano</a>.</p>

<p>Nel libro gli autori spiegano cosa si può fare per <strong>conferire alla propria vita e alla propria carriera un atteggiamento “da startup”</strong>: ci sono una lunga serie di consigli, discussioni, esempi, e insomma è uno dei libri che ho letto con più piacere.<img src="/images/rischio-investimenti-definizione-749x400.jpg" alt="" /></p>

<h2 id="i-rischi-intelligenti">I rischi intelligenti</h2>

<p><em>Siamo abituati a pensare ai rischi come qualcosa di negativo</em>: perdite di denaro sui mercati azionari, o guida di una moto senza casco. Ma il rischio non è un nemico; è qualcosa che fa intrinsecamente parte della nostra vita.</p>

<p>Le situazioni rischiose, comunque, sono quelle in cui la possibilità che le cose vadano male è decisamente più alto del vantaggio che si ottiene se le cose vanno bene.</p>

<p>Ad esempio, <strong>volare in aereo non è rischioso</strong>, perché anche se lo scenario peggiore è <em>molto **doloroso</em> la possibilità che questo accada è bassissima. Invece, il tempo di viaggio risparmiato è un dato di fatto.</p>

<p>Alcuni imprenditori sono dei cowboy del rischio; tuttavia, <strong>ciò che distingue un imprenditore giudizioso da un semplice spavaldo non è l’alta tolleranza al rischio, ma l’abilità di saperlo valutare e gestire correttamente</strong>.</p>

<p>Il rischio, in un contesto come quello del lavoro, è correlato alle scelte che facciamo, e alla possibilità che qualcosa vada storto. Ad esempio, quando cambiamo lavoro, ci assumiamo il rischio che il nuovo possa essere anche peggiore del vecchio, e invochiamo tutte le divinità affinché non sia così!</p>

<p>Ma non solo tutto ciò che facciamo comporta rischi; <strong>anche</strong> <strong>ciò che NON facciamo è altamente rischioso</strong>. Questo vale specialmente quando il mondo intorno a noi sta cambiando e richiede un nostro adattamento.</p>

<h2 id="valutare-i-rischi">Valutare i rischi</h2>

<p><strong>Valutare i rischi è difficile, ma non impossibile. Gli imprenditori lo fanno tutti i giorni.</strong> Tuttavia, essi non usano analisi matematiche o economiche (degne di Wall Street!) per prendere decisioni; sinceramente, non dovremmo farlo neanche noi.</p>

<p>Ecco alcuni princìpi guida:</p>

<h3 id="1-stiamo-esagerando-nella-valutazione">1. stiamo esagerando nella valutazione?</h3>

<p>Il primo passo nella valutazione di un rischio è ricordarsi che <strong>il caso peggiore probabilmente non è così brutto, o così probabile, come sembra</strong>.</p>

<h3 id="2-il-caso-peggiore-è-tollerabile">2. Il caso peggiore è tollerabile?</h3>

<p>Se accade il caso peggiore cosa succede alla nostra vita? La reputazione scenderà a livelli sotto zero, perderemo tutti i soldi, la carriera sarà definitivamente finita?</p>

<p>Se nel caso peggiore accade che perdiamo <em>un po’</em> di soldi, o veniamo licenziati (posto che riusciamo a trovare un altro lavoro subito), o rischi semplicemente di sentirti inadeguato, <strong>dovresti comunque provarci</strong>. Almeno finché hai un <a href="https://michelenasti.com/2015/11/serve-un-piano/">solido Piano Z</a>.</p>

<h3 id="3-puoi-cambiare-la-decisione-a-metà-dellopera-puoi-passare-al-piano-b">3. Puoi cambiare la decisione a metà dell’opera? Puoi passare al piano B?</h3>

<p>Quando vediamo che le cose si stanno mettendo male, possiamo fare delle scelte che ti permettono di tornare indietro e ricominciare?</p>

<h3 id="4-non-confondiamo-lincertezza-con-il-rischio">4. Non confondiamo l’incertezza con il rischio</h3>

<p>Nessuno può sapere come andrà prima del tempo. Ma questo non significa che l’incertezza sia un rischio! <strong>Le opportunità migliori sono quelle con i più grandi punti interrogativi</strong>.</p>

<h3 id="5-considera-la-tua-età-e-a-che-fase-della-tua-vita-ti-trovi-quali-saranno-i-rischi-tra-un-paio-danni">5. Considera la tua età e a che fase della tua vita ti trovi. Quali saranno i rischi tra un paio d’anni?</h3>

<p>Fallire da ragazzi è considerato formativo; è per questo che sono i ventenni a fondare le aziende più strampalate.</p>

<p>Man mano che invecchi, la tua percezione del rischio cambia. Arrivano i bambini, la casa, l’auto, etc.</p>

<p><strong>Meglio fare qualcosa di rischioso prima che sia troppo tardi</strong> ;)</p>

<h2 id="facciamo-un-rapido-test">Facciamo un rapido test…</h2>

<p>Prendetevi 30 secondi per ogni punto sottostante. Provate a immaginare i pro e i contro delle seguenti situazioni. Considerati i cinque punti espressi precedentemente, come cambierebbe la tua vita se:</p>

<ul>
  <li>trovi un lavoro fantastico e strapagato ma è negli USA</li>
  <li>la tua azienda smette di pagare gli stipendi</li>
  <li>inizi a dirigere un team</li>
</ul>

<p>Questo semplice esercizio mentale magari vi farà riflettere su come percepite il rischio; nel mio caso mi ha aiutato a fare scelte più consapevoli nel mondo del lavoro.</p>

<p>In bocca al rischio ;)</p>


                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>Diventare Senior™ con Javascript: le funzioni filter, map, reduce</title>
        <link>https://michelenasti.com/2017/04/14/javascript-filter-map-reduce.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/04/14/javascript-filter-map-reduce.html</guid>
        <pubDate>Fri, 14 Apr 2017 10:09:00 +0000</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Si può lavorare per anni con javascript senza mai arrivare a conoscere tre funzioni fantastiche (e standard) che permettono di scrivere codice veloce e testabile.&lt;/p&gt;

&lt;p&gt;E’ vero che si diventa senior principalmente con l’esperienza, ma se dite di aver lavorato per 3+ anni con JS dovete anche mostrare che avete un’&lt;em&gt;esperienza di un certo livello&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aprite la console del browser e provate gli esempi!&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-partire-da-un-array-come-filtriamo-solo-gli-elementi-pari-senza-usare-il-ciclo-for&quot;&gt;A partire da un array, come filtriamo solo gli elementi pari senza usare il ciclo for?&lt;/h3&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filtered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filtered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt; prende in input una funzione di &lt;em&gt;test&lt;/em&gt; che viene eseguita su ogni elemento dell’input: se la funzione restituisce &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;elem&lt;/code&gt; viene aggiunto all’array in output.&lt;/p&gt;

&lt;h3 id=&quot;come-raddoppiamo-tutti-gli-element-di-un-array-senza-usare-il-ciclo-for&quot;&gt;Come raddoppiamo tutti gli element di un array senza usare il ciclo for?&lt;/h3&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Anche qui la funzione &lt;code class=&quot;highlighter-rouge&quot;&gt;map()&lt;/code&gt; prende in input una funzione che viene eseguita su ogni elemento dell’input. Per ogni elemento, questo viene &lt;em&gt;trasformato&lt;/em&gt; in un altro valore in base al risultato della funzione.&lt;/p&gt;

&lt;h3 id=&quot;come-sommiamo-tutti-gli-elementi-di-un-array-senza-usare-il-ciclo-for&quot;&gt;Come sommiamo tutti gli elementi di un array senza usare il ciclo for?&lt;/h3&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reduced&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce()&lt;/code&gt; è più complessa da spiegare, ma poi sarà facilissima da usare: permette di applicare una funzione &lt;em&gt;N-a-1&lt;/em&gt; dove da un array tiriamo fuori un unico risultato. Nel nostro esempio abbiamo applicato la somma (voi come esercizio potreste provare a tirare fuori la media!).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce()&lt;/code&gt; prende in input due elementi: una funzione e un elemento di partenza (Sarebbe lo &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; specificato in fondo). Per capire cosa accade, facciamo un esempio sull’array &lt;code class=&quot;highlighter-rouge&quot;&gt;[8, 7]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alla prima iterazione viene chiamata la funzione con &lt;code class=&quot;highlighter-rouge&quot;&gt;prev = 0&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;elem = 8&lt;/code&gt;: siccome stiamo iterando sul primo elemento e non c’è nessun elemento precedente, viene usato il secondo argomento di &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt; come valore di inizio (ricordate quello &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; lì in fondo?). A questo punto viene eseguita la somma, che è &lt;code class=&quot;highlighter-rouge&quot;&gt;8&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alla seconda iterazione, la funzione viene chiamata con &lt;code class=&quot;highlighter-rouge&quot;&gt;prev = 8&lt;/code&gt; (risultato dell’iterazione precedente!) e &lt;code class=&quot;highlighter-rouge&quot;&gt;elem = 7&lt;/code&gt;:  Anche in questo caso verrà eseguita la somma che è &lt;code class=&quot;highlighter-rouge&quot;&gt;15&lt;/code&gt;, che sarà anche l’output di &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;domanda-implicita-del-lettore-perchè-tutto-staccanimento-contro-il-ciclo-for&quot;&gt;(Domanda implicita del lettore: Perchè tutto st’accanimento contro il ciclo for?)&lt;/h3&gt;
&lt;p&gt;Il ciclo for è un ottimo costrutto per iterare gli array, tuttavia non fa capire a chi legge cosa sta accadendo, oltre al fatto di non essere manutenibile. e componibile.&lt;/p&gt;

&lt;p&gt;Supponiamo di voler filtrare tutti i numeri pari da un array; successivamente raddoppiarli e poi sommarli (ossia, la composizione delle tre domande precedenti).&lt;/p&gt;

&lt;p&gt;Con le funzioni presentate prima, ecco la soluzione:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;E’ ovvio che si può scrivere anche con un bel (paio di) for. Ma quante righe ci vogliono? e rileggendolo dopo sei mesi, si capisce?&lt;/p&gt;

&lt;p&gt;Per concludere, con la svolta funzionale di altri linguaggi (chi ha detto Java?!) questi concetti sono stati applicati anche altrove, proprio per la loro semplicità e componibilità. Magari hanno altri nomi, ma il funzionamento è lo stesso. Cercateli e …usateli!&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/04/14/javascript-filter-map-reduce.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>Diventare Senior™ con Javascript: le funzioni filter, map, reduce</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" Diventare Senior™ con Javascript: le funzioni filter, map, reduce ">
                          <figcaption>Diventare Senior™ con Javascript: le funzioni filter, map, reduce</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-04-14 10:09:00 UTC">Fri, 14 Apr 2017 10:09:00 +0000</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Si può lavorare per anni con javascript senza mai arrivare a conoscere tre funzioni fantastiche (e standard) che permettono di scrivere codice veloce e testabile.</p>

<p>E’ vero che si diventa senior principalmente con l’esperienza, ma se dite di aver lavorato per 3+ anni con JS dovete anche mostrare che avete un’<em>esperienza di un certo livello</em>.</p>

<p><strong>Aprite la console del browser e provate gli esempi!</strong></p>

<h3 id="a-partire-da-un-array-come-filtriamo-solo-gli-elementi-pari-senza-usare-il-ciclo-for">A partire da un array, come filtriamo solo gli elementi pari senza usare il ciclo for?</h3>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">];</span>

<span class="kd">let</span> <span class="nx">filtered</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">elem</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">elem</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span> <span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">filtered</span><span class="p">);</span>
</code></pre>
</div>

<p><code class="highlighter-rouge">filter()</code> prende in input una funzione di <em>test</em> che viene eseguita su ogni elemento dell’input: se la funzione restituisce <code class="highlighter-rouge">true</code>, <code class="highlighter-rouge">elem</code> viene aggiunto all’array in output.</p>

<h3 id="come-raddoppiamo-tutti-gli-element-di-un-array-senza-usare-il-ciclo-for">Come raddoppiamo tutti gli element di un array senza usare il ciclo for?</h3>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">mapped</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">elem</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">elem</span> <span class="o">*</span> <span class="mi">2</span> <span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">mapped</span><span class="p">);</span>
</code></pre>
</div>

<p>Anche qui la funzione <code class="highlighter-rouge">map()</code> prende in input una funzione che viene eseguita su ogni elemento dell’input. Per ogni elemento, questo viene <em>trasformato</em> in un altro valore in base al risultato della funzione.</p>

<h3 id="come-sommiamo-tutti-gli-elementi-di-un-array-senza-usare-il-ciclo-for">Come sommiamo tutti gli elementi di un array senza usare il ciclo for?</h3>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">reduced</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">prev</span><span class="p">,</span> <span class="nx">elem</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">prev</span> <span class="o">+</span> <span class="nx">elem</span> <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">reduced</span><span class="p">);</span>
</code></pre>
</div>

<p><code class="highlighter-rouge">reduce()</code> è più complessa da spiegare, ma poi sarà facilissima da usare: permette di applicare una funzione <em>N-a-1</em> dove da un array tiriamo fuori un unico risultato. Nel nostro esempio abbiamo applicato la somma (voi come esercizio potreste provare a tirare fuori la media!).</p>

<p><code class="highlighter-rouge">reduce()</code> prende in input due elementi: una funzione e un elemento di partenza (Sarebbe lo <code class="highlighter-rouge">0</code> specificato in fondo). Per capire cosa accade, facciamo un esempio sull’array <code class="highlighter-rouge">[8, 7]</code>.</p>

<p>Alla prima iterazione viene chiamata la funzione con <code class="highlighter-rouge">prev = 0</code> e <code class="highlighter-rouge">elem = 8</code>: siccome stiamo iterando sul primo elemento e non c’è nessun elemento precedente, viene usato il secondo argomento di <code class="highlighter-rouge">reduce</code> come valore di inizio (ricordate quello <code class="highlighter-rouge">0</code> lì in fondo?). A questo punto viene eseguita la somma, che è <code class="highlighter-rouge">8</code>.</p>

<p>Alla seconda iterazione, la funzione viene chiamata con <code class="highlighter-rouge">prev = 8</code> (risultato dell’iterazione precedente!) e <code class="highlighter-rouge">elem = 7</code>:  Anche in questo caso verrà eseguita la somma che è <code class="highlighter-rouge">15</code>, che sarà anche l’output di <code class="highlighter-rouge">reduce</code>.</p>

<h3 id="domanda-implicita-del-lettore-perchè-tutto-staccanimento-contro-il-ciclo-for">(Domanda implicita del lettore: Perchè tutto st’accanimento contro il ciclo for?)</h3>
<p>Il ciclo for è un ottimo costrutto per iterare gli array, tuttavia non fa capire a chi legge cosa sta accadendo, oltre al fatto di non essere manutenibile. e componibile.</p>

<p>Supponiamo di voler filtrare tutti i numeri pari da un array; successivamente raddoppiarli e poi sommarli (ossia, la composizione delle tre domande precedenti).</p>

<p>Con le funzioni presentate prima, ecco la soluzione:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">arr</span>
	<span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">elem</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">elem</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">elem</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">elem</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">prev</span><span class="p">,</span> <span class="nx">elem</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">prev</span> <span class="o">+</span> <span class="nx">elem</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</code></pre>
</div>

<p>E’ ovvio che si può scrivere anche con un bel (paio di) for. Ma quante righe ci vogliono? e rileggendolo dopo sei mesi, si capisce?</p>

<p>Per concludere, con la svolta funzionale di altri linguaggi (chi ha detto Java?!) questi concetti sono stati applicati anche altrove, proprio per la loro semplicità e componibilità. Magari hanno altri nomi, ma il funzionamento è lo stesso. Cercateli e …usateli!</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>All my articles about Testing in Javascript in one post</title>
        <link>https://michelenasti.com/2017/04/08/all-my-articles-about-testing-in-javascript-in-one-post.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/04/08/all-my-articles-about-testing-in-javascript-in-one-post.html</guid>
        <pubDate>Sat, 08 Apr 2017 13:23:03 +0000</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Hey there,&lt;/p&gt;

&lt;p&gt;in the last month I have done a great work to understand how testing in javascript could be done in a effective, elegant way.&lt;/p&gt;

&lt;p&gt;Here are all my articles about it:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://michelenasti.com/2017/03/23/node-js-testing-easy-with-mocha.html&quot;&gt;Easy testing of NodeJS applications with Mocha&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://michelenasti.com/2017/03/27/become-a-test-expert-in-nodejs-with-these-tricks.html&quot;&gt;Become a test expert in NodeJS with these tricks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://michelenasti.com/2017/04/07/fantastic-unit-tests-in-javascript-with-mocks.html&quot;&gt;Fantastic Unit Tests in Javascript with Mocks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/04/08/all-my-articles-about-testing-in-javascript-in-one-post.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>All my articles about Testing in Javascript in one post</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" All my articles about Testing in Javascript in one post ">
                          <figcaption>All my articles about Testing in Javascript in one post</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-04-08 13:23:03 UTC">Sat, 08 Apr 2017 13:23:03 +0000</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Hey there,</p>

<p>in the last month I have done a great work to understand how testing in javascript could be done in a effective, elegant way.</p>

<p>Here are all my articles about it:</p>
<ul>
  <li><a href="https://michelenasti.com/2017/03/23/node-js-testing-easy-with-mocha.html">Easy testing of NodeJS applications with Mocha</a></li>
  <li><a href="https://michelenasti.com/2017/03/27/become-a-test-expert-in-nodejs-with-these-tricks.html">Become a test expert in NodeJS with these tricks</a></li>
  <li><a href="https://michelenasti.com/2017/04/07/fantastic-unit-tests-in-javascript-with-mocks.html">Fantastic Unit Tests in Javascript with Mocks</a></li>
</ul>

<p>Enjoy!</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>Fantastic Unit Tests in Javascript with Mocks</title>
        <link>https://michelenasti.com/2017/04/07/fantastic-unit-tests-in-javascript-with-mocks.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/04/07/fantastic-unit-tests-in-javascript-with-mocks.html</guid>
        <pubDate>Fri, 07 Apr 2017 09:49:00 +0000</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Let’s start with the example. We have two files, one that is the main one called &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; that exports just one method, called &lt;code class=&quot;highlighter-rouge&quot;&gt;handleSignup()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// file app.js
const db = require('./db.js');

module.exports.handleSignup = (email, password) =&amp;gt; {
  // ...
  // save the user to the database
  db.saveUser({ email, password });
  // ...
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;, at some point, calls the &lt;code class=&quot;highlighter-rouge&quot;&gt;db.saveUser()&lt;/code&gt; function. Let’s see the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; module:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// file db.js
module.exports.saveUser = user =&amp;gt; {
  console.log('Saving the user...', user);
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Nothing very special, it’s just a demo. Let’s go with the important question.&lt;/p&gt;

&lt;h2 id=&quot;how-do-we-unit-test-appjs&quot;&gt;How do we unit-test app.js?&lt;/h2&gt;

&lt;p&gt;For those not used to &lt;strong&gt;unit testing&lt;/strong&gt;, it &lt;strong&gt;is a way of testing classes atomically&lt;/strong&gt;. This means that app.js may depend on other classes, but we will not test these.&lt;/p&gt;

&lt;p&gt;Let me be more specific. the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; module could be really calling a database, this means that if the database connection is not working, the test would fail. OR, if the test is &lt;em&gt;really&lt;/em&gt; saving a user, next time we launch the test it could be failing because the user is already in the db.&lt;/p&gt;

&lt;p&gt;To handle all these scenarios, we will &lt;strong&gt;mock&lt;/strong&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; module. We will provide a fake implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; that will reply as we will, every time. This way, &lt;em&gt;we will be testing only app.js code&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;but-what-if-db-module-has-a-bug&quot;&gt;But… what if db module has a bug?&lt;/h2&gt;

&lt;p&gt;You &lt;strong&gt;MUST&lt;/strong&gt; test the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; module, too! However, it’s not a good practice to test the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; module by testing the &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;If you don’t test the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; module, and all of a sudden your test has a bug, how can you say where the bug is? Imagine this in a layer of 10-15 modules… you get the complexity.&lt;/p&gt;

&lt;p&gt;However, let me point out that &lt;strong&gt;unit testing alone is not the solution to all of your problems&lt;/strong&gt;. Unit testing can test that a single class will perform as specified, but another kind of testing (I call it “integration testing”) should be responsible to check that everything is wired correctly.&lt;/p&gt;

&lt;p&gt;Here is a famous gif about this concept:&lt;img src=&quot;/images/unit-testing-1.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-before-showing-the-code-let-me-introduce-to-you-rewire&quot;&gt;1. Before showing the code, let me introduce to you: rewire()&lt;/h2&gt;

&lt;p&gt;To test &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; we need &lt;a href=&quot;https://www.npmjs.com/package/rewire&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rewire&lt;/code&gt;&lt;/a&gt;, a nodejs module.&lt;/p&gt;

&lt;p&gt;To install:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;npm&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; i --save-dev rewire 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rewire()&lt;/code&gt; works like the &lt;code class=&quot;highlighter-rouge&quot;&gt;require()&lt;/code&gt; function, this mean that you &lt;em&gt;could&lt;/em&gt; use rewire for your applications, even if it does not make any sense. It is indeed very useful in tests.&lt;/p&gt;

&lt;p&gt;When you &lt;code class=&quot;highlighter-rouge&quot;&gt;rewire&lt;/code&gt; a module, the module is imported &lt;em&gt;but&lt;/em&gt; some new methods are added: these are &lt;code class=&quot;highlighter-rouge&quot;&gt;__get__()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;__set__()&lt;/code&gt;. Whith these two methods you can retrive any local variable instantiated locally.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rewire&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'rewire'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rewire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//like require but...&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__get__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'db'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// will return the db object! &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;rewire-has-a-problem-with-const&quot;&gt;Rewire has a problem with const&lt;/h3&gt;

&lt;p&gt;You might be tempted to do this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rewire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;saveUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__set__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'db'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//this will not work in this case!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; is declared as a &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;rewire&lt;/code&gt; cannot do the magic: &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; variables in javascript are not reassignable.&lt;/p&gt;

&lt;p&gt;However, even if the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; object is not reassignable, we can still modify its internals, as long they are declared as &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;. That’s &lt;strong&gt;why we will mock single functions and not the whole object&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;2-before-showing-the-code-let-me-introduce-to-you-expectcreatespy&quot;&gt;2. Before showing the code, let me introduce to you: expect.createSpy()&lt;/h2&gt;

&lt;p&gt;I have already talked about the &lt;a href=&quot;https://michelenasti.com/2017/03/27/become-a-test-expert-in-nodejs-with-these-tricks.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt;&lt;/a&gt; assertion library.&lt;/p&gt;

&lt;p&gt;The good thing is, &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt; has also a way to create mocks - that they call spies&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What is a &lt;em&gt;spy&lt;/em&gt;? it’s a function that can substitute the real implementation. It can be “trained” to return the value you want, to simulate errors, throw exceptions, etc.&lt;/p&gt;

&lt;p&gt;With spies, you can also check that the function has been called, with the right parameters.&lt;/p&gt;

&lt;h2 id=&quot;tldr---here-is-the-code&quot;&gt;TL;DR - Here is the CODE&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//file app.test.js &lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'expect'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rewire&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'rewire'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rewire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (1) &lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'App'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//mock&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__get__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'db'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// (2) &lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;saveUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createSpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (3) &lt;/span&gt;
 
  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'should call saveUser with user object'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'michele@example.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'123abc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleSignup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// (4) &lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;saveUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHaveBeenCalledWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; 
      &lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;   
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You should find familiar what happens at (1): we are importing the app module with &lt;code class=&quot;highlighter-rouge&quot;&gt;rewire&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;then, we are (2) using the &lt;code class=&quot;highlighter-rouge&quot;&gt;__get__()&lt;/code&gt; function to retrieve the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; object from the module. At (3) we are replacing the function &lt;code class=&quot;highlighter-rouge&quot;&gt;saveUser()&lt;/code&gt; with a spy, created by us.&lt;/p&gt;

&lt;p&gt;The test is created as always; we prepare some input parameters and pass them to &lt;code class=&quot;highlighter-rouge&quot;&gt;app.handleSignup()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At (4) we can check that the spy has been called for real with the function &lt;code class=&quot;highlighter-rouge&quot;&gt;toHaveBeenCalledWith&lt;/code&gt; and we can check also that the parameters are the same!&lt;/p&gt;

&lt;h2 id=&quot;theres-more&quot;&gt;There’s more…&lt;/h2&gt;
&lt;p&gt;But that’s enough for now! Testing is something I really like, because it can tell you instantly if you’re doing something wrong. The overall quality of a project is greatly improved when you test and know how to test.&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/04/07/fantastic-unit-tests-in-javascript-with-mocks.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>Fantastic Unit Tests in Javascript with Mocks</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" Fantastic Unit Tests in Javascript with Mocks ">
                          <figcaption>Fantastic Unit Tests in Javascript with Mocks</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-04-07 09:49:00 UTC">Fri, 07 Apr 2017 09:49:00 +0000</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Let’s start with the example. We have two files, one that is the main one called <code class="highlighter-rouge">app.js</code> that exports just one method, called <code class="highlighter-rouge">handleSignup()</code>:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>// file app.js
const db = require('./db.js');

module.exports.handleSignup = (email, password) =&gt; {
  // ...
  // save the user to the database
  db.saveUser({ email, password });
  // ...
};
</code></pre>
</div>

<p>This <code class="highlighter-rouge">app.js</code>, at some point, calls the <code class="highlighter-rouge">db.saveUser()</code> function. Let’s see the <code class="highlighter-rouge">db</code> module:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>// file db.js
module.exports.saveUser = user =&gt; {
  console.log('Saving the user...', user);
};
</code></pre>
</div>

<p>Nothing very special, it’s just a demo. Let’s go with the important question.</p>

<h2 id="how-do-we-unit-test-appjs">How do we unit-test app.js?</h2>

<p>For those not used to <strong>unit testing</strong>, it <strong>is a way of testing classes atomically</strong>. This means that app.js may depend on other classes, but we will not test these.</p>

<p>Let me be more specific. the <code class="highlighter-rouge">db</code> module could be really calling a database, this means that if the database connection is not working, the test would fail. OR, if the test is <em>really</em> saving a user, next time we launch the test it could be failing because the user is already in the db.</p>

<p>To handle all these scenarios, we will <strong>mock</strong> the <code class="highlighter-rouge">db</code> module. We will provide a fake implementation of <code class="highlighter-rouge">db</code> that will reply as we will, every time. This way, <em>we will be testing only app.js code</em>.</p>

<h2 id="but-what-if-db-module-has-a-bug">But… what if db module has a bug?</h2>

<p>You <strong>MUST</strong> test the <code class="highlighter-rouge">db</code> module, too! However, it’s not a good practice to test the <code class="highlighter-rouge">db</code> module by testing the <code class="highlighter-rouge">app</code> module.</p>

<p>If you don’t test the <code class="highlighter-rouge">db</code> module, and all of a sudden your test has a bug, how can you say where the bug is? Imagine this in a layer of 10-15 modules… you get the complexity.</p>

<p>However, let me point out that <strong>unit testing alone is not the solution to all of your problems</strong>. Unit testing can test that a single class will perform as specified, but another kind of testing (I call it “integration testing”) should be responsible to check that everything is wired correctly.</p>

<p>Here is a famous gif about this concept:<img src="/images/unit-testing-1.gif" alt="" /></p>

<h2 id="1-before-showing-the-code-let-me-introduce-to-you-rewire">1. Before showing the code, let me introduce to you: rewire()</h2>

<p>To test <code class="highlighter-rouge">app.js</code> we need <a href="https://www.npmjs.com/package/rewire"><code class="highlighter-rouge">rewire</code></a>, a nodejs module.</p>

<p>To install:</p>

<div class="language-console highlighter-rouge"><pre class="highlight"><code><span class="w">$ </span><span class="nc">npm</span><span class="kv"> i --save-dev rewire 
</span></code></pre>
</div>

<p><code class="highlighter-rouge">rewire()</code> works like the <code class="highlighter-rouge">require()</code> function, this mean that you <em>could</em> use rewire for your applications, even if it does not make any sense. It is indeed very useful in tests.</p>

<p>When you <code class="highlighter-rouge">rewire</code> a module, the module is imported <em>but</em> some new methods are added: these are <code class="highlighter-rouge">__get__()</code> and <code class="highlighter-rouge">__set__()</code>. Whith these two methods you can retrive any local variable instantiated locally.</p>

<p>Example:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kr">const</span> <span class="nx">rewire</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'rewire'</span><span class="p">);</span> 

<span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">rewire</span><span class="p">(</span><span class="s1">'app'</span><span class="p">);</span> <span class="c1">//like require but...</span>

<span class="kr">const</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">__get__</span><span class="p">(</span><span class="s1">'db'</span><span class="p">);</span> <span class="c1">// will return the db object! </span>
</code></pre>
</div>

<h3 id="rewire-has-a-problem-with-const">Rewire has a problem with const</h3>

<p>You might be tempted to do this:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">...</span>
<span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">rewire</span><span class="p">(</span><span class="s1">'app'</span><span class="p">);</span>

<span class="kr">const</span> <span class="nx">db</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="na">saveUser</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{...}</span>
<span class="p">}</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">__set__</span><span class="p">(</span><span class="s1">'db'</span><span class="p">,</span> <span class="nx">db</span><span class="p">);</span> <span class="c1">//this will not work in this case!</span>
</code></pre>
</div>

<p>Since <code class="highlighter-rouge">db</code> is declared as a <code class="highlighter-rouge">const</code> in <code class="highlighter-rouge">app</code>, <code class="highlighter-rouge">rewire</code> cannot do the magic: <code class="highlighter-rouge">const</code> variables in javascript are not reassignable.</p>

<p>However, even if the <code class="highlighter-rouge">db</code> object is not reassignable, we can still modify its internals, as long they are declared as <code class="highlighter-rouge">let</code> and <code class="highlighter-rouge">var</code>. That’s <strong>why we will mock single functions and not the whole object</strong>.</p>

<h2 id="2-before-showing-the-code-let-me-introduce-to-you-expectcreatespy">2. Before showing the code, let me introduce to you: expect.createSpy()</h2>

<p>I have already talked about the <a href="https://michelenasti.com/2017/03/27/become-a-test-expert-in-nodejs-with-these-tricks.html"><code class="highlighter-rouge">expect</code></a> assertion library.</p>

<p>The good thing is, <strong><code class="highlighter-rouge">expect</code> has also a way to create mocks - that they call spies</strong>.</p>

<p>What is a <em>spy</em>? it’s a function that can substitute the real implementation. It can be “trained” to return the value you want, to simulate errors, throw exceptions, etc.</p>

<p>With spies, you can also check that the function has been called, with the right parameters.</p>

<h2 id="tldr---here-is-the-code">TL;DR - Here is the CODE</h2>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="c1">//file app.test.js </span>
<span class="kr">const</span> <span class="nx">expect</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'expect'</span><span class="p">);</span>
<span class="kr">const</span> <span class="nx">rewire</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'rewire'</span><span class="p">);</span>

<span class="kd">let</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">rewire</span><span class="p">(</span><span class="s1">'./app'</span><span class="p">);</span> <span class="c1">// (1) </span>

<span class="nx">describe</span><span class="p">(</span><span class="s1">'App'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">//mock</span>
  <span class="kd">let</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">__get__</span><span class="p">(</span><span class="s1">'db'</span><span class="p">);</span>       <span class="c1">// (2) </span>
  <span class="nx">db</span><span class="p">.</span><span class="nx">saveUser</span> <span class="o">=</span> <span class="nx">expect</span><span class="p">.</span><span class="nx">createSpy</span><span class="p">();</span> <span class="c1">// (3) </span>
 
  <span class="nx">it</span><span class="p">(</span><span class="s1">'should call saveUser with user object'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">email</span> <span class="o">=</span> <span class="s1">'michele@example.com'</span><span class="p">;</span>
    <span class="kd">let</span> <span class="nx">password</span> <span class="o">=</span> <span class="s1">'123abc'</span><span class="p">;</span>

    <span class="nx">app</span><span class="p">.</span><span class="nx">handleSignup</span><span class="p">(</span><span class="nx">email</span><span class="p">,</span> <span class="nx">password</span><span class="p">);</span>

    <span class="c1">// (4) </span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">db</span><span class="p">.</span><span class="nx">saveUser</span><span class="p">).</span><span class="nx">toHaveBeenCalledWith</span><span class="p">({</span> 
      <span class="nx">email</span><span class="p">,</span>
      <span class="nx">password</span>
    <span class="p">});</span>   
  <span class="p">});</span>
<span class="p">});</span>

</code></pre>
</div>

<p>You should find familiar what happens at (1): we are importing the app module with <code class="highlighter-rouge">rewire</code>.</p>

<p>then, we are (2) using the <code class="highlighter-rouge">__get__()</code> function to retrieve the <code class="highlighter-rouge">db</code> object from the module. At (3) we are replacing the function <code class="highlighter-rouge">saveUser()</code> with a spy, created by us.</p>

<p>The test is created as always; we prepare some input parameters and pass them to <code class="highlighter-rouge">app.handleSignup()</code>.</p>

<p>At (4) we can check that the spy has been called for real with the function <code class="highlighter-rouge">toHaveBeenCalledWith</code> and we can check also that the parameters are the same!</p>

<h2 id="theres-more">There’s more…</h2>
<p>But that’s enough for now! Testing is something I really like, because it can tell you instantly if you’re doing something wrong. The overall quality of a project is greatly improved when you test and know how to test.</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
  </channel>
</rss>