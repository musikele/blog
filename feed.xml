<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.0">Jekyll</generator><link href="https://michelenasti.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://michelenasti.com/" rel="alternate" type="text/html" /><updated>2019-01-04T22:19:10+01:00</updated><id>https://michelenasti.com/</id><title type="html">Michele Nasti’s blog</title><subtitle>I'm a full stack Developer with an eye for the web.</subtitle><entry><title type="html">10 years around the web platform, what’s changed and what’s not</title><link href="https://michelenasti.com/2018/12/12/remembering-the-bad-bad-days-of-browser-wars.html" rel="alternate" type="text/html" title="10 years around the web platform, what's changed and what's not" /><published>2018-12-12T00:00:00+01:00</published><updated>2018-12-12T11:33:24+01:00</updated><id>https://michelenasti.com/2018/12/12/remembering-the-bad-bad-days-of-browser-wars</id><content type="html" xml:base="https://michelenasti.com/2018/12/12/remembering-the-bad-bad-days-of-browser-wars.html">&lt;p&gt;&lt;strong&gt;In 2006 I was studying web technologies at University&lt;/strong&gt;. Avilable browsers were Firefox, Opera, Internet Explorer, Netscape on some linux computers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/1 Me2MiUgum7fhYWoUp5nwJA.png&quot; alt=&quot;The web was a huge mass of &amp;lt;table&amp;gt; elements&quot; title=&quot;The youtube homepage in 2006&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt; was at version 4 and there were a lot of standards competing like &lt;strong&gt;xhtml&lt;/strong&gt; (basically, xml to write html and help syntax checkers) and also many &lt;strong&gt;doctypes&lt;/strong&gt; (strict, transitional …) that I never fully understood. Fortunately now we just write &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt; and that’s it. &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; was a relatively new thing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt; was not cool. The teacher didn’t spend more than 2-3 lessons on it, just explaining how to do basic input validation and some DOM manipulation. Strangely enough, javascript as a language was never versioned but now we refer to that days as EcmaScript3 (&lt;a href=&quot;https://www.w3schools.com/js/js_versions.asp&quot;&gt;here’s a table with all javascript versions&lt;/a&gt;). No JQuery was introduced. There were no books ot guides to learn JS, too. There was just one devtool available, and it was a Firefox extension called &lt;em&gt;Firebug&lt;/em&gt; (later it became part of the browser).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt; was also crazy (it still is!). Some browsers adhered to the standard, but not the main one, forcing developers to cross test everything on all possible browsers. Fortunately at the time browsers were just 3-4, not the plethora we have now.&lt;/p&gt;

&lt;p&gt;So… my first days of web design were just crazy. One of the tasks I had to do for this exam was to develop a “personal website”, and I remember that it was not rendering correctly on IE.&lt;/p&gt;

&lt;h2 id=&quot;internet-explorer-the-bad-guy&quot;&gt;Internet Explorer, the bad guy&lt;/h2&gt;

&lt;p&gt;What I didn’t know is that IE &lt;em&gt;deliberately&lt;/em&gt; violated the standard, using its power and market share to &lt;strong&gt;impose&lt;/strong&gt; their version of the web against rivals.&lt;/p&gt;

&lt;p&gt;I struggled realizing a simple website that would show correctly on firefox, following the standards, but not at all on IE (95% of the market share at the time).&lt;/p&gt;

&lt;p&gt;Same for Javascript: IE was just not following some rules that were correctly implemented by others, or deliberately not implementing some standard features. This is one of the motivations for libraries like &lt;strong&gt;JQuery&lt;/strong&gt; to rise: cross-browser uniformity.&lt;/p&gt;

&lt;p&gt;I promised to myself to never work on the web: the platform is unreilable, buggy, nothing works as expected and there’s nothing you can do about it, except than doubling the work.&lt;/p&gt;

&lt;h2 id=&quot;fast-forward-12-years-later&quot;&gt;Fast forward, 12 years later&lt;/h2&gt;

&lt;p&gt;I’m working as a web developer since 6 years, basically I had no choice: when I ended university all the companies were transforming their long-lived java applications to web applications. The good news are that javascript has been standardized (ES5 before, and ES6 after, were huge steps towards browser uniformity) and even newer versions of IE are supporting it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chrome&lt;/strong&gt;, started in 2008, is now the market leader with about 68% of the market share. Chrome uses its own rendering engine called &lt;em&gt;Blink,&lt;/em&gt; part of the &lt;em&gt;Chromium project&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Firefox, the only truly indipendent browser,&lt;/strong&gt; is my default browser. They are not developed by a company but by a no-profit foundation. Their goal is to make the web platform the best possible platform. For many years they were behind Chrome on features, speed and privacy, but now FF is just the same if not better. So yes, I’m using Firefox for moral issues, but there’s litterally nothing that I’m loosing since the switch. (I also use FF on mobile). Firefox uses its own rendering engine called &lt;em&gt;Gecko&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edge&lt;/strong&gt; was a new browser by Microsoft, and it was a surprisingly great browser. It is very fast and it also has a lot of features dedicated to tablets and touchscreens, so that you may prefer it on portable devices. Edge is still not widely adopted (lates stats say that edge is at 4% while IE is &lt;em&gt;still&lt;/em&gt; at 11%!) but it should. Edge uses it’s own rendering engine called &lt;em&gt;EdgeHTML&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Internet Explorer&lt;/strong&gt; in 2018 it should be a thing of the past, but it’s not. IE has been &lt;em&gt;deprecated&lt;/em&gt; and there will be no support for it in the future. It still has 11% of global market share (In Italy, where I live and work, it’s at 2-4%) and I think this happens because many companies impose to their employees to use IE, since they may have developed security features, of custom applets, or other stuff that cannot be thrown away and rebuild in newer technology because it’s not a simple/cheap job. This is what happens when you entangle your company on a closed platform…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Safari&lt;/strong&gt; is a browser that only exists on Apple iDevices. Safari is now considered the IE of the current browsers: many missing features, slow updates, slow fixes… Many standard components are simply ignored because it’s not functional to the company’s view of the web (Apple encourages developers to go native). Safari is based on &lt;em&gt;Webkit&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There are many other browsers, like &lt;strong&gt;Opera&lt;/strong&gt;, &lt;strong&gt;Brave&lt;/strong&gt;, etc. but they’ve not reached great market share, even if they are technologically very valid.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/1472784019browser-wars-over.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;so--what-should-we-do-now&quot;&gt;So … what should we do now&lt;/h2&gt;

&lt;p&gt;The web is the platform that I know better: I love and hate it. &lt;strong&gt;I love the fact that it’s spontaneous&lt;/strong&gt;, with many great ideas going on, and it also moves very fast so that’s impossible to stay current with every possible update.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I hate that some companies implement standards based on what they consider useful.&lt;/strong&gt; This has happened for a decade with Internet Explorer, and now with Safari.&lt;/p&gt;

&lt;p&gt;With Chrome I have a difficult relationship: &lt;strong&gt;I don’t like that one company owns the future of a browser, and with a 70% of the web they also own the future of the web&lt;/strong&gt;; it creates some moral questions about privacy and security, too. But &lt;strong&gt;we cannot negate that Google has done a great job&lt;/strong&gt; by open sourcing big parts of the browser and they also have been the first browser to implement new standards (and closing bugs).&lt;/p&gt;

&lt;p&gt;The latest news are that &lt;strong&gt;Edge is switching to a Chromium-based rendering engine&lt;/strong&gt;. They are doing this because Edge was so new that - like all new things - the browser was crashy, with bugs, and not performing well on some things that others do just fine. I am not an Edge user and, while I have to admit that technologically they are chosing the best available platform, I feel sad that another competitor gives away the competition. &lt;strong&gt;This brings us to a monopoly and that’s not what I expect&lt;/strong&gt;. The good thing is that developers at Microsoft will start contributing to parts of Chromium, so the rendering engine will not be really owned by only one company, but we still don’t know the direction of these two companies and their long-term plans.&lt;/p&gt;

&lt;h2 id=&quot;please-condiser-using-a-non-chromium-browser-for-some-time&quot;&gt;Please condiser using a non-Chromium browser for some time&lt;/h2&gt;

&lt;p&gt;I’m already using and supporting &lt;strong&gt;Firefox&lt;/strong&gt; and there’s literally nothing I miss. It’s fast, secure, privacy oriented, cool. Break the monopoly; &lt;strong&gt;in the long term we - users - will be the only ones to earn the benefits of this choice.&lt;/strong&gt;&lt;/p&gt;</content><author><name>musikele</name></author><category term="Italiano" /><category term="html" /><category term=" javascript" /><category term="css" /><category term="internet explorer" /><category term="jquery" /><category term="chrome" /><category term="firefox" /><category term="edge" /><category term="safari" /><category term="microsoft" /><category term="google" /><category term="apple" /><category term="mozilla" /><summary type="html">In 2006 I was studying web technologies at University. Avilable browsers were Firefox, Opera, Internet Explorer, Netscape on some linux computers.</summary></entry><entry><title type="html">What I learned by writing my first npm module</title><link href="https://michelenasti.com/2018/11/17/what-i-learned-by-writing-my-first-npm-module.html" rel="alternate" type="text/html" title="What I learned by writing my first npm module" /><published>2018-11-17T00:00:00+01:00</published><updated>2018-11-19T10:23:28+01:00</updated><id>https://michelenasti.com/2018/11/17/what-i-learned-by-writing-my-first-npm-module</id><content type="html" xml:base="https://michelenasti.com/2018/11/17/what-i-learned-by-writing-my-first-npm-module.html">&lt;p&gt;Last weekend I wrote a simple module that converts a Javascript array in a HTML table. It’s called &lt;a href=&quot;https://www.npmjs.com/package/html-table-builder&quot; title=&quot;HTML Table Builder&quot;&gt;Html Table Builder&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is an exercise from the book &lt;a href=&quot;https://eloquentjavascript.net&quot;&gt;Eloquent Javascript&lt;/a&gt;; also, there are other gazillion modules on NPM that do the same thing with very similar names (a sign that the book is used a lot by javascript learners).&lt;/p&gt;

&lt;h2 id=&quot;a-little-description&quot;&gt;A little description&lt;/h2&gt;

&lt;p&gt;The library exposes a js function that accepts a js array and returns a HTML &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; object (not string!), so you can attach to the document with &lt;code&gt;document.appendChild(element)&lt;/code&gt;. Checkout the &lt;a href=&quot;https://github.com/musikele/html-table-builder&quot;&gt;documentation on github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My idea was to release a library that was:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;fully tested&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;developed with &lt;strong&gt;Test Driven Development&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;isomorphic&lt;/strong&gt; (by using &lt;a href=&quot;https://www.npmjs.com/package/jsdom&quot;&gt;JSDOM&lt;/a&gt; on node)&lt;/li&gt;
  &lt;li&gt;built by &lt;strong&gt;webpack&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;accepts objects with &lt;strong&gt;custom columns&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many more features have to come:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;apart from the fact that the input must be an array, I don’t want to force users to pass array of objects. So you can pass an array containing strings, numbers, etc. even heterogeneous objects, the function will render it somehow.&lt;/li&gt;
  &lt;li&gt;I want to generate tables-in-tables, if the object in input is an array containing other arrays. This is tricky to do, I’ll have to handle colspans and more.. but not impossible.&lt;/li&gt;
  &lt;li&gt;I also have to add css classes to columns (so you can style your tables)&lt;/li&gt;
  &lt;li&gt;…and add a showcase page. Who’s gonna use your library if nobody understand how to use it?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;i-lost-a-lot-of-time-with&quot;&gt;I lost a lot of time with…&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Webpack&lt;/strong&gt; - diving inside the webpack configuration to get the library minimized and bundled should be an easy task, BUT our friends in webpack have added thousands of options to configure every single bit.&lt;br /&gt;
In the end this is &lt;a href=&quot;https://github.com/musikele/html-table-builder/blob/master/webpack.config.js&quot;&gt;the configuration that works for me&lt;/a&gt;:&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// webpack.config.js
module.exports = {
  entry: './index.js',
  target: 'web', 
  output: {
    filename: 'html-table-builder.js',
    library: 'HtmlTableBuilder',
    libraryTarget: 'umd'
  },
  mode: 'production',
  devtool: 'source-map',
  externals: {
    jsdom: 'JSDOM'
  }
};
  
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;The relevant bits to expose the library are in the &lt;code&gt;output&lt;/code&gt; property; read the &lt;a href=&quot;https://webpack.js.org/configuration/output/#output-library&quot;&gt;documentation&lt;/a&gt; for it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NPM&lt;/strong&gt; - I used npm (tool) to upload my pckage to NPM (site). NPM had some security issues lately, somebody hacked maintainers accounts and released dangerous code in popular libraries. That’s why they reset all user passwords and implemented 2FA authentication, that is a good thing. It even works from console. 
But the main trouble was naming the library. It is a table generator, and you really can’t imagine &lt;a href=&quot;https://www.npmjs.com/search?q=json%20to%20table&quot;&gt;how many there are&lt;/a&gt;. Trying to be self-explicative, without sacrificing the “ideal good name”, took me to choose a &lt;code&gt;html-table-builder&lt;/code&gt;. I would have loved to call it &lt;code&gt;super-table&lt;/code&gt; or &lt;code&gt;table-generator&lt;/code&gt;, but guess what? Already taken. Sad.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Javascript&lt;/strong&gt; - I have a story to tell about JS and dynamic typing. I was writing the function that &lt;a href=&quot;https://github.com/musikele/html-table-builder/blob/master/get-columns/index.js&quot;&gt;extracts the name of the columns&lt;/a&gt;, and in the first version it returned an array of strings. &lt;br /&gt;
Then I decided to return an array of object and DANG! errors everywhere, fortunately tracked down by unit tests. &lt;br /&gt;
Then I decided to change again and make it return an object instead of an array, and again only TDD could help me to track down errors. &lt;br /&gt;
In the end … &lt;strong&gt;static types could have helped to catch errors without TDD&lt;/strong&gt; and I could have used TDD-time to develop more complex tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-did-not-give-problems&quot;&gt;What did not give problems&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Jest&lt;/strong&gt;. Testing with Jest has been &lt;em&gt;extremely easy&lt;/em&gt;. It was my first experience with Jest (coming from Mocha) but I have never had to checkout the documentation for anything. Good!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ESLint, Prettier&lt;/strong&gt; and &lt;strong&gt;VSCode&lt;/strong&gt; - These tools resolve stupid issues for you. Just install and forget about them.  They’ll add semicolumns, fix tabs or spaces, return syntactic errors live… A good bonus.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;finally&quot;&gt;Finally&lt;/h2&gt;

&lt;p&gt;It is a very simple library, but it is already downloaded by 64 users (small number, but &lt;em&gt;great!&lt;/em&gt; If you’re a user, pass by and let me know your problems).&lt;/p&gt;

&lt;p&gt;I learned a lot of stuff by writing this library; &lt;strong&gt;It took me some 8hrs to work it out&lt;/strong&gt;. But it was fun.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You remember 5% of what you read, 10% of what you write, 90% of what you do again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Exactly what I thought while I was preparing the first release!&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="javascript" /><category term="nodejs" /><summary type="html">Last weekend I wrote a simple module that converts a Javascript array in a HTML table. It’s called Html Table Builder.</summary></entry><entry><title type="html">Inspiring tech people to follow: Nicholas C. Zakas</title><link href="https://michelenasti.com/2018/11/05/inspiring-tech-people-to-follow-nicholas-c-zakas.html" rel="alternate" type="text/html" title="Inspiring tech people to follow: Nicholas C. Zakas" /><published>2018-11-05T00:00:00+01:00</published><updated>2018-11-05T11:09:06+01:00</updated><id>https://michelenasti.com/2018/11/05/inspiring-tech-people-to-follow-nicholas-c-zakas</id><content type="html" xml:base="https://michelenasti.com/2018/11/05/inspiring-tech-people-to-follow-nicholas-c-zakas.html">&lt;p&gt;Usually in the software engineering world we talk about programming languages, tools and code. Let’s start a different path with my blog and talk about people behind it!&lt;/p&gt;

&lt;p&gt;For my first journey in &lt;em&gt;people&lt;/em&gt;, I’ll start with one of my very first guides in the javascript world: &lt;strong&gt;Nicholas C. Zakas&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Nicholas is a software engineer &amp;amp; architect, he has worked in super big companies like Yahoo and Box. He also wrote a lot of good books, like the one &lt;a href=&quot;https://www.amazon.com/Professional-JavaScript-Developers-Nicholas-Zakas/dp/1118026691/ref=as_li_ss_tl?&amp;amp;linkCode=sl1&amp;amp;tag=nczonline-20&amp;amp;linkId=3910cb3b203837ce343949cac14f05d5&amp;amp;language=en_US&quot; title=&quot; Professional JavaScript for Web Developers &quot;&gt;I used to study in 2013&lt;/a&gt; (DON’T BUY THIS BOOK - it’s outdated now. It was a great book before ES6 and all the good stuff we know about js were in place).&lt;/p&gt;

&lt;h2 id=&quot;successful-open-source-projects&quot;&gt;Successful Open Source projects&lt;/h2&gt;

&lt;p&gt;Nicholas will be remembered for ages because he wrote one of the most successfull projects in the javascript community: &lt;a href=&quot;https://eslint.org/&quot;&gt;&lt;strong&gt;ESLint&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/eslint.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ESLint - for those who might not know - is a linter. This means that catches eventual errors you may have introduced in your javascript code. There were other linters before ESLint, mainly JSlint and JSHint, but &lt;strong&gt;ESLint had something more: rules could be written and plugged by everybody&lt;/strong&gt; (supporting new JS features in seconds, without waiting for the maintainer to release a new version). That’s why it was adopted by React and all the other big frameworks of our community.&lt;/p&gt;

&lt;h2 id=&quot;books&quot;&gt;Books&lt;/h2&gt;

&lt;p&gt;Nicholas has also written some very influent books, and this gave him the opportunity to move to Silicon Valley and find him great jobs. I find his books extremely detailed and also very clear. These are two things that usually don’t go together!&lt;/p&gt;

&lt;h2 id=&quot;blog-mailing-list&quot;&gt;Blog, mailing list&lt;/h2&gt;

&lt;p&gt;If you want to see what Nicholas has been writing about in the latest years, He also has a blog called &lt;a href=&quot;https://humanwhocodes.com/&quot;&gt;Human Who Codes&lt;/a&gt;. His latest blog post, at the moment of this writing, is this post about &lt;a href=&quot;https://humanwhocodes.com/blog/2018/10/my-somewhat-complete-salary-history-software-engineer/&quot;&gt;his earnings history&lt;/a&gt;, useful to get an insight on salaries in Silicon Valley or USA. The intent of the post is to give women more knowledge about what should they earn.&lt;/p&gt;

&lt;p&gt;But there is just more stuff going on his blog. I have also subscribed to his mailing list and when I received one of his emails I was thrilled to read it. I think his gift is to explain complex situations (like the ones he has lived on his own skin) to us, and to perfectly give context so deeply understand the point.&lt;/p&gt;

&lt;h2 id=&quot;health-issues&quot;&gt;Health Issues&lt;/h2&gt;

&lt;p&gt;I’m writing this paragraph because Nicholas talks openly about his problem with the Lyme disease. It was such a huge problem that he had to stop working in 2013, even remotely, and just focus on his health. However he is recovering and he is writing new stuff on his blog.&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="zakas" /><category term="eslint" /><category term="people" /><category term="javascript" /><summary type="html">Usually in the software engineering world we talk about programming languages, tools and code. Let’s start a different path with my blog and talk about people behind it!</summary></entry><entry><title type="html">The easiest way to understand Javascript Generators</title><link href="https://michelenasti.com/2018/10/29/the-easiest-way-to-understand-javascript-generators.html" rel="alternate" type="text/html" title="The easiest way to understand Javascript Generators" /><published>2018-10-29T00:00:00+01:00</published><updated>2018-10-31T15:47:43+01:00</updated><id>https://michelenasti.com/2018/10/29/the-easiest-way-to-understand-javascript-generators</id><content type="html" xml:base="https://michelenasti.com/2018/10/29/the-easiest-way-to-understand-javascript-generators.html">&lt;p&gt;&lt;strong&gt;Generators in Javascript are functions that return an iterator&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Generators&lt;/strong&gt; are functions declared with the keyword &lt;code&gt;function*&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-do-you-mean-with-iterator&quot;&gt;What do you mean with “iterator”?&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;iterator&lt;/em&gt; is a design pattern usually already implemented in other programming languages. It is a &lt;strong&gt;data structure that allows you to &lt;em&gt;iterate&lt;/em&gt; (read one by one) over the elements of the data structure.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It might be very easy to think of an iterator for an array (a function that returns every element of the array, one by one), things become more complex if you want to iterate over a graph, or a tree.&lt;/p&gt;

&lt;h2 id=&quot;an-iterator-example-in-plain-javascript-no-generators-here&quot;&gt;An Iterator example in plain Javascript (no generators here)&lt;/h2&gt;

&lt;p&gt;An iterator obeys to these rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The iterator must return a function that returns an object, containing a &lt;code&gt;next()&lt;/code&gt; function.&lt;/li&gt;
  &lt;li&gt;This &lt;code&gt;next()&lt;/code&gt; function, in turn, returns an object with two properties, &lt;code&gt;value&lt;/code&gt; (the actual element of the iteration) and &lt;code&gt;done&lt;/code&gt; (set to &lt;code&gt;true&lt;/code&gt; when the iteration has ended, &lt;code&gt;false&lt;/code&gt; otherwise).&lt;/li&gt;
  &lt;li&gt;This function is attached to the property &lt;code&gt;myObj[Symbol.iterator]&lt;/code&gt; .&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example iterator for an array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Array.prototype[Symbol.iterator] = function() {
	const clone = this.slice(0); // clones the original array
    let i = -1; // iterating index; 
  	return {
    	next() {
        	i++;
        	return {
            	value: clone[i],
            	done: i &amp;gt;= clone.length
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s try this in the nodejs console…&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;gt; let iterator = [1,3,5,7,9][Symbol.iterator]()
undefined
&amp;gt; iterator
{ next: [Function: next] }
&amp;gt; iterator.next()
{ value: 1, done: false }
&amp;gt; iterator.next()
{ value: 3, done: false }
&amp;gt; iterator.next()
{ value: 5, done: false }
&amp;gt; iterator.next()
{ value: 7, done: false }
&amp;gt; iterator.next()
{ value: 9, done: false }
&amp;gt; iterator.next()
{ value: undefined, done: true }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ve already discussed this issue in &lt;a href=&quot;https://michelenasti.com/2018/09/04/symbols-iterators-in-javascript.html&quot; title=&quot;Symbols &amp;amp; Iterators in Javascript &quot;&gt;in another article&lt;/a&gt;; there you’ll find other examples and more explanations!&lt;/p&gt;

&lt;h2 id=&quot;iterators-are-not-funny&quot;&gt;Iterators are not funny.&lt;/h2&gt;

&lt;p&gt;Nobody wants to write a functions that returns an object with a next property that returns a value.&lt;/p&gt;

&lt;p&gt;That’s why the Javascript community has introduced the generators syntax.&lt;/p&gt;

&lt;p&gt;A generator is declared this way: &lt;code&gt;function* myGenerator {}&lt;/code&gt; and this will return an iterator.&lt;/p&gt;

&lt;p&gt;Let’s rewrite the preceeding example with generators:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Array.prototype[Symbol.iterator] = function*() {
  for (let i = 0; i &amp;lt; this.length; i++) {
    yield this[i];
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You know that Promises interrupt the function execution, and when the promise resolves, the flow returns to the point it was left.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not only Promises but also Generators can interrupt the execution flow&lt;/strong&gt;: when we return a value via the  &lt;code&gt;yield&lt;/code&gt; keyword, the generator function gets paused until it’s called again.&lt;/p&gt;

&lt;p&gt;Does it work?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$ node  
&amp;gt; Array.prototype[Symbol.iterator] = function*() {
...   for (let i = 0; i &amp;lt; this.length; i++) {
.....     yield this[i];
.....   }
... }
[GeneratorFunction]
&amp;gt; const iterator = [1,2,3,4,5][Symbol.iterator]() //calling!
undefined
&amp;gt; iterator
Object [Generator] {}
&amp;gt; iterator.next()
{ value: 1, done: false }
&amp;gt; iterator.next()
{ value: 2, done: false }
&amp;gt; iterator.next()
{ value: 3, done: false }
&amp;gt; iterator.next()
{ value: 4, done: false }
&amp;gt; iterator.next()
{ value: 5, done: false }
&amp;gt; iterator.next()
{ value: undefined, done: true }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, it works!!!&lt;/p&gt;

&lt;h2 id=&quot;but-why-iterators-are-important&quot;&gt;But why Iterators are important&lt;/h2&gt;

&lt;p&gt;JS uses iterators in &lt;code&gt;for ... of&lt;/code&gt; loops, so if the object after the &lt;code&gt;of&lt;/code&gt; contains an iterator, you can iterate over all the elements of the object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;gt; // The array here is using the iterator defined before...
&amp;gt; for (element of [1,2,3,4,5]) console.log(element)
1
2
3
4
5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It works!&lt;/p&gt;

&lt;h2 id=&quot;what-else-you-need-to-know&quot;&gt;What else you need to know&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;yield&lt;/code&gt; must be in generator functions; you cannot put &lt;code&gt;yield&lt;/code&gt; in  subfunctions, or in promises results, asyncs, etc.&lt;/p&gt;

&lt;h2 id=&quot;ready-to-use-it-&quot;&gt;Ready to use it ?&lt;/h2&gt;

&lt;p&gt;Generators are widely supported by all major/modern browsers, &lt;strong&gt;except for IE&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A not well known JS feature; since it is part of the language specification, the more you know, the more you gain.&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="javascript" /><category term="es6" /><category term="nodejs" /><category term="generators" /><summary type="html">Generators in Javascript are functions that return an iterator.</summary></entry><entry><title type="html">Docker cheatsheet</title><link href="https://michelenasti.com/2018/10/25/docker-cheatsheet.html" rel="alternate" type="text/html" title="Docker cheatsheet" /><published>2018-10-25T01:00:00+02:00</published><updated>2018-11-21T16:24:06+01:00</updated><id>https://michelenasti.com/2018/10/25/docker-cheatsheet</id><content type="html" xml:base="https://michelenasti.com/2018/10/25/docker-cheatsheet.html">&lt;p&gt;I usually forget everything if I don’t use it that much. Here is a brief list of docker commands learned on the go.&lt;/p&gt;

&lt;h2 id=&quot;start-a-simple-container&quot;&gt;Start a simple container&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ docker run -i -t ubuntu /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;run&lt;/code&gt; runs the &lt;code&gt;ubuntu&lt;/code&gt; image&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-i&lt;/code&gt; allows you to write to the container (“Keep STDIN open even if not attached”)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-t&lt;/code&gt; allocates a pseudoTTY and allows to read from the container&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ubuntu&lt;/code&gt; is the name of the image to start&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/bin/bash&lt;/code&gt; is the command to launch once the image is started&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In practice: use &lt;code&gt;-i -t&lt;/code&gt; to read and write from the docker image in the console.&lt;/p&gt;

&lt;p&gt;Optional commands:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;--name XXX&lt;/code&gt; assigns the name XXX to the container&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-d&lt;/code&gt; launches the container as a daemon&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-c XXX&lt;/code&gt; passes XXX to the command. In our example the command is &lt;code&gt;/bin/bash&lt;/code&gt;. With -c we can pass any kind of commands; for example &lt;code&gt;-c &quot;while true; do echo hello world; sleep 1; done&quot;&lt;/code&gt;. Docker would pass this string t bash and the container would print hello world every second without stopping. Note the quotes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;see-containers-status&quot;&gt;See containers status&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ docker ps -a 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;ps&lt;/code&gt; alone prints only the active containers&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-a&lt;/code&gt; shows also the exited containers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;inspecting-a-container&quot;&gt;Inspecting a container&lt;/h2&gt;

&lt;p&gt;If the container is started as daemon you might want to see the output.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ docker logs -t -f NAME_OF_CONTAINER 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;logs NAME_OF_CONTAINER&lt;/code&gt; shows you the logs of the container. Without options you see the latest logs and then the propt gets back to your shell.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-f&lt;/code&gt; works like &lt;code&gt;-f&lt;/code&gt; in &lt;code&gt;tail -f&lt;/code&gt;; logs become live. Use &lt;code&gt;CTRL-C&lt;/code&gt; to exit.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-t&lt;/code&gt; shows also timestamps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To check container processes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ docker top daemon_dave
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get stats about a bunch of docker containers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ docker stats daemon_dave daemon_kate
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;running-programs-in-a-container&quot;&gt;Running programs in a container&lt;/h2&gt;

&lt;p&gt;Daemon mode:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ sudo docker exec -d daemon_dave touch /etc/new_config_file
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-d&lt;/code&gt; stands for daemon mode.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;exec&lt;/code&gt; is used to run a command in the &lt;code&gt;daemon-dave&lt;/code&gt; container.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Interactive mode:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ docker exec -t -i daemon_dave /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-t&lt;/code&gt; creates a TTY&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-i&lt;/code&gt; captures STDIN&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;…basically opens an interactive shell.&lt;/p&gt;

&lt;h2 id=&quot;stopping--deleting&quot;&gt;Stopping &amp;amp; Deleting&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ docker stop CONTAINER 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ docker rm CONTAINER 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;listing-docker-images&quot;&gt;Listing docker images&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ docker images
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;build-a-static-container-with-my-blog&quot;&gt;Build a static container with my blog&lt;/h2&gt;

&lt;p&gt;create the &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-docker&quot;&gt;# Version: 0.0.1 
FROM ubuntu:18.04 
LABEL maintainer=&quot;XXX@gmail.com&quot;
# update and install stuff we need: ruby, nodejs, nginx
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y nginx make build-essential ruby ruby-dev curl
RUN curl -sL https://deb.nodesource.com/setup_10.x | bash -
RUN apt-get install -y nodejs 
# install ruby gems to build the blog
RUN gem install bundler
RUN gem install jekyll
# specify that we want to work in the directory /root/
WORKDIR /root/
# Remove the default Nginx configuration file
RUN rm -v /etc/nginx/nginx.conf
# Copy a configuration file from the current directory
ADD nginx.conf /etc/nginx/
# add files from our current directory (.) to the local work dir (/root/)
ADD . .
# install jekyll plugins and build the site
RUN bundle install 
RUN bundle exec jekyll build --config=_config.yml,_config_dev.yml
# copy generated website to nginx public dir 
RUN cp -r _site/* /usr/share/nginx/html/
# run nginx as foreground process. 
CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]
EXPOSE 80
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a Dockerfile there must be a &lt;code&gt;CMD&lt;/code&gt; command otherwise the process will stop after being launched.&lt;/p&gt;

&lt;p&gt;To actually make it work you should also configure your nginx with a valid &lt;code&gt;nginx.conf&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nginx&quot;&gt;# file nginx.conf
worker_processes 1;

events { worker_connections 1024; }

http {
    include    mime.types;
    sendfile on;
    server {
        root /usr/share/nginx/html/;
        index index.html;
        server_name localhost;
        listen 80;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can build the image:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ docker build -t &quot;musikele/blog&quot; .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we can run it with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ docker run -d -p 80:80 --name blog musikele/blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case anything goes wrong, you can enter and inspect the running container with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ docker exec -i -t blog /bin/bash
&lt;/code&gt;&lt;/pre&gt;</content><author><name>musikele</name></author><category term="English" /><category term="docker" /><category term="cheatsheet" /><summary type="html">I usually forget everything if I don’t use it that much. Here is a brief list of docker commands learned on the go.</summary></entry><entry><title type="html">Perché ci sono persone che conoscono jQuery ma non conoscono JavaScript?</title><link href="https://michelenasti.com/2018/10/22/perch%C3%A9-ci-sono-persone-che-conoscono-jquery-ma-non-conoscono-javascript.html" rel="alternate" type="text/html" title="Perché ci sono persone che conoscono jQuery ma non conoscono JavaScript?" /><published>2018-10-22T00:00:00+02:00</published><updated>2018-10-22T17:48:04+02:00</updated><id>https://michelenasti.com/2018/10/22/perch%C3%A9-ci-sono-persone-che-conoscono-jquery-ma-non-conoscono-javascript</id><content type="html" xml:base="https://michelenasti.com/2018/10/22/perch%C3%A9-ci-sono-persone-che-conoscono-jquery-ma-non-conoscono-javascript.html">&lt;p&gt;Su Quora ho risposto a questa domanda: &lt;a href=&quot;https://it.quora.com/Perché-ci-sono-persone-che-conoscono-jQuery-ma-non-conoscono-JavaScript&quot;&gt;Perché ci sono persone che conoscono jQuery ma non conoscono JavaScript?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Buona lettura :)&lt;/p&gt;</content><author><name>musikele</name></author><category term="Italiano" /><category term="jquery" /><category term="javascript" /><category term="web" /><summary type="html">Su Quora ho risposto a questa domanda: Perché ci sono persone che conoscono jQuery ma non conoscono JavaScript?</summary></entry><entry><title type="html">Dovrei imparare Ruby on Rails o NodeJS ?</title><link href="https://michelenasti.com/2018/10/15/dovrei-imparare-ruby-on-rails-o-nodejs.html" rel="alternate" type="text/html" title="Dovrei imparare Ruby on Rails o NodeJS ? " /><published>2018-10-15T00:00:00+02:00</published><updated>2018-10-15T09:44:32+02:00</updated><id>https://michelenasti.com/2018/10/15/dovrei-imparare-ruby-on-rails-o-nodejs</id><content type="html" xml:base="https://michelenasti.com/2018/10/15/dovrei-imparare-ruby-on-rails-o-nodejs.html">&lt;p&gt;A questo link su Quora c’è la mia risposta alla domanda: &lt;a href=&quot;https://it.quora.com/Dovrei-imparare-Ruby-on-Rails-o-Node-js/answer/Michele-Nasti&quot;&gt;Dovrei imparare Ruby on Rails o NodeJS?&lt;/a&gt;&lt;/p&gt;</content><author><name>musikele</name></author><category term="Italiano" /><category term="ruby on rails" /><category term="ruby" /><category term="nodejs" /><summary type="html">A questo link su Quora c’è la mia risposta alla domanda: Dovrei imparare Ruby on Rails o NodeJS?</summary></entry><entry><title type="html">Let’s write our simple version of the require() function</title><link href="https://michelenasti.com/2018/10/02/let-s-write-a-simple-version-of-the-require-function.html" rel="alternate" type="text/html" title="Let's write our simple version of the require() function" /><published>2018-10-02T00:00:00+02:00</published><updated>2018-11-21T16:24:55+01:00</updated><id>https://michelenasti.com/2018/10/02/let-s-write-a-simple-version-of-the-require-function</id><content type="html" xml:base="https://michelenasti.com/2018/10/02/let-s-write-a-simple-version-of-the-require-function.html">&lt;p&gt;You should know that Javascript (better to say EcmaScript) does not specify any function to read and write files.&lt;/p&gt;

&lt;p&gt;In fact, &lt;strong&gt;Javascript is just the language used by many environments&lt;/strong&gt; (the browser, or NodeJS, are examples of environments) that offer more objects and functions to work with.&lt;/p&gt;

&lt;p&gt;Node was the first environment to offer a way to organize code in modules by using a special function called &lt;code&gt;require()&lt;/code&gt;. How does it work? Let’s try to implement it from zero.&lt;/p&gt;

&lt;p&gt;Here is an example of &lt;code&gt;require&lt;/code&gt; at work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//test.js
module.exports = &quot;Hello World&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//main.js
const test = require(&quot;./test.js&quot;); 
console.log(test) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s write that &lt;code&gt;require&lt;/code&gt; function.&lt;/p&gt;

&lt;h2 id=&quot;what-should-a-require-function-do&quot;&gt;What should a require() function do&lt;/h2&gt;

&lt;p&gt;a &lt;code&gt;require&lt;/code&gt; function is expected to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;read the content of a javascript file in a string&lt;/li&gt;
  &lt;li&gt;evaluate that code&lt;/li&gt;
  &lt;li&gt;save the exported function/object in a cache for later use (only read files once)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h3&gt;

&lt;p&gt;We will not rebuild the whole NodeJS in a single post. In fact, I will not implement many NodeJS checks and giggles, we are only interested in understand how things work.&lt;/p&gt;

&lt;p&gt;We will still need the real &lt;code&gt;require&lt;/code&gt; function to load the &lt;code&gt;fs&lt;/code&gt; module. I’m not cheating, it’s just that this post has to end sooner or later :)&lt;/p&gt;

&lt;h3 id=&quot;myrequire-function&quot;&gt;myRequire() function&lt;/h3&gt;

&lt;p&gt;here’s the code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//file setup.js

const fs = require('fs');

myRequire.cache = Object.create(null); //(1)

function myRequire(name) {   
    if (!(name in myRequire.cache)) {     
        let code = fs.readFileSync(name, 'utf8'); //(2)
        let module = {exports: {}}; //(3)
        myRequire.cache[name] = module; //(4)    
        let wrapper = Function(&quot;require, exports, module&quot;, code); //(5)
        wrapper(myRequire, module.exports, module); //(6)
    }
    return myRequire.cache[name].exports; //(7)
}

...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;did-you-forget-to-declare-myrequire-variable&quot;&gt;Did you forget to declare myRequire variable?&lt;/h3&gt;

&lt;p&gt;No. In Javascript, functions declared with &lt;code&gt;function&lt;/code&gt; keyword are evaluated before any other code (functions are “hoisted”) so they can be referenced even before they’re declared.&lt;/p&gt;

&lt;p&gt;Also, functions can have properties (&lt;em&gt;this is javascript&lt;/em&gt;!) so you can add the &lt;code&gt;cache&lt;/code&gt; property to the &lt;code&gt;myRequire&lt;/code&gt; function &lt;strong&gt;(step 1)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finally we’re creating the &lt;code&gt;cache&lt;/code&gt; property with &lt;code&gt;Object.create&lt;/code&gt;. With this function we can specify the object prototype, we have chosen to not specify a prototype. Why? This way we don’t mess with other functions or properties declared by the runtime. &lt;a href=&quot;https://www.reddit.com/r/javascript/comments/5e62us/is_there_a_reason_to_create_an_object_without_a/&quot;&gt;Here’s an explanation&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Let’s go back to &lt;code&gt;myRequire&lt;/code&gt; . If the file we’re importing is not in cache, we read the file from disk &lt;strong&gt;(step 2)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Then we declare an empty &lt;code&gt;module&lt;/code&gt; object with just one property, &lt;code&gt;exports&lt;/code&gt; &lt;strong&gt;(step 3)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We add this empty module to the cache, using the filename as the key, and then the magic happens &lt;strong&gt;(step 4)&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-function-constructor&quot;&gt;The Function constructor&lt;/h2&gt;

&lt;p&gt;In JS we can evaluate a string js code in two ways. The first way is via &lt;code&gt;eval()&lt;/code&gt; function, that is a bit dangerous (it messes up the scope) so it is highly discouraged to use it.&lt;/p&gt;

&lt;p&gt;The second way to evaluate code that we have in a string is via the &lt;code&gt;Function&lt;/code&gt; constructor. This constructor takes a string with the arguments and a string with the code. This way everything has its own scope and doesn’t mess things up for others.&lt;/p&gt;

&lt;p&gt;So, basically we are creating a new function with these variables &lt;strong&gt;(step 5)&lt;/strong&gt;: &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;exports&lt;/code&gt;, and &lt;code&gt;module&lt;/code&gt;. Let’s think for a moment at the first example of this post, the file &lt;code&gt;test.js&lt;/code&gt;: it becomes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function(require, exports, module) {
  module.exports = &quot;Hello World&quot; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the second file, &lt;code&gt;main.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function(require, exports, module) {
  const test = require(&quot;./test.js&quot;); 
  console.log(test) 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Variables that seemed “global” in files are indeed passed as function arguments.&lt;/p&gt;

&lt;h2 id=&quot;last-step-executing-the-function&quot;&gt;Last step: executing the function&lt;/h2&gt;

&lt;p&gt;We have created &lt;strong&gt;(step 6)&lt;/strong&gt; a &lt;code&gt;wrapper&lt;/code&gt; variable that holds a function, but the function is never executed. We do this at the line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;wrapper(myRequire, module.exports, module); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the second variable (that should be &lt;code&gt;exports&lt;/code&gt;) is just a handle to &lt;code&gt;module.exports&lt;/code&gt;; NodeJS creators thought that this &lt;a href=&quot;https://blog.tableflip.io/the-difference-between-module-exports-and-exports/&quot;&gt;could have helped in writing less code…&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When Node executes the function, everything that was “exported” (your public API) gets linked to the cache.&lt;/p&gt;

&lt;p&gt;(Remember the &lt;code&gt;myRequire.cache[name] = module;&lt;/code&gt; line? When it was first found by the compiler it was point to a dummy &lt;code&gt;{ exports: {} }&lt;/code&gt; object; now it contains your module.)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NOTE. Since we pass &lt;code&gt;myRequire&lt;/code&gt; to the wrapper function, we can from now on use &lt;code&gt;require&lt;/code&gt; in our test files, but our require gets called. Add a console.log if you don’t trust me ;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally… &lt;code&gt;myRequire&lt;/code&gt; returns the &lt;code&gt;export&lt;/code&gt;ed stuff you declared &lt;strong&gt;(step 7)&lt;/strong&gt;, and that we saved to the cache so we won’t have to reevaluate this code again.&lt;/p&gt;

&lt;h2 id=&quot;final-considerations&quot;&gt;Final considerations&lt;/h2&gt;

&lt;p&gt;An example of this code &lt;a href=&quot;https://github.com/musikele/require-example&quot;&gt;can be found here&lt;/a&gt;, along with some console logs that explain what’s going on.&lt;/p&gt;

&lt;p&gt;The idea of this article comes from the &lt;a href=&quot;https://eloquentjavascript.net/10_modules.html#h_N33QHgUxbG&quot;&gt;explanation of this function at chapter 10 (Modules)&lt;/a&gt;. The book (&lt;a href=&quot;https://www.eloquentjavascript.net&quot;&gt;Eloquent Javascript&lt;/a&gt;) is excellent, but I had the urge to better understand, and try with a debugger, what I could not understand with my mind alone.&lt;/p&gt;

&lt;p&gt;You should definitely read the book if you want to better understand javascript.&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="javascript" /><category term="nodejs" /><summary type="html">You should know that Javascript (better to say EcmaScript) does not specify any function to read and write files.</summary></entry><entry><title type="html">Javascript: call functions without using parentheses (what?!)</title><link href="https://michelenasti.com/2018/09/19/Javascript-chiamare-funzioni-senza-usare-parentesi-(what!).html" rel="alternate" type="text/html" title="Javascript: call functions without using parentheses (what?!)" /><published>2018-09-19T00:00:00+02:00</published><updated>2018-09-20T09:52:23+02:00</updated><id>https://michelenasti.com/2018/09/19/Javascript-chiamare-funzioni-senza-usare-parentesi-(what!)</id><content type="html" xml:base="https://michelenasti.com/2018/09/19/Javascript-chiamare-funzioni-senza-usare-parentesi-(what!).html">&lt;p&gt;Let’s dig in a not-well-publicized ES6 feature: calling functions without using parentheses.&lt;/p&gt;

&lt;p&gt;If you are familiar with Ruby, you know that in Ruby you can omit parentheses when they’re not ambiguous:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;puts 'hello world' 
puts('hello world') 
//-&amp;gt; same result!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But we’re in javascript and this is not allowed. Uhm… &lt;strong&gt;in some forms it &lt;em&gt;IS&lt;/em&gt; allowed!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-ive-discovered-this-sqorn&quot;&gt;How I’ve discovered this: SQORN&lt;/h2&gt;

&lt;p&gt;In my search for new libraries, I found &lt;a href=&quot;https://sqorn.org/&quot;&gt;SQORN&lt;/a&gt; library. Sqorn allows you to write sql queries in nodejs.&lt;/p&gt;

&lt;p&gt;What captured my attention is &lt;em&gt;the way Sqorn is intended to be used&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const sq = require('sqorn-pg')()
const kid = sq.from`person`.where`age &amp;lt; 13` 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What’s happening here?! Where are parentheses? &lt;strong&gt;Is this javascript after all?&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;template-strings&quot;&gt;Template strings&lt;/h2&gt;

&lt;p&gt;You should already know the newest way of declaring a string in JS, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const str = `this is a string!`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it is very useful because you can interpolate values inside, witouth concatenating:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var name = 'Michele';
//es5
var helloES5 = &quot;Hello, &quot; + name;
//es6 
const helloES6 = `Hello ${name}`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Imagine you have to concatenate 6-7 items in the same sentence… You’ll agree the ES6 version is clearer ;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The nice part of this string declaration is that you can pass strings as arguments to functions without parentheses:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function hello(name) {
	console.log(`How are you ${name}`);
}

// The convention is to write the string right 
// after the function name...
hello`Michele` 
//-&amp;gt; How are you Michele 

//...but you can put a space too 
hello `Michele `
//-&amp;gt; How are you Michele
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This syntax doesn’t work with &lt;code&gt;'&lt;/code&gt; or &lt;code&gt;&quot;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;hello 'Michele'
//-&amp;gt; SyntaxError: unexpected token: string literal
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;more-power-to-string-templates&quot;&gt;More power to string templates!&lt;/h2&gt;

&lt;p&gt;Studying this syntax I discovered intresting features. For example, functions can extract the variables (ones in &lt;code&gt;${...}&lt;/code&gt;) from the template string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var a = 5;
var b = 10;

function tag(strings, ...values) {
  console.log(strings[0]); // &quot;Hello &quot;
  console.log(strings[1]); // &quot; World &quot;
  console.log(values[0]);  // 15
  console.log(values[1]);  // 50
  
  return &quot;Bazinga!&quot;;
}

tag`Hello ${ a + b } World ${ a * b }`;
// &quot;Bazinga!&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This stuff is pretty nice but it is a bit obscure. Infact, apart from SQORN, I’ve never seen this syntax used elsewhere. &lt;strong&gt;It’s a nice-to-know feature, good for impressing others, but my suggestion is to use this only if it’s the clearest way to express your concepts.&lt;/strong&gt;&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="javascript" /><summary type="html">Let’s dig in a not-well-publicized ES6 feature: calling functions without using parentheses.</summary></entry><entry><title type="html">Symbols &amp;amp; Iterators in Javascript</title><link href="https://michelenasti.com/2018/09/04/symbols-iterators-in-javascript.html" rel="alternate" type="text/html" title="Symbols &amp; Iterators in Javascript" /><published>2018-09-04T00:00:00+02:00</published><updated>2018-09-04T16:41:34+02:00</updated><id>https://michelenasti.com/2018/09/04/symbols-iterators-in-javascript</id><content type="html" xml:base="https://michelenasti.com/2018/09/04/symbols-iterators-in-javascript.html">&lt;p&gt;ES6 introduced the new &lt;code&gt;for ... of&lt;/code&gt; syntax to iterate a collection. Did you know? And how does it work?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arr = ['banana', 'apple', 'orange']

for (const fruit of arr) {
  console.log(fruit)
}
// -&amp;gt; banana
// -&amp;gt; apple
// -&amp;gt; orange
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;how-does-it-work&quot;&gt;How does it work&lt;/h3&gt;

&lt;p&gt;What you are seeing is a syntax that iterates on an &lt;strong&gt;iterator&lt;/strong&gt;, a common concept in other languages but fairly new in Javascript.&lt;/p&gt;

&lt;p&gt;Basically, if an object has an &lt;em&gt;iterator&lt;/em&gt; you can use the &lt;code&gt;for...of&lt;/code&gt; syntax to iterate on it.&lt;/p&gt;

&lt;h3 id=&quot;how-do-we-create-an-iterator&quot;&gt;How do we create an iterator?&lt;/h3&gt;

&lt;p&gt;To create iterators, we must provide a new property in our object called &lt;code&gt;Symbol.iterator&lt;/code&gt;. &lt;em&gt;…what ?&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-symbol&quot;&gt;What is a Symbol&lt;/h2&gt;

&lt;p&gt;a Symbol is a javascript function that returns a value that is guaranteed to be unique.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const helloSymbol = Symbol('hello')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They accept names, to be easily recognized and debugged, but if you create two symbols with the same name, they are not equal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const helloSymbol2 = Symbol('hello')
console.log(helloSymbol === helloSymbol2)
/// -&amp;gt; false 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;why-do-we-need-symbols&quot;&gt;Why do we &lt;em&gt;need&lt;/em&gt; symbols?&lt;/h3&gt;

&lt;p&gt;First, I’ve seen a similar concept in other languages, like Ruby. They are useful to define properties (or functions) that are shared across different types of objects. You could use symbols to uniquely identify properties in your maps, for example.&lt;/p&gt;

&lt;p&gt;There is one symbol that has been already created by the Javascript runtime, and it’s called &lt;code&gt;Symbol.iterator&lt;/code&gt;. **If an object has a property named &lt;code&gt;Symbol.iterator&lt;/code&gt;, it is iterable.&lt;/p&gt;

&lt;h2 id=&quot;how-do-we-create-an-iterator-for-our-objects&quot;&gt;How do we create an Iterator for our objects&lt;/h2&gt;

&lt;p&gt;To create an iterator the first thing to do is to attach the property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Example {
  [Symbol.iterator]() {
    ...
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, this is a legitimate name for a property. Infact, &lt;strong&gt;allowed names for properties are strings and symbols&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The only caveat is that we have to use the square brackets to define the property name, since it is an object.&lt;/p&gt;

&lt;p&gt;The iterator must return a function that returns an object, containing a &lt;code&gt;next()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;next()&lt;/code&gt; function, in turn, returns an object with two properties, &lt;code&gt;value&lt;/code&gt; (the actual element of the iteration) and &lt;code&gt;done&lt;/code&gt; (set to &lt;code&gt;true&lt;/code&gt; when the iteration has ended).&lt;/p&gt;

&lt;p&gt;Confused?&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;Do you remember the &lt;code&gt;Group&lt;/code&gt; class we &lt;a href=&quot;https://michelenasti.com/2018/09/03/some-things-you-may-not-know-about-object-oriented-javascript-es6.html&quot;&gt;designed in the last article&lt;/a&gt;? Basically it is a Set object with another name. It holds just one copy for every object (duplicates are not allowed) and we use a simple array to store data inside. Let’s write an iterator for it!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
const Group {
  ...
  [Symbol.iterator]() {
    // a reference of internal elements...
    const elements = this.elements;
    if (elements.length === 0) return; 
    //the index we'll use to track the next element to return
    let i=-1;
    return {
      //we return a next() function that will be called many times, 
      //once for every element in the Group 
      next() {
        i++;
        //the next function returns an object with two properties
        return {
          //in value we store the actual element we're returning 
          value: elements[i],
          // if true, the iteration stops 
          done: i === elements.length ? true : false
        }
      }
    }
  }
}

//Some tests! 
// You find the code for the Group class in the previous article ;) 
for (let value of Group.from([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;])) {
  console.log(value);
}
// → a
// → b
// → c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;….And this is how we create iterable objects in Javascript.&lt;/p&gt;

&lt;p&gt;Easy, isn’t it?&lt;/p&gt;

&lt;p&gt;Just to let you know, (don’t know if it’s useful..) &lt;code&gt;String&lt;/code&gt; is iterable, so you can write this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const hello = &quot;Hello&quot; 
for (const letter of hello) {
  console.log(letter)
}
// -&amp;gt; H
// -&amp;gt; e
// -&amp;gt; l
// -&amp;gt; l
// -&amp;gt; o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See you in the next iteration!&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="javascript" /><category term="es6" /><summary type="html">ES6 introduced the new for ... of syntax to iterate a collection. Did you know? And how does it work?</summary></entry></feed>