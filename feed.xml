<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.0">Jekyll</generator><link href="https://michelenasti.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://michelenasti.com/" rel="alternate" type="text/html" /><updated>2018-11-03T21:38:40+01:00</updated><id>https://michelenasti.com/</id><title type="html">Michele Nasti’s blog</title><subtitle>I'm a full stack Developer with an eye for the web.</subtitle><entry><title type="html">The easiest way to understand Javascript Generators</title><link href="https://michelenasti.com/2018/10/29/the-easiest-way-to-understand-javascript-generators.html" rel="alternate" type="text/html" title="The easiest way to understand Javascript Generators" /><published>2018-10-29T00:00:00+01:00</published><updated>2018-10-31T15:47:43+01:00</updated><id>https://michelenasti.com/2018/10/29/the-easiest-way-to-understand-javascript-generators</id><content type="html" xml:base="https://michelenasti.com/2018/10/29/the-easiest-way-to-understand-javascript-generators.html">&lt;p&gt;&lt;strong&gt;Generators in Javascript are functions that return an iterator&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Generators&lt;/strong&gt; are functions declared with the keyword &lt;code&gt;function*&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-do-you-mean-with-iterator&quot;&gt;What do you mean with “iterator”?&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;iterator&lt;/em&gt; is a design pattern usually already implemented in other programming languages. It is a &lt;strong&gt;data structure that allows you to &lt;em&gt;iterate&lt;/em&gt; (read one by one) over the elements of the data structure.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It might be very easy to think of an iterator for an array (a function that returns every element of the array, one by one), things become more complex if you want to iterate over a graph, or a tree.&lt;/p&gt;

&lt;h2 id=&quot;an-iterator-example-in-plain-javascript-no-generators-here&quot;&gt;An Iterator example in plain Javascript (no generators here)&lt;/h2&gt;

&lt;p&gt;An iterator obeys to these rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The iterator must return a function that returns an object, containing a &lt;code&gt;next()&lt;/code&gt; function.&lt;/li&gt;
  &lt;li&gt;This &lt;code&gt;next()&lt;/code&gt; function, in turn, returns an object with two properties, &lt;code&gt;value&lt;/code&gt; (the actual element of the iteration) and &lt;code&gt;done&lt;/code&gt; (set to &lt;code&gt;true&lt;/code&gt; when the iteration has ended, &lt;code&gt;false&lt;/code&gt; otherwise).&lt;/li&gt;
  &lt;li&gt;This function is attached to the property &lt;code&gt;myObj[Symbol.iterator]&lt;/code&gt; .&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example iterator for an array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Array.prototype[Symbol.iterator] = function() {
	const clone = this.slice(0); // clones the original array
    let i = -1; // iterating index; 
  	return {
    	next() {
        	i++;
        	return {
            	value: clone[i],
            	done: i &amp;gt;= clone.length
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s try this in the nodejs console…&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;gt; let iterator = [1,3,5,7,9][Symbol.iterator]()
undefined
&amp;gt; iterator
{ next: [Function: next] }
&amp;gt; iterator.next()
{ value: 1, done: false }
&amp;gt; iterator.next()
{ value: 3, done: false }
&amp;gt; iterator.next()
{ value: 5, done: false }
&amp;gt; iterator.next()
{ value: 7, done: false }
&amp;gt; iterator.next()
{ value: 9, done: false }
&amp;gt; iterator.next()
{ value: undefined, done: true }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ve already discussed this issue in &lt;a href=&quot;https://michelenasti.com/2018/09/04/symbols-iterators-in-javascript.html&quot; title=&quot;Symbols &amp;amp; Iterators in Javascript &quot;&gt;in another article&lt;/a&gt;; there you’ll find other examples and more explanations!&lt;/p&gt;

&lt;h2 id=&quot;iterators-are-not-funny&quot;&gt;Iterators are not funny.&lt;/h2&gt;

&lt;p&gt;Nobody wants to write a functions that returns an object with a next property that returns a value.&lt;/p&gt;

&lt;p&gt;That’s why the Javascript community has introduced the generators syntax.&lt;/p&gt;

&lt;p&gt;A generator is declared this way: &lt;code&gt;function* myGenerator {}&lt;/code&gt; and this will return an iterator.&lt;/p&gt;

&lt;p&gt;Let’s rewrite the preceeding example with generators:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Array.prototype[Symbol.iterator] = function*() {
  for (let i = 0; i &amp;lt; this.length; i++) {
    yield this[i];
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You know that Promises interrupt the function execution, and when the promise resolves, the flow returns to the point it was left.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not only Promises but also Generators can interrupt the execution flow&lt;/strong&gt;: when we return a value via the  &lt;code&gt;yield&lt;/code&gt; keyword, the generator function gets paused until it’s called again.&lt;/p&gt;

&lt;p&gt;Does it work?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$ node  
&amp;gt; Array.prototype[Symbol.iterator] = function*() {
...   for (let i = 0; i &amp;lt; this.length; i++) {
.....     yield this[i];
.....   }
... }
[GeneratorFunction]
&amp;gt; const iterator = [1,2,3,4,5][Symbol.iterator]() //calling!
undefined
&amp;gt; iterator
Object [Generator] {}
&amp;gt; iterator.next()
{ value: 1, done: false }
&amp;gt; iterator.next()
{ value: 2, done: false }
&amp;gt; iterator.next()
{ value: 3, done: false }
&amp;gt; iterator.next()
{ value: 4, done: false }
&amp;gt; iterator.next()
{ value: 5, done: false }
&amp;gt; iterator.next()
{ value: undefined, done: true }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, it works!!!&lt;/p&gt;

&lt;h2 id=&quot;but-why-iterators-are-important&quot;&gt;But why Iterators are important&lt;/h2&gt;

&lt;p&gt;JS uses iterators in &lt;code&gt;for ... of&lt;/code&gt; loops, so if the object after the &lt;code&gt;of&lt;/code&gt; contains an iterator, you can iterate over all the elements of the object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;gt; // The array here is using the iterator defined before...
&amp;gt; for (element of [1,2,3,4,5]) console.log(element)
1
2
3
4
5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It works!&lt;/p&gt;

&lt;h2 id=&quot;what-else-you-need-to-know&quot;&gt;What else you need to know&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;yield&lt;/code&gt; must be in generator functions; you cannot put &lt;code&gt;yield&lt;/code&gt; in  subfunctions, or in promises results, asyncs, etc.&lt;/p&gt;

&lt;h2 id=&quot;ready-to-use-it-&quot;&gt;Ready to use it ?&lt;/h2&gt;

&lt;p&gt;Generators are widely supported by all major/modern browsers, &lt;strong&gt;except for IE&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A not well known JS feature; since it is part of the language specification, the more you know, the more you gain.&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="javascript" /><category term="es6" /><category term="nodejs" /><category term="generators" /><summary type="html">Generators in Javascript are functions that return an iterator.</summary></entry><entry><title type="html">Docker cheatsheet</title><link href="https://michelenasti.com/2018/10/25/docker-cheatsheet.html" rel="alternate" type="text/html" title="Docker cheatsheet" /><published>2018-10-25T00:00:00+02:00</published><updated>2018-10-25T15:04:09+02:00</updated><id>https://michelenasti.com/2018/10/25/docker-cheatsheet</id><content type="html" xml:base="https://michelenasti.com/2018/10/25/docker-cheatsheet.html">&lt;p&gt;I usually forget everything if I don’t use it that much. Here is a brief list of docker commands learned on the go.&lt;/p&gt;

&lt;h2 id=&quot;start-a-simple-container&quot;&gt;Start a simple container&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ docker run -i -t ubuntu /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;run&lt;/code&gt; runs the &lt;code&gt;ubuntu&lt;/code&gt; image&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-i&lt;/code&gt; allows you to write to the container (“Keep STDIN open even if not attached”)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-t&lt;/code&gt; allocates a pseudoTTY and allows to read from the container&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ubuntu&lt;/code&gt; is the name of the image to start&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/bin/bash&lt;/code&gt; is the command to launch once the image is started&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In practice: use &lt;code&gt;-i -t&lt;/code&gt; to read and write from the docker image in the console.&lt;/p&gt;

&lt;p&gt;Optional commands:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;--name XXX&lt;/code&gt; assigns the name XXX to the container&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-d&lt;/code&gt; launches the container as a daemon&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-c XXX&lt;/code&gt; passes XXX to the command. In our example the command is &lt;code&gt;/bin/bash&lt;/code&gt;. With -c we can pass any kind of commands; for example &lt;code&gt;-c &quot;while true; do echo hello world; sleep 1; done&quot;&lt;/code&gt;. Docker would pass this string t bash and the container would print hello world every second without stopping. Note the quotes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;see-containers-status&quot;&gt;See containers status&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ docker ps -a 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;ps&lt;/code&gt; alone prints only the active containers&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-a&lt;/code&gt; shows also the exited containers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;see-container-logs&quot;&gt;See container logs&lt;/h2&gt;

&lt;p&gt;If the container is started as daemon you might want to see the output.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ docker logs -t -f NAME_OF_CONTAINER 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;logs NAME_OF_CONTAINER&lt;/code&gt; shows you the logs of the container. Without options you see the latest logs and then the propt gets back to your shell.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-f&lt;/code&gt; works like &lt;code&gt;-f&lt;/code&gt; in &lt;code&gt;tail -f&lt;/code&gt;; logs become live. Use &lt;code&gt;CTRL-C&lt;/code&gt; to exit.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-t&lt;/code&gt; shows also timestamps.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>musikele</name></author><category term="English" /><category term="docker" /><category term="cheatsheet" /><summary type="html">I usually forget everything if I don’t use it that much. Here is a brief list of docker commands learned on the go.</summary></entry><entry><title type="html">Perché ci sono persone che conoscono jQuery ma non conoscono JavaScript?</title><link href="https://michelenasti.com/2018/10/22/perch%C3%A9-ci-sono-persone-che-conoscono-jquery-ma-non-conoscono-javascript.html" rel="alternate" type="text/html" title="Perché ci sono persone che conoscono jQuery ma non conoscono JavaScript?" /><published>2018-10-22T00:00:00+02:00</published><updated>2018-10-22T17:48:04+02:00</updated><id>https://michelenasti.com/2018/10/22/perch%C3%A9-ci-sono-persone-che-conoscono-jquery-ma-non-conoscono-javascript</id><content type="html" xml:base="https://michelenasti.com/2018/10/22/perch%C3%A9-ci-sono-persone-che-conoscono-jquery-ma-non-conoscono-javascript.html">&lt;p&gt;Su Quora ho risposto a questa domanda: &lt;a href=&quot;https://it.quora.com/Perché-ci-sono-persone-che-conoscono-jQuery-ma-non-conoscono-JavaScript&quot;&gt;Perché ci sono persone che conoscono jQuery ma non conoscono JavaScript?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Buona lettura :)&lt;/p&gt;</content><author><name>musikele</name></author><category term="Italiano" /><category term="jquery" /><category term="javascript" /><category term="web" /><summary type="html">Su Quora ho risposto a questa domanda: Perché ci sono persone che conoscono jQuery ma non conoscono JavaScript?</summary></entry><entry><title type="html">Dovrei imparare Ruby on Rails o NodeJS ?</title><link href="https://michelenasti.com/2018/10/15/dovrei-imparare-ruby-on-rails-o-nodejs.html" rel="alternate" type="text/html" title="Dovrei imparare Ruby on Rails o NodeJS ? " /><published>2018-10-15T00:00:00+02:00</published><updated>2018-10-15T09:44:32+02:00</updated><id>https://michelenasti.com/2018/10/15/dovrei-imparare-ruby-on-rails-o-nodejs</id><content type="html" xml:base="https://michelenasti.com/2018/10/15/dovrei-imparare-ruby-on-rails-o-nodejs.html">&lt;p&gt;A questo link su Quora c’è la mia risposta alla domanda: &lt;a href=&quot;https://it.quora.com/Dovrei-imparare-Ruby-on-Rails-o-Node-js/answer/Michele-Nasti&quot;&gt;Dovrei imparare Ruby on Rails o NodeJS?&lt;/a&gt;&lt;/p&gt;</content><author><name>musikele</name></author><category term="Italiano" /><category term="ruby on rails" /><category term="ruby" /><category term="nodejs" /><summary type="html">A questo link su Quora c’è la mia risposta alla domanda: Dovrei imparare Ruby on Rails o NodeJS?</summary></entry><entry><title type="html">Let’s write our simple version of the require() function</title><link href="https://michelenasti.com/2018/10/02/let-s-write-a-simple-version-of-the-require-function.html" rel="alternate" type="text/html" title="Let's write our simple version of the require() function" /><published>2018-10-02T00:00:00+02:00</published><updated>2018-10-10T11:00:11+02:00</updated><id>https://michelenasti.com/2018/10/02/let-s-write-a-simple-version-of-the-require-function</id><content type="html" xml:base="https://michelenasti.com/2018/10/02/let-s-write-a-simple-version-of-the-require-function.html">&lt;p&gt;You should know that Javascript (better to say EcmaScript) does not specify any function to read and write files.&lt;/p&gt;

&lt;p&gt;In fact, &lt;strong&gt;Javascript is just the language used by many environments&lt;/strong&gt; (the browser, or NodeJS, are examples of environments) that offer more objects and functions to work with.&lt;/p&gt;

&lt;p&gt;Node was the first environment to offer a way to organize code in modules by using a special function called &lt;code&gt;require()&lt;/code&gt;. How does it work? Let’s try to implement it from zero.&lt;/p&gt;

&lt;p&gt;Here is an example of &lt;code&gt;require&lt;/code&gt; at work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//test.js
module.exports = &quot;Hello World&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//main.js
const test = require(&quot;./test.js&quot;); 
console.log(test) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s write that &lt;code&gt;require&lt;/code&gt; function.&lt;/p&gt;

&lt;h2 id=&quot;what-should-a-require-function-do&quot;&gt;What should a require() function do&lt;/h2&gt;

&lt;p&gt;a &lt;code&gt;require&lt;/code&gt; function is expected to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;read the content of a javascript file in a string&lt;/li&gt;
  &lt;li&gt;evaluate that code&lt;/li&gt;
  &lt;li&gt;save the exported function/object in a cache for later use (only read files once)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h3&gt;

&lt;p&gt;We will not rebuild the whole NodeJS in a single post. In fact, I will not implement many NodeJS checks and giggles, we are only interested in understand how things work.&lt;/p&gt;

&lt;p&gt;We will still need the real &lt;code&gt;require&lt;/code&gt; function to load the &lt;code&gt;fs&lt;/code&gt; module. I’m not cheating, it’s just that this post has to end sooner or later :)&lt;/p&gt;

&lt;h3 id=&quot;myrequire-function&quot;&gt;myRequire() function&lt;/h3&gt;

&lt;p&gt;here’s the code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//file setup.js

const fs = require('fs');

myRequire.cache = Object.create(null); //(1)

function myRequire(name) {   
    if (!(name in myRequire.cache)) {     
        let code = fs.readFileSync(name, 'utf8'); //(2)
        let module = {exports: {}}; //(3)
        myRequire.cache[name] = module; //(4)    
        let wrapper = Function(&quot;require, exports, module&quot;, code); //(5)
        wrapper(myRequire, module.exports, module); //(6)
    }
    return myRequire.cache[name].exports; //(7)
}

...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;did-you-forget-to-declare-myrequire-variable&quot;&gt;Did you forget to declare myRequire variable?&lt;/h3&gt;

&lt;p&gt;No. In Javascript, functions declared with &lt;code&gt;function&lt;/code&gt; keyword are evaluated before any other code (functions are “hoisted”) so they can be referenced even before they’re declared.&lt;/p&gt;

&lt;p&gt;Also, functions can have properties (&lt;em&gt;this is javascript&lt;/em&gt;!) so you can add the &lt;code&gt;cache&lt;/code&gt; property to the &lt;code&gt;myRequire&lt;/code&gt; function &lt;strong&gt;(step 1)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finally we’re creating the &lt;code&gt;cache&lt;/code&gt; property with &lt;code&gt;Object.create&lt;/code&gt;. With this function we can specify the object prototype, we have chosen to not specify a prototype. Why? This way we don’t mess with other functions or properties declared by the runtime. &lt;a href=&quot;https://www.reddit.com/r/javascript/comments/5e62us/is_there_a_reason_to_create_an_object_without_a/&quot;&gt;Here’s an explanation&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Let’s go back to &lt;code&gt;myRequire&lt;/code&gt; . If the file we’re importing is not in cache, we read the file from disk &lt;strong&gt;(step 2)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Then we declare an empty &lt;code&gt;module&lt;/code&gt; object with just one property, &lt;code&gt;exports&lt;/code&gt; &lt;strong&gt;(step 3)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We add this empty module to the cache, using the filename as the key, and then the magic happens &lt;strong&gt;(step 4)&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-function-constructor&quot;&gt;The Function constructor&lt;/h2&gt;

&lt;p&gt;In JS we can evaluate a string js code in two ways. The first way is via &lt;code&gt;eval()&lt;/code&gt; function, that is a bit dangerous (it messes up the scope) so it is highly discouraged to use it.&lt;/p&gt;

&lt;p&gt;The second way to evaluate code that we have in a string is via the &lt;code&gt;Function&lt;/code&gt; constructor. This constructor takes a string with the arguments and a string with the code. This way everything has its own scope and doesn’t mess things up for others.&lt;/p&gt;

&lt;p&gt;So, basically we are creating a new function with these variables &lt;strong&gt;(step 5)&lt;/strong&gt;: &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;exports&lt;/code&gt;, and &lt;code&gt;module&lt;/code&gt;. Let’s think for a moment at the first example of this post, the file &lt;code&gt;test.js&lt;/code&gt;: it becomes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function(require, exports, module) {
  module.exports = &quot;Hello World&quot; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the second file, &lt;code&gt;main.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function(require, exports, module) {
  const test = require(&quot;./test.js&quot;); 
  console.log(test) 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Variables that seemed “global” in files are indeed passed as function arguments.&lt;/p&gt;

&lt;h2 id=&quot;last-step-executing-the-function&quot;&gt;Last step: executing the function&lt;/h2&gt;

&lt;p&gt;We have created &lt;strong&gt;(step 6)&lt;/strong&gt; a &lt;code&gt;wrapper&lt;/code&gt; variable that holds a function, but the function is never executed. We do this at the line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;wrapper(myRequire, module.exports, module); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the second variable (that should be &lt;code&gt;exports&lt;/code&gt;) is just a handle to &lt;code&gt;module.exports&lt;/code&gt;; NodeJS creators thought that this &lt;a href=&quot;https://blog.tableflip.io/the-difference-between-module-exports-and-exports/&quot;&gt;could have helped in writing less code…&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When Node executes the function, everything that was “exported” (your public API) gets linked to the cache.&lt;/p&gt;

&lt;p&gt;(Remember the &lt;code&gt;myRequire.cache[name] = module;&lt;/code&gt; line? When it was first found by the compiler it was point to a dummy &lt;code&gt;{ exports: {} }&lt;/code&gt; object; now it contains your module.)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NOTE. Since we pass &lt;code&gt;myRequire&lt;/code&gt; to the wrapper function, we can from now on use &lt;code&gt;require&lt;/code&gt; in our test files, but our require gets called. Add a console.log if you don’t trust me ;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally… &lt;code&gt;myRequire&lt;/code&gt; returns the &lt;code&gt;export&lt;/code&gt;ed stuff you declared &lt;strong&gt;(step 7)&lt;/strong&gt;, and that we saved to the cache so we won’t have to reevaluate this code again.&lt;/p&gt;

&lt;h2 id=&quot;final-considerations&quot;&gt;Final considerations&lt;/h2&gt;

&lt;p&gt;An example of this code &lt;a href=&quot;https://github.com/musikele/require-example&quot;&gt;can be found here&lt;/a&gt;, along with some console logs that explain what’s going on.&lt;/p&gt;

&lt;p&gt;The idea of this article comes from the &lt;a href=&quot;https://eloquentjavascript.net/10_modules.html#h_N33QHgUxbG&quot;&gt;explanation of this function at chapter 10 (Modules)&lt;/a&gt;. The book (&lt;a href=&quot;https://www.eloquentjavascript.net&quot;&gt;Eloquent Javascript&lt;/a&gt;) is excellent, but I had the urge to better understand, and try with a debugger, what I could not understand with my mind alone.&lt;/p&gt;

&lt;p&gt;You should definitely read the book if you want to better understand javascript.&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="javascript" /><category term="nodejs" /><summary type="html">You should know that Javascript (better to say EcmaScript) does not specify any function to read and write files.</summary></entry><entry><title type="html">Javascript: call functions without using parentheses (what?!)</title><link href="https://michelenasti.com/2018/09/19/Javascript-chiamare-funzioni-senza-usare-parentesi-(what!).html" rel="alternate" type="text/html" title="Javascript: call functions without using parentheses (what?!)" /><published>2018-09-19T00:00:00+02:00</published><updated>2018-09-20T09:52:23+02:00</updated><id>https://michelenasti.com/2018/09/19/Javascript-chiamare-funzioni-senza-usare-parentesi-(what!)</id><content type="html" xml:base="https://michelenasti.com/2018/09/19/Javascript-chiamare-funzioni-senza-usare-parentesi-(what!).html">&lt;p&gt;Let’s dig in a not-well-publicized ES6 feature: calling functions without using parentheses.&lt;/p&gt;

&lt;p&gt;If you are familiar with Ruby, you know that in Ruby you can omit parentheses when they’re not ambiguous:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;puts 'hello world' 
puts('hello world') 
//-&amp;gt; same result!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But we’re in javascript and this is not allowed. Uhm… &lt;strong&gt;in some forms it &lt;em&gt;IS&lt;/em&gt; allowed!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-ive-discovered-this-sqorn&quot;&gt;How I’ve discovered this: SQORN&lt;/h2&gt;

&lt;p&gt;In my search for new libraries, I found &lt;a href=&quot;https://sqorn.org/&quot;&gt;SQORN&lt;/a&gt; library. Sqorn allows you to write sql queries in nodejs.&lt;/p&gt;

&lt;p&gt;What captured my attention is &lt;em&gt;the way Sqorn is intended to be used&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const sq = require('sqorn-pg')()
const kid = sq.from`person`.where`age &amp;lt; 13` 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What’s happening here?! Where are parentheses? &lt;strong&gt;Is this javascript after all?&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;template-strings&quot;&gt;Template strings&lt;/h2&gt;

&lt;p&gt;You should already know the newest way of declaring a string in JS, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const str = `this is a string!`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it is very useful because you can interpolate values inside, witouth concatenating:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var name = 'Michele';
//es5
var helloES5 = &quot;Hello, &quot; + name;
//es6 
const helloES6 = `Hello ${name}`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Imagine you have to concatenate 6-7 items in the same sentence… You’ll agree the ES6 version is clearer ;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The nice part of this string declaration is that you can pass strings as arguments to functions without parentheses:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function hello(name) {
	console.log(`How are you ${name}`);
}

// The convention is to write the string right 
// after the function name...
hello`Michele` 
//-&amp;gt; How are you Michele 

//...but you can put a space too 
hello `Michele `
//-&amp;gt; How are you Michele
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This syntax doesn’t work with &lt;code&gt;'&lt;/code&gt; or &lt;code&gt;&quot;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;hello 'Michele'
//-&amp;gt; SyntaxError: unexpected token: string literal
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;more-power-to-string-templates&quot;&gt;More power to string templates!&lt;/h2&gt;

&lt;p&gt;Studying this syntax I discovered intresting features. For example, functions can extract the variables (ones in &lt;code&gt;${...}&lt;/code&gt;) from the template string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var a = 5;
var b = 10;

function tag(strings, ...values) {
  console.log(strings[0]); // &quot;Hello &quot;
  console.log(strings[1]); // &quot; World &quot;
  console.log(values[0]);  // 15
  console.log(values[1]);  // 50
  
  return &quot;Bazinga!&quot;;
}

tag`Hello ${ a + b } World ${ a * b }`;
// &quot;Bazinga!&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This stuff is pretty nice but it is a bit obscure. Infact, apart from SQORN, I’ve never seen this syntax used elsewhere. &lt;strong&gt;It’s a nice-to-know feature, good for impressing others, but my suggestion is to use this only if it’s the clearest way to express your concepts.&lt;/strong&gt;&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="javascript" /><summary type="html">Let’s dig in a not-well-publicized ES6 feature: calling functions without using parentheses.</summary></entry><entry><title type="html">Symbols &amp;amp; Iterators in Javascript</title><link href="https://michelenasti.com/2018/09/04/symbols-iterators-in-javascript.html" rel="alternate" type="text/html" title="Symbols &amp; Iterators in Javascript" /><published>2018-09-04T00:00:00+02:00</published><updated>2018-09-04T16:41:34+02:00</updated><id>https://michelenasti.com/2018/09/04/symbols-iterators-in-javascript</id><content type="html" xml:base="https://michelenasti.com/2018/09/04/symbols-iterators-in-javascript.html">&lt;p&gt;ES6 introduced the new &lt;code&gt;for ... of&lt;/code&gt; syntax to iterate a collection. Did you know? And how does it work?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arr = ['banana', 'apple', 'orange']

for (const fruit of arr) {
  console.log(fruit)
}
// -&amp;gt; banana
// -&amp;gt; apple
// -&amp;gt; orange
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;how-does-it-work&quot;&gt;How does it work&lt;/h3&gt;

&lt;p&gt;What you are seeing is a syntax that iterates on an &lt;strong&gt;iterator&lt;/strong&gt;, a common concept in other languages but fairly new in Javascript.&lt;/p&gt;

&lt;p&gt;Basically, if an object has an &lt;em&gt;iterator&lt;/em&gt; you can use the &lt;code&gt;for...of&lt;/code&gt; syntax to iterate on it.&lt;/p&gt;

&lt;h3 id=&quot;how-do-we-create-an-iterator&quot;&gt;How do we create an iterator?&lt;/h3&gt;

&lt;p&gt;To create iterators, we must provide a new property in our object called &lt;code&gt;Symbol.iterator&lt;/code&gt;. &lt;em&gt;…what ?&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-symbol&quot;&gt;What is a Symbol&lt;/h2&gt;

&lt;p&gt;a Symbol is a javascript function that returns a value that is guaranteed to be unique.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const helloSymbol = Symbol('hello')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They accept names, to be easily recognized and debugged, but if you create two symbols with the same name, they are not equal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const helloSymbol2 = Symbol('hello')
console.log(helloSymbol === helloSymbol2)
/// -&amp;gt; false 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;why-do-we-need-symbols&quot;&gt;Why do we &lt;em&gt;need&lt;/em&gt; symbols?&lt;/h3&gt;

&lt;p&gt;First, I’ve seen a similar concept in other languages, like Ruby. They are useful to define properties (or functions) that are shared across different types of objects. You could use symbols to uniquely identify properties in your maps, for example.&lt;/p&gt;

&lt;p&gt;There is one symbol that has been already created by the Javascript runtime, and it’s called &lt;code&gt;Symbol.iterator&lt;/code&gt;. **If an object has a property named &lt;code&gt;Symbol.iterator&lt;/code&gt;, it is iterable.&lt;/p&gt;

&lt;h2 id=&quot;how-do-we-create-an-iterator-for-our-objects&quot;&gt;How do we create an Iterator for our objects&lt;/h2&gt;

&lt;p&gt;To create an iterator the first thing to do is to attach the property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Example {
  [Symbol.iterator]() {
    ...
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, this is a legitimate name for a property. Infact, &lt;strong&gt;allowed names for properties are strings and symbols&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The only caveat is that we have to use the square brackets to define the property name, since it is an object.&lt;/p&gt;

&lt;p&gt;The iterator must return a function that returns an object, containing a &lt;code&gt;next()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;next()&lt;/code&gt; function, in turn, returns an object with two properties, &lt;code&gt;value&lt;/code&gt; (the actual element of the iteration) and &lt;code&gt;done&lt;/code&gt; (set to &lt;code&gt;true&lt;/code&gt; when the iteration has ended).&lt;/p&gt;

&lt;p&gt;Confused?&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;Do you remember the &lt;code&gt;Group&lt;/code&gt; class we &lt;a href=&quot;https://michelenasti.com/2018/09/03/some-things-you-may-not-know-about-object-oriented-javascript-es6.html&quot;&gt;designed in the last article&lt;/a&gt;? Basically it is a Set object with another name. It holds just one copy for every object (duplicates are not allowed) and we use a simple array to store data inside. Let’s write an iterator for it!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
const Group {
  ...
  [Symbol.iterator]() {
    // a reference of internal elements...
    const elements = this.elements;
    if (elements.length === 0) return; 
    //the index we'll use to track the next element to return
    let i=-1;
    return {
      //we return a next() function that will be called many times, 
      //once for every element in the Group 
      next() {
        i++;
        //the next function returns an object with two properties
        return {
          //in value we store the actual element we're returning 
          value: elements[i],
          // if true, the iteration stops 
          done: i === elements.length ? true : false
        }
      }
    }
  }
}

//Some tests! 
// You find the code for the Group class in the previous article ;) 
for (let value of Group.from([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;])) {
  console.log(value);
}
// → a
// → b
// → c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;….And this is how we create iterable objects in Javascript.&lt;/p&gt;

&lt;p&gt;Easy, isn’t it?&lt;/p&gt;

&lt;p&gt;Just to let you know, (don’t know if it’s useful..) &lt;code&gt;String&lt;/code&gt; is iterable, so you can write this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const hello = &quot;Hello&quot; 
for (const letter of hello) {
  console.log(letter)
}
// -&amp;gt; H
// -&amp;gt; e
// -&amp;gt; l
// -&amp;gt; l
// -&amp;gt; o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See you in the next iteration!&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="javascript" /><category term="es6" /><summary type="html">ES6 introduced the new for ... of syntax to iterate a collection. Did you know? And how does it work?</summary></entry><entry><title type="html">Things you may not know about Object Oriented Javascript (Es6)</title><link href="https://michelenasti.com/2018/09/03/some-things-you-may-not-know-about-object-oriented-javascript-es6.html" rel="alternate" type="text/html" title="Things you may not know about Object Oriented Javascript (Es6)" /><published>2018-09-03T00:00:00+02:00</published><updated>2018-09-04T13:09:43+02:00</updated><id>https://michelenasti.com/2018/09/03/some-things-you-may-not-know-about-object-oriented-javascript-es6</id><content type="html" xml:base="https://michelenasti.com/2018/09/03/some-things-you-may-not-know-about-object-oriented-javascript-es6.html">&lt;p&gt;Hi there! Let’s try to create a simple &lt;code&gt;Group&lt;/code&gt; object, very similar to the &lt;a href=&quot;https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt;existing &lt;code&gt;Set&lt;/code&gt; object&lt;/a&gt; in Javascript. Here’s the specification for this Abstract Data Type:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It should provide a constructor that creates an empty Group.&lt;/li&gt;
  &lt;li&gt;An object can be contained only once; there cannot be duplicates.&lt;/li&gt;
  &lt;li&gt;It must provide &lt;code&gt;add()&lt;/code&gt;, &lt;code&gt;delete()&lt;/code&gt; and &lt;code&gt;has()&lt;/code&gt; methods.&lt;/li&gt;
  &lt;li&gt;There must be a &lt;code&gt;length&lt;/code&gt; property containing the number of objects stored inside.&lt;/li&gt;
  &lt;li&gt;Provide a static method that creates a &lt;code&gt;Group&lt;/code&gt; from an array.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;We’ll use this example to explain stuff regarding javascript new &lt;code&gt;class&lt;/code&gt; keyword introduced in ES6. We will &lt;strong&gt;not&lt;/strong&gt; focus on the performance of this class; only on js syntax.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-constructor&quot;&gt;The constructor&lt;/h2&gt;

&lt;p&gt;Let’s start from the basics. Here’s the constructor for this object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Group {
  
  constructor() {
    this.elements = []
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Group&lt;/code&gt; class has an internal array that will hold the list of objects.&lt;/p&gt;

&lt;h2 id=&quot;the-has-method&quot;&gt;The has() method&lt;/h2&gt;

&lt;p&gt;Let’s start with the &lt;code&gt;has&lt;/code&gt; method, because it will be used widely in other methods. This method should check that an element is already in the group. Here’s the code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Group {
  ...
  has(element) {
    return this.elements.indexOf(element) &amp;gt;= 0 ? true : false
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically we leave to &lt;code&gt;indexOf()&lt;/code&gt; the burden of checking if the element is already present in our group.&lt;/p&gt;

&lt;h2 id=&quot;add-and-delete-method&quot;&gt;add() and delete() method&lt;/h2&gt;

&lt;p&gt;If an element is not present, &lt;code&gt;add&lt;/code&gt; should add the element to the group. And of course,  if an element is present, &lt;code&gt;delete&lt;/code&gt; should… delete.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Group {
  ...
  add(element) {
    if (this.has(element)) return
    this.elements.push(element)
  }

  delete(element) {
    if (!this.has(element)) return
    this.elements.splice(this.elements.indexOf(element), 1)        
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What’s going on in the &lt;code&gt;delete()&lt;/code&gt; method? We search for the index of the element in the array, then we call the &lt;code&gt;[splice()](https://www.w3schools.com/jsref/jsref_splice.asp)&lt;/code&gt;&lt;a href=&quot;https://www.w3schools.com/jsref/jsref_splice.asp&quot;&gt; function&lt;/a&gt; that returns a new array without the element at the specified index. The second argument is the number of elements to remove.&lt;/p&gt;

&lt;h2 id=&quot;that-dont-impress-me-much-fun-begins-now-getters-and-setters&quot;&gt;“That don’t impress me much”. Fun begins now: getters and setters&lt;/h2&gt;

&lt;p&gt;Let’s see how to create a &lt;em&gt;derived&lt;/em&gt; property in a javascript object. A derived property is a property that changes when another property changes. For example we want to write a derived property to get the number of the elements for the group.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Group {
  ...
  get length() {
    return this.elements.length
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;there’s the keyword &lt;code&gt;get&lt;/code&gt; that specifies this property as a &lt;em&gt;getter&lt;/em&gt;. When we call &lt;code&gt;group.length&lt;/code&gt; (&lt;strong&gt;note: no parenthesis!&lt;/strong&gt;) we get the length of the inner array. We can write very complex stuff in here, and we can access the &lt;code&gt;length&lt;/code&gt; property as a normal property - the user will not know what’s going on internally.&lt;/li&gt;
  &lt;li&gt;There’s also the &lt;code&gt;set&lt;/code&gt; keyword that you can use for setting a property. Here’s an example:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Example {
  constructor() {
    this.hidden = 3
  }
  set property(element) {
    this.hidden = element
  }
  
  get property() {
    return this.hidden*this.hidden 
}

const example = new Example()
console.log(example.hidden)
// --&amp;gt; 3
console.log(example.property)
// --&amp;gt; 9, the getter returns the square of hidden
example.property = 4
// now `hidden` is set to 4
console.log(example.hidden)
// --&amp;gt; 4
console.log(example.property)
// --&amp;gt; 16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This mechanism is very powerful and you can do a lot of stuff with it. VueJS uses this mechanism to create the Vue object filled with the &lt;code&gt;data&lt;/code&gt; properties.&lt;/p&gt;

&lt;h2 id=&quot;static-methods&quot;&gt;Static methods&lt;/h2&gt;

&lt;p&gt;Our last piece of exercise is to build a static method for the &lt;code&gt;Group&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;A static method are called without instantiating their class and are callable when the class is not instantiated. Let’s see an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Group {
  ...
  static from(elements) {
	//here we instantiate the object that will be returned
    const group = new Group()
    //for semplicity let's assume that `elements` is an array. 
	for (let elem of elements) {
      group.add(elem)
    }
    return group
  }
}

const group = Group.from([&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;one&quot;]);
// -&amp;gt; returns a Group 

console.log(group.length)
// -&amp;gt; 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;finally&quot;&gt;Finally…&lt;/h2&gt;

&lt;p&gt;I don’t suggest you to program in JS as you would in Java; JS object oriented features in JS are very different compared to other languages. However, if you find that something should be an object, and you end up writing an Object, there two tricks might become handy.&lt;/p&gt;

&lt;p&gt;Next time we’ll talk about iterators and symbols in Javascript, another nice addition to the language. Stay tuned!&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="javascript" /><category term="es6" /><summary type="html">Hi there! Let’s try to create a simple Group object, very similar to the existing Set object in Javascript. Here’s the specification for this Abstract Data Type:</summary></entry><entry><title type="html">“ma… cosa intendete per testing?” - una breve introduzione al testing software</title><link href="https://michelenasti.com/2018/08/22/ma-cosa-intendete-per-testing-una-breve-introduzione-al-testing-software.html" rel="alternate" type="text/html" title="&quot;ma... cosa intendete per testing?&quot; - una breve introduzione al testing software " /><published>2018-08-22T00:00:00+02:00</published><updated>2018-08-22T13:19:02+02:00</updated><id>https://michelenasti.com/2018/08/22/ma-cosa-intendete-per-testing-una-breve-introduzione-al-testing-software</id><content type="html" xml:base="https://michelenasti.com/2018/08/22/ma-cosa-intendete-per-testing-una-breve-introduzione-al-testing-software.html">&lt;p&gt;Mi chiedeva Emanuele su Quora:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;…posso sapere con una certa  precisione cosa intendete con testing? Questa cosa mi ha incuriosito e  mi piacerebbe conoscerne di più.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/Testing_in_Progress.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Per testing si intende &lt;strong&gt;un’esecuzione del codice per assicurarsi che faccia  esattamente ciò che viene richiesto&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Esistono sostanzialmente due tipi di testing, &lt;em&gt;manuale&lt;/em&gt; e &lt;em&gt;automatico&lt;/em&gt;. Il &lt;strong&gt;testing manuale&lt;/strong&gt; è quello che fa un programmatore dopo che ha sviluppato il codice: lancia l’applicazione e verifica che faccia ciò che dovrebbe. A volte sono altri utenti in carne ed ossa a fare il test dell’applicazione.&lt;/p&gt;

&lt;p&gt;Il testing manuale è efficace e immediato se l’app è semplice o di piccole dimensioni: al crescere della complessità potrebbe essere lungo in termini di tempo, e impreciso nei risultati.&lt;/p&gt;

&lt;p&gt;Esempio: &lt;em&gt;un’app per prenotare visite mediche&lt;/em&gt;. Immaginiamo di aver realizzato la funzionalità di modifica della data di una visita. Se faccio l’edit di una visita e seleziono una data e un orario che già sono state prenotate da qualcun altro, il sistema deve rispondere che l’orario richiesto non è disponibile. Riesci a immaginare quanto tempo serva per poter rieseguire questo caso di test, ogni volta? &lt;em&gt;(Ti aiuto: bisogna prima creare una visita… poi crearne una seconda… poi prendere la prima e impostare la data e l’orario della seconda… e verificare il messaggio di errore)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Passiamo al &lt;strong&gt;test di  tipo automatico&lt;/strong&gt;. Innanzitutto viene scritto in un linguaggio di  programmazione vero e proprio. Nel test viene definito il setup iniziale (es. crea DUE visite nel sistema) e poi viene eseguito il test vero e proprio, ossia cerca la prima visita, e cambia la data e l’orario a quello della seconda.&lt;/p&gt;

&lt;p&gt;Infine, controlliamo che il sistema abbia restituito l’errore. Se è accaduto, il test ha avuto successo (si, se il  sistema risponde correttamente che un’operazione non si può fare, è un  caso di successo!). Se così non fosse, il test dovrebbe fallire.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quali sono gli svantaggi di questo approccio?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;che il test lo può scrivere solo un programmatore,&lt;/li&gt;
  &lt;li&gt;per scrivere il test ci vuole del tempo un  po’ più lungo della mera esecuzione;&lt;/li&gt;
  &lt;li&gt;inoltre, se cambia l’applicazione, bisogna cambiare anche i test relativi.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;I vantaggi, invece, sono un  aumento della qualità generale e un’efficienza nell’esecuzione&lt;/strong&gt;, anche in termini di tempo. Ad esempio, è prassi eseguire tutti i test ad ogni modifica del sistema, per assicurarsi di non aver rotto aree  dell’applicazione collegate con quella che stiamo modificando e che  difficilmente andremmo a testare “manualmente”.&lt;/p&gt;

&lt;p&gt;In questa risposta ho dato una visione molto generica del software testing; esistono tante altre sotto-aree (integration, unit, e2e…) e tecniche da conoscere, ma il senso generale è che si, &lt;strong&gt;un computer può  fare dei test al posto tuo, è molto più veloce di te, e ne guadagni in qualità.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;Link alla domanda originale&lt;/a&gt;&lt;/p&gt;</content><author><name>musikele</name></author><category term="Italiano" /><category term="testing" /><summary type="html">Mi chiedeva Emanuele su Quora:</summary></entry><entry><title type="html">Handling configuration for mutliple environments in NodeJS</title><link href="https://michelenasti.com/2018/07/22/laravel-style-config-in-nodejs.html" rel="alternate" type="text/html" title="Handling configuration for mutliple environments in NodeJS" /><published>2018-07-22T00:00:00+02:00</published><updated>2018-07-22T09:10:53+02:00</updated><id>https://michelenasti.com/2018/07/22/laravel-style-config-in-nodejs</id><content type="html" xml:base="https://michelenasti.com/2018/07/22/laravel-style-config-in-nodejs.html">&lt;p&gt;Imagine you have a NodeJS app you’re writing, and this app runs on several different environments:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;on your &lt;strong&gt;developer&lt;/strong&gt; PC, it should use some environment variables (e.g. database connection to &lt;em&gt;localhost&lt;/em&gt;, port to use &lt;em&gt;3000&lt;/em&gt;…)&lt;/li&gt;
  &lt;li&gt;when you push your code you may want to run some continuous integration &amp;amp; deployiment on a &lt;strong&gt;test environment&lt;/strong&gt;, so you have to configure new environment variables: database now points to &lt;em&gt;192.168.xx.yy&lt;/em&gt;, port is &lt;em&gt;8000…&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Finally, on the &lt;strong&gt;production environment&lt;/strong&gt; you use the official values for these configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How do you handle this? There are several ways to accomplish this task, I wanted to replicate the simple, easy solution provided by &lt;em&gt;Laravel&lt;/em&gt; in &lt;strong&gt;NodeJS&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-does-laravel-config-works&quot;&gt;How does laravel config works&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;https://laravel.com/docs/5.6/configuration&quot;&gt;Laravel&lt;/a&gt; you create as many env files you want, for example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;.dev.env&lt;/code&gt;, that contains configuration for development environment&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;.test.env&lt;/code&gt;, for test environment&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;.prod.env&lt;/code&gt; for production&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then there’s a last file called &lt;code&gt;.env&lt;/code&gt; that contains a single variable:&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;APP_ENV=dev&lt;/code&gt; (or test, or prod).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’re in NodeJS, how do we simulate this behaviour?&lt;/p&gt;

&lt;h2 id=&quot;a-node-solution&quot;&gt;a Node solution&lt;/h2&gt;

&lt;p&gt;First, our configuration files are js files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;.development.js&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;.test.js&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;.production.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Naming of files has changed a little bit, we’ll see why in a while.&lt;/p&gt;

&lt;p&gt;Let’s see the content of the .development.js test file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;//.development.js 

module.exports = {
    API_URL: 'api_url',
    API_KEY: 'api_key',
    SECRET_KEY: 'secret_key'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;.production.js&lt;/code&gt; and &lt;code&gt;.test.js&lt;/code&gt; will contain an object with the same keys but different values.&lt;/p&gt;

&lt;h2 id=&quot;the-environment-variable-node_env&quot;&gt;The environment variable NODE_ENV&lt;/h2&gt;

&lt;p&gt;Since Express became the most popular application server in Node, the NODE_ENV variable has became popular too. In Express, &lt;a href=&quot;https://stackoverflow.com/a/16979503/1020090&quot;&gt;app.get(‘env’) is used to retrieve the execution environment&lt;/a&gt;. Many popular platforms, like Heroku, set this variable to &lt;code&gt;production&lt;/code&gt; and you can also change to your needs, too.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app.get('env')&lt;/code&gt; is pretty much implemented like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;return process.env.NODE_ENV || 'development'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So you know that if the variable is not set, it is defaulted to &lt;code&gt;development&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s write a solution that is not express-dependent.&lt;/p&gt;

&lt;p&gt;Here’s the configuration.js file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;//configuration.js 

const env = process.env.NODE_ENV || 'development'

module.exports = require(`../.${env}.js`) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Based on the &lt;code&gt;NODE_ENV&lt;/code&gt; variable, we will pick up the right &lt;code&gt;.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;And now let’s test this. Run &lt;code&gt;node index.js&lt;/code&gt; (should start with &lt;code&gt;development&lt;/code&gt; environment):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-index.js&quot;&gt;//index.js

const configuration = require('./configuration')

console.log('configuration: ', configuration)
// =&amp;gt;  
// configuration:  { API_URL: 'api_url',
// API_KEY: 'api_key',
// SECRET_KEY: 'secret_key' }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How to start with other configurations?&lt;/p&gt;

&lt;p&gt;Either set this in package.json:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;//package.json 

 &quot;scripts&quot;: {
    &quot;start&quot;: &quot;node index.js&quot;,
    &quot;start:test&quot;: &quot;NODE_ENV=test node index.js&quot;,
    &quot;start:prod&quot;: &quot;NODE_ENV=production node index.js&quot;
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and run with &lt;code&gt;npm run start:test&lt;/code&gt;; or set the &lt;code&gt;NODE_ENV&lt;/code&gt; variable directly on the server (docker, heroku, aws… they all allow you to set env variables).&lt;/p&gt;

&lt;h2 id=&quot;some-security-concerns&quot;&gt;Some security concerns&lt;/h2&gt;

&lt;p&gt;This approach is very easy to use but you should not versionate &lt;code&gt;.production.js&lt;/code&gt; file, as it will contain sensitive data. In your build process consider injecting this file from some other secure location.&lt;/p&gt;

&lt;p&gt;An alternative could be to use environment variables only for the production file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;//.production.js 
module.exports = {
    API_URL: process.env.API_URL || 'some_value' ,
    API_KEY: process.env.API_KEY,
    SECRET_KEY: process.env.SECRET_KEY,
    ... 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The good thing about this approach is that you can even mix the two things or swap them altogether.&lt;/p&gt;

&lt;p&gt;Happy coding with your configurations ;)&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="nodejs" /><category term="configuration" /><category term="laravel" /><summary type="html">Imagine you have a NodeJS app you’re writing, and this app runs on several different environments:</summary></entry></feed>