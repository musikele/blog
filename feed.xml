<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://michelenasti.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://michelenasti.com/" rel="alternate" type="text/html" /><updated>2019-10-26T01:46:10+02:00</updated><id>https://michelenasti.com/feed.xml</id><title type="html">Michele Nasti’s blog</title><subtitle>I'm a full stack Developer with an eye for the web.</subtitle><entry><title type="html">How internet ads work</title><link href="https://michelenasti.com/2019/10/21/how-internet-ads-work.html" rel="alternate" type="text/html" title="How internet ads work" /><published>2019-10-21T00:00:00+02:00</published><updated>2019-10-19T11:11:08+02:00</updated><id>https://michelenasti.com/2019/10/21/how-internet-ads-work</id><content type="html" xml:base="https://michelenasti.com/2019/10/21/how-internet-ads-work.html">&lt;p&gt;Since money was invented, people felt the urge to advertise their products to others. I live very near to Pompeii (Italy) and if you visit this incredible town you’ll discover that in 79 a.D. there were a lot of ads painted on walls, trying to sell you wine, prostitutes, or ask for a vote.&lt;/p&gt;

&lt;p&gt;Fast-forward a couple of millenia, we have many websites that are free to their users - think at your favourite newspaper. This is totally different from how newspapers made money few years ago: you had to buy them in shops. So, how they pay salaries to their employees now?&lt;/p&gt;

&lt;p&gt;You can guess - since it’s the topic of this post - many websites earn money by displaying ads. So here’s an engineering point of view of this world.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pexels-photo-802024.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This year I started working for an adtech company and this post tries to describe what I’ve learned of this mega-curious world.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-were-ads-in-1999&quot;&gt;How were ads in 1999?&lt;/h2&gt;

&lt;p&gt;In 1999 I was 14 years old, so what I know is based on the tales of wise old men. When a news company launched a website, it had to find &lt;strong&gt;advertisers&lt;/strong&gt; that wanted to display ads on their website. The news company, in adtech words, is called &lt;strong&gt;publisher&lt;/strong&gt;. Many publishers had sales teams that contacted advertisers directly, trying to make a deal like “Publisher will display 1,5 million impressions of these &lt;em&gt;images&lt;/em&gt; (in adtech terms: &lt;strong&gt;creatives&lt;/strong&gt;) and Advertiser will pay 100k bucks”.&lt;/p&gt;

&lt;p&gt;Once the deal was closed, there were needs to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;track impressions&lt;/strong&gt; - how many times ads were rendered? and how many times they were actually &lt;em&gt;viewed&lt;/em&gt;? and clicked?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;handle multiple campaigns concurrently&lt;/strong&gt; - I can close a deal with advertiser A for 1.5mln impressions per 100k, but then close another deal with advertiser B for 500k impressions for 200k - which one would you show most? and with what algorithm?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Turns out, you need a software to implement these logics. A software like that is called &lt;strong&gt;Ad Manager&lt;/strong&gt;. One of the most famous ad managers is…&lt;/p&gt;

&lt;h2 id=&quot;doubleclick-for-publishers&quot;&gt;Doubleclick for Publishers&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;DoubleClick for Publishers,&lt;/strong&gt; also known as &lt;strong&gt;DFP&lt;/strong&gt;, has been one of the most successful ad managers ever created. I think part of his success was due to the fact it was a SaaS based product, developed when SaaS was not even a word :)&lt;/p&gt;

&lt;p&gt;DFP allowed to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;organize campaigns, creatives, orders&lt;/strong&gt;, &lt;strong&gt;line items&lt;/strong&gt;, etc. Many obscure terms I will not explain here. I will only explain what is needed to understand the rest of this article, btw.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;serve the&lt;/strong&gt; &lt;strong&gt;most valuable creative&lt;/strong&gt; amongst the closed deals&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;track, analyze, report&lt;/strong&gt; - because after all, based on this data, advertisers will pay publishers!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not all publishers had the resources for a &lt;em&gt;dedicated sales team&lt;/em&gt; or the power to &lt;em&gt;engage with the most valuable customers&lt;/em&gt;. Also, when campaigns are exhausted, there are no remnant ads to show and this can lead to blanks in some moments of the year. But things are going to change again because at some point in 2007…&lt;/p&gt;

&lt;h2 id=&quot;google-acquires-dfp&quot;&gt;Google acquires DFP&lt;/h2&gt;

&lt;p&gt;With the acquisition of DFP, Google does not change the original philosophy of DFP as an Ad Manager, but introduces a new element: instead of choosing ads from deals only, publishers can also include ads from &lt;strong&gt;AdExchange&lt;/strong&gt; (abbreviated: &lt;strong&gt;AdEx&lt;/strong&gt;). This means that when for an &lt;em&gt;ad unit&lt;/em&gt; (the area to fill on the publisher’s website) there are no ads to display, DFP could deliver an ad from Google’s network of advertisers. These are good news for small publishers who could get ads from AdEx and do not base their incomes on direct sales only.&lt;/p&gt;

&lt;p&gt;With Google acquisition, DFP also started to track users and display ads based on their navigation history. So if you navigate an exclusive watch website, you’ll see the ad for that watch following you on other websites.&lt;/p&gt;

&lt;p&gt;DFP has now been renamed in &lt;strong&gt;Google Ads Manager (GAM).&lt;/strong&gt; I will use GAM for the rest of the article but the world is still calling DFP at the time of writing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/google ad manager .png&quot; alt=&quot;&quot; title=&quot;Google Ads Manager when you setup a new account, appears like this&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-happens-when-a-browser-asks-for-an-ad-to-gam&quot;&gt;What happens when a browser asks for an ad to GAM&lt;/h2&gt;

&lt;p&gt;Let’s pretend you’re a publisher. To integrate GAM on your website you must &lt;em&gt;create an account and configure it&lt;/em&gt;. I am not an expert in this field so I will not discuss this in detail. One important part, however, is that &lt;strong&gt;when you setup a “deal”, you can insert the advertiser’s creatives in the form of javascript code&lt;/strong&gt;, and &lt;strong&gt;if this creative is selected for display, it will be injected in the user page inside an iframe&lt;/strong&gt;. Keep this in mind: it is one of the foundation pieces of header bidding.&lt;/p&gt;

&lt;p&gt;Let me introduce another important piece of terminology now, a “deal” is called &lt;strong&gt;Order&lt;/strong&gt; in GAM words.&lt;/p&gt;

&lt;p&gt;The next step is to integrate &lt;code&gt;googletag&lt;/code&gt; code. This is a JS library that will make the request to GAM for an ad, that will be shown in a &lt;code&gt;div&lt;/code&gt; on your website. Along with the request, &lt;code&gt;googletag&lt;/code&gt; will pass some cookies trying to identify the user and only show ads that match the user interests.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;googletag&lt;/code&gt; will take care of &lt;strong&gt;resizing and render the ad, track viewability&lt;/strong&gt; (that means: has the ad been in the viewport for more than 1.5 seconds? if yes, publisher will be paid), and detect fraud. The internals are obscure, probably to avoid malicious attempts to reverse engineer and forge attacks.&lt;/p&gt;

&lt;p&gt;An important aspect of &lt;code&gt;googletag&lt;/code&gt; is that &lt;em&gt;you can define custom key-value pairs along with the request&lt;/em&gt;, and this feature is called (in GAM terms) &lt;strong&gt;Targeting&lt;/strong&gt;. A targeting example could be &lt;code&gt;country=IT&lt;/code&gt; or &lt;code&gt;interests=sports&lt;/code&gt;. GAM can be later configured to read these key-value pairs, and do some logic on them - like, if the user is from Italy and is interested in sports, show him ads from the important sports brand I have a deal with.&lt;/p&gt;

&lt;p&gt;Why I said that it’s important? well, &lt;strong&gt;&lt;em&gt;Targeting&lt;/em&gt; is another key concept of Header Bidding. I’ll explain later on.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://support.google.com/admanager/answer/1638622?hl=en&quot;&gt;Here is an example googletag call&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;is-there-life-after-google&quot;&gt;Is there life after Google?&lt;/h2&gt;

&lt;p&gt;In Ad tech terms, Google is a &lt;strong&gt;SSP&lt;/strong&gt; - &lt;strong&gt;Supply Side Partner&lt;/strong&gt; - meaning it will supply publishers with ads (and pay them). Are there other SSPs ? Yes there are, I guess more than 2-300, however the number of ads they can provide is much lower than that of Google and Facebook. An estimation is that 60% of all ads are traded by Google and Facebook, leaving the remaining SSPs trading the remaining 40%. So it’s a tough market and many websites do not even think of substituting or integrating with other SSPs.&lt;/p&gt;

&lt;p&gt;However, living with Google only is not the best option. Google does not make any effort to be transparent on how much ads have been payed, so &lt;strong&gt;some suppose that Google is showing us the most profitable ads for &lt;em&gt;them&lt;/em&gt;&lt;/strong&gt; - not for &lt;em&gt;publishers&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Due to the fact that Google has the majority of the market, it is &lt;em&gt;ignoring&lt;/em&gt; all other SSPs and does not offer an easy way to integrate them in DFP.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SSPs still have some advantages&lt;/strong&gt;. For example, when asking for an ad to an SSP, we know exactly how much we’re going to be paid if we render that ad, and this means &lt;strong&gt;we can start auctions amongst all configured SSPs and get the best priced ad.&lt;/strong&gt; The price is usually given in &lt;strong&gt;CPM&lt;/strong&gt; (&lt;em&gt;cost per mille -&lt;/em&gt; cost per thousand impressions), so if an ad has a cpm of 10$, one single impression is worth 0.01$ ! (The average cpm, at the time of writing, is around 1$ if you were asking).&lt;/p&gt;

&lt;p&gt;Interestingly, &lt;strong&gt;we can use this feature to deduce the price of GAM ads&lt;/strong&gt;, too. How? Let’s introduce…&lt;/p&gt;

&lt;h2 id=&quot;header-bidding&quot;&gt;Header Bidding&lt;/h2&gt;

&lt;p&gt;the name &lt;em&gt;Header bidding (HB)&lt;/em&gt; comes from the fact that, historically, what I’m going to describe was done in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; part of the page. This is no more true, but the name remained :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HB &lt;em&gt;hacks&lt;/em&gt; GAM to allow other SSPs to bid for the same ad units&lt;/strong&gt;. Let’s recap the three foundational items:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;we can inject whatever creative we want for custom orders.&lt;/li&gt;
  &lt;li&gt;we can define targeting on GAM requests, so we can display specific ads to some users.&lt;/li&gt;
  &lt;li&gt;SSPs will tell us what they’re paying us, and we can use this piece of information to estimate the price of GAM ads too.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’re finally ready to discover &lt;strong&gt;the HB process&lt;/strong&gt;, &lt;em&gt;for dummies:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;We start an auction for every ad unit on page&lt;/strong&gt;. This means that we ask a bunch of SSPs (except Google, at this stage!) how much they are willing to pay if their ad is chosen.&lt;/li&gt;
  &lt;li&gt;SSPs will answer with their responses, and &lt;strong&gt;we choose the SSP with the highest value&lt;/strong&gt;. SSPs will also answer with the ad to render, we will store it in memory and render in the next stage.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;We send to GAM a request by setting some targeting keys&lt;/strong&gt;: among them, we set the &lt;strong&gt;SSP name&lt;/strong&gt; that has the best offer (for reporting) and the &lt;strong&gt;price&lt;/strong&gt; of the ad.&lt;/li&gt;
  &lt;li&gt;When GAM receives the request, it will decide what to do according to a specified set of rules. &lt;strong&gt;if AdEx has an ad that has an higher value, it will return AdEx ad. Otherwise, it will return the creative that has been specified by us.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;If the returned creative is the piece of javascript we defined, this means that the SSP won against GAM too, and the creative will contain only one instruction: &lt;em&gt;render the ad that has won the auction at step 2.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;How can we infer the price of a GAM ad ? By GAM terms of service, GAM is obliged to send us an ad that costs at least 0.01 cpm than the one we sent at step 3. So if the SSP ad was priced 0.26, we know GAM ad is worth at least 0.27 .&lt;/p&gt;

&lt;h2 id=&quot;prebidjs&quot;&gt;Prebid.js&lt;/h2&gt;

&lt;p&gt;What you’ve just read here is nothing more than the logic behind &lt;a href=&quot;http://prebid.org/index.html&quot;&gt;PrebidJS&lt;/a&gt;, an &lt;strong&gt;open source project born as a synergy between the SSPs community&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Schermata da 2019-10-19 11-08-37.png&quot; alt=&quot;&quot; title=&quot;Prebid.org homepage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Prebid will perform the auction amongst the publisher chosen set of SSPs, then will query GAM, and finally will render the ad. Prebid also contains code to display video ads, mobile ads, handle different currencies, and much more.&lt;/p&gt;

&lt;p&gt;Here you can see an example of &lt;a href=&quot;http://prebid.org/dev-docs/getting-started.html&quot;&gt;prebid in action&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;thats-it&quot;&gt;That’s it?&lt;/h2&gt;

&lt;p&gt;That’s definitely &lt;strong&gt;not&lt;/strong&gt; all, folks! I’ve just &lt;em&gt;scratched the surface&lt;/em&gt; of the ad tech world; I apologize if something is not clear (ask in the comments!) and probably I’ve generalized too much.&lt;/p&gt;

&lt;p&gt;If you’re a programmer, you’ll be able to understand a lot of concepts that you’ll encounter in the future. I’ve deliberately decided not to talk about many GAM concepts that are not worth introduce at this point, but &lt;strong&gt;you’re highly encouraged to study if you want to succeed in this field&lt;/strong&gt;. GAM alone has a big slice of market share of all ad tech servers and you’ll for sure end up working on it, sooner or later ;)&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="ads" /><category term="google" /><category term="prebid" /><category term="dfp" /><category term="hb" /><category term="header bidding" /><summary type="html">Since money was invented, people felt the urge to advertise their products to others. I live very near to Pompeii (Italy) and if you visit this incredible town you’ll discover that in 79 a.D. there were a lot of ads painted on walls, trying to sell you wine, prostitutes, or ask for a vote.</summary></entry><entry><title type="html">Jest and Puppeteer from the barricades</title><link href="https://michelenasti.com/2019/10/02/jest-and-puppeteer-from-the-barricades.html" rel="alternate" type="text/html" title="Jest and Puppeteer from the barricades" /><published>2019-10-02T00:00:00+02:00</published><updated>2019-10-08T10:06:19+02:00</updated><id>https://michelenasti.com/2019/10/02/jest-and-puppeteer-from-the-barricades</id><content type="html" xml:base="https://michelenasti.com/2019/10/02/jest-and-puppeteer-from-the-barricades.html">&lt;p&gt;When I started my career as a software developer I immediately become “friend” with the concepts of &lt;strong&gt;unit testing and integration testing&lt;/strong&gt;. At the time (2012) the backend was written in Java and the frontend was written in GWT, a Java framework to build UIs that is compiled to JS.&lt;/p&gt;

&lt;p&gt;Unfortunately &lt;strong&gt;all our testing efforts were only directed towards the backend&lt;/strong&gt;, probably because of the language; this means that &lt;strong&gt;we could not find UI bugs before it was too late&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Fast fotward many years, GWT is not a thing anymore (good for you!), and Javascript is one of the most studied and used languages of the world. Javascript ecosystem is growing exponentially with thousands of packages, frameworks, ideas, applications that come out all the time. The language itself is evolving every year, after the first 20 years of no interesting additions. So… testing in JS became a necessity!&lt;/p&gt;

&lt;p&gt;At the start of 2019 there was a lot of hype around Javascript testing, mainly because of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;popular UI frameworks (react, vue, angular…) were designed from the ground up to be testable;&lt;/li&gt;
  &lt;li&gt;NodeJS has become stable and mature&lt;/li&gt;
  &lt;li&gt;The ubiquity of the web (progressive web apps, or React Native-like projects, made possible to use js on mobile too)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also read an interesting article saying (cannot find it anymore) “&lt;strong&gt;the js community has finally realized that web apps must be E2E tested first, instead of unit tested&lt;/strong&gt;&lt;em&gt;“&lt;/em&gt;. That’s true because e2e tests have become easier (but not dead easy) to write and to repeat. Let’s see it!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/1*BM_RS2-DjYk_JZUKr4uq0g.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-structure-the-code&quot;&gt;How to structure the code&lt;/h2&gt;

&lt;p&gt;Unit tests and End-to-end (e2e) tests are executed in two different environments: unit tests are executed in a browser-like environment provided by jest, while e2e tests are executed in a real browser. They need different configurations, that’s why I’ve created two directories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;unit&lt;/code&gt; for unit tests&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;e2e&lt;/code&gt; for end to end tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/musikele/jest-puppeteer-tutorial&quot;&gt;All the code is here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;unit-testing-jest&quot;&gt;Unit testing: JEST&lt;/h2&gt;

&lt;p&gt;Let me introduce Jest. &lt;strong&gt;Jest&lt;/strong&gt; is a testing framework mainly maintained by Facebook. It has a lot of features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;support for typescript,&lt;/li&gt;
  &lt;li&gt;babel,&lt;/li&gt;
  &lt;li&gt;webpack,&lt;/li&gt;
  &lt;li&gt;latest ES features,&lt;/li&gt;
  &lt;li&gt;support for testing timers, classes, etc.&lt;/li&gt;
  &lt;li&gt;support for mocking&lt;/li&gt;
  &lt;li&gt;a clear-enough documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To install:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm i --save-dev jest 
$ jest --init # create an initial conf file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and, for the purpose of using ES6 syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;npm i --save-dev babel-jest @babel/core @babel/preset-env
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, let’s add some Babel configuration to transpile code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//babel.config.js
module.exports = {
    presets: [
        [
            '@babel/preset-env',
            {
                targets: {
                    browsers: '&amp;gt;2%',
                },
            },
        ],
    ],
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;lets-run-our-first-test&quot;&gt;Let’s run our first test&lt;/h2&gt;

&lt;p&gt;This example is slightly modified from JEST &lt;a href=&quot;https://jestjs.io/docs/en/getting-started&quot;&gt;getting started&lt;/a&gt;. Suppose we have this function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// unit/example01/sum.js
export default (a, b) =&amp;gt; {
    if (typeof a !== 'number' || typeof b !== 'number') {
        throw new Error('The sum function accepts only numbers')
    }
    return a + b
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok! Let’s write a test for this function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// unit/example01/sum.spec.js
import sum from './sum'

describe('sum module', () =&amp;gt; {
    it('should sum two numbers', () =&amp;gt; {
        const result = sum(2,3)
        expect(result).toBe(5)
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Try it!&lt;/strong&gt; Use &lt;code&gt;$ npx jest&lt;/code&gt;  from the command line and see the output! Jest will search for *&lt;em&gt;.test.js and *.spec.js&lt;/em&gt; files, and will execute them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;describe()&lt;/code&gt; is used to define a test suite - a logical group of tests that are related. You can write tests directly at the top level, or you can wrap as many &lt;code&gt;describe&lt;/code&gt; blocks you want one into another; these names hare helpful when the tests start failing because they provide some context of what went nuts.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Suggestion&lt;/strong&gt;: I prefer to write at least one containing the module name and optionally another that will explain the base condition I am checking. Example:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;describe('Products service', () =&amp;gt; {
	describe('The product is not in the database', () =&amp;gt; {
		...
    })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s go back to our example. the function &lt;code&gt;it()&lt;/code&gt; (or &lt;code&gt;test()&lt;/code&gt;) is the actual test function that will be executed. Usually our tests are comprised of three parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;setup&lt;/strong&gt; - import the code, insert the configuration, etc.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;execution&lt;/strong&gt; - where we actually call the sum function&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;expectations test&lt;/strong&gt; - where we check that the test has actually succeded.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We use Jest function &lt;code&gt;expect()&lt;/code&gt; to assert that the result of the function is &lt;code&gt;5&lt;/code&gt;; thanks to a bunch of &lt;a href=&quot;https://jestjs.io/docs/en/expect&quot;&gt;Jest expectations&lt;/a&gt;, we can test pretty much everything is testable.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Suggestion&lt;/strong&gt;: limit yourself to test only the public API of a module.  There’s no need to test the inner workings!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And now let’s write a test for the &lt;em&gt;bad&lt;/em&gt; case:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// unit/example01/sum.spec.js
import sum from './sum'

describe('sum module', () =&amp;gt; {
    it('should sum two numbers', () =&amp;gt; { ... })

    it('should explode with exception', () =&amp;gt; {
        try {
            sum(2,'pippo')
        } catch(e) {
            expect(e).toBeDefined()
        }
    })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Hint&lt;/strong&gt;: try to make your tests fail. Otherwise you can never know if they’re really working.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;can-we-check-dom-modifications&quot;&gt;Can we check DOM modifications?&lt;/h3&gt;

&lt;p&gt;Jest integrates JSDOM, a browser DOM API implementation in pure JS. In my experience it will work very similarly to a real browser, and I found it super useful. For example, let’s write a function that will change toggle a class over a DOM element:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// unit/example02/toggleClass.js
export default (domElement, className) =&amp;gt; {
    domElement.classList.toggle(className)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This very super stupid snippet will add or remove to a &lt;code&gt;domElement&lt;/code&gt; a &lt;code&gt;¢lassName&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;Now let’s write a Jest test for it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// unit/example02/toggleClass.spec.js
import toggleClass from './toggleClass';

describe('Toggle class on DOM element', () =&amp;gt; {
    it('attach an element to the Document and toggle a clas on it', () =&amp;gt; {
        // (1) 
        const div = document.createElement('div')
        div.id = 'myDiv'
        document.body.appendChild(div);
        
		// (2) div actually attached to the virtual dom:
        const sameDivAsBefore = document.getElementById('myDiv');
        expect(div).toBe(sameDivAsBefore);
		
        // (3)
        toggleClass(sameDivAsBefore, 'myClass');
        expect(sameDivAsBefore.classList).toContain('myClass');
		
        // (4) 
        toggleClass(sameDivAsBefore, 'myClass');
        expect(sameDivAsBefore.classList).not.toContain('myClass');
    })
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Heeeey, a 3 lines function tested by a 20 lines test :D Well, lot of the code was added to show you something.&lt;/p&gt;

&lt;p&gt;At (1) I create a DIV and attach to a Document. &lt;strong&gt;The Document object is provided by JSDOM and is instantiated by Jest&lt;/strong&gt; - if you are using NodeJS, remember to change a setting in jest configuration and you’re done.&lt;/p&gt;

&lt;p&gt;At (2) I just show that &lt;em&gt;all the DOM API is available&lt;/em&gt;, so I retreive the same element with &lt;code&gt;getElementById()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, I will add a class to this element by calling &lt;code&gt;togleClass()&lt;/code&gt;. We then check that the class has been added by using &lt;code&gt;expect().toContain()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, we call again &lt;code&gt;toggleClass&lt;/code&gt; (4) and check that the dom element does &lt;strong&gt;not&lt;/strong&gt; contain the class anymore.&lt;/p&gt;

&lt;p&gt;This is so &lt;strong&gt;powerful&lt;/strong&gt;, that by enabling some features (via configuration) I could also &lt;em&gt;load scripts&lt;/em&gt; (like jquery) and use it in the test! Not bad.&lt;/p&gt;

&lt;h2 id=&quot;can-we-mock-other-functionsclasses&quot;&gt;Can we mock other functions/classes?&lt;/h2&gt;

&lt;p&gt;Yes! That’s how you reach the zen of unit test.&lt;/p&gt;

&lt;p&gt;Let’s imagine we have a class &lt;code&gt;apiClient&lt;/code&gt; that will ask another class &lt;code&gt;apiService&lt;/code&gt; to make a REST call.  &lt;strong&gt;We want to test apiClient&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this example, &lt;code&gt;apiService&lt;/code&gt; will ask for currency exchange from Euro to many other currencies. &lt;code&gt;apiClient&lt;/code&gt; will in turn transform the data in a way it is usable, by just keeping the &lt;code&gt;USD&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;Here’s the code for &lt;code&gt;apiService.js&lt;/code&gt;, the module that will call the REST endpoint:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// unit/example03/apiService.js 
export const getCurrencyExchange = async () =&amp;gt; {
  const response = await window.fetch(' https://api.ratesapi.io/api/latest');
  const json = await response.json()
  return json;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the consumer, &lt;code&gt;apiClient.js&lt;/code&gt; (&lt;strong&gt;this&lt;/strong&gt; &lt;em&gt;is the module we want to test&lt;/em&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// unit/example03/apiClient.js
import { getCurrencyExchange } from './apiService'

export const getEuroDollar = async () =&amp;gt; {
    const currencyExchange = await getCurrencyExchange()
    console.log(`1 Euro is ${currencyExchange.rates.USD} dollars`)
    return currencyExchange.rates.USD
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What’s the problem with this module?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the value of the USD exchange rate will change over time&lt;/li&gt;
  &lt;li&gt;if the network is down, the test will fail&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we need… &lt;strong&gt;mocks!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here’s a unit test that will mock out &lt;code&gt;apiService&lt;/code&gt; from using the network.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// unit/example03/apiClient.spec.js

//class to test (1)
import { getEuroDollar } from './apiClient';

// stuff we need to mock (2)
import { getCurrencyExchange } from './apiService'
jest.mock('./apiService');

describe('apiClient tests', () =&amp;gt; {
    //reset all mocks before use! (3) 
    beforeEach(() =&amp;gt; {
        getCurrencyExchange.mockClear()
    })
    
    it('should return euro/dollar exchange', async () =&amp;gt; {
        //when called, return this result (4) 
        getCurrencyExchange.mockResolvedValue({
            rates: {
                USD: 2000
            }
        })
        //call the function under test 
        const euroDollarChange = await getEuroDollar()
        
        //expect that getCurrencyExchange has been called (5)
        expect(getCurrencyExchange).toHaveBeenCalled()
        expect(euroDollarChange).toBe(2000)
    })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;(1) - we import the function we want to test&lt;/li&gt;
  &lt;li&gt;(2) - but we need to intercept and change the behaviour of &lt;code&gt;getCurrencyExchange()&lt;/code&gt;  so we also import it, and with &lt;code&gt;jest.mock()&lt;/code&gt; we tell jest we want to modify the behaviour&lt;/li&gt;
  &lt;li&gt;(3) - imagine we have not just one test like in this example, but a suite of tests, with this code we tell Jest to clear eventual mocks between tests.&lt;/li&gt;
  &lt;li&gt;(4) - here we are &lt;em&gt;really&lt;/em&gt; &lt;strong&gt;mocking the behaviour&lt;/strong&gt; of &lt;code&gt;getCurrencyExchange&lt;/code&gt;. Jest will return the value specified in &lt;code&gt;mockResolvedValue&lt;/code&gt; instead of making the actual network call. In this mock, inflation was really a thing and 1 Euro corresponds to 2000 $ (Euro rulez!).&lt;/li&gt;
  &lt;li&gt;After having instructed the test, we check that the mocked function has really ben called and the mocked value has been returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I only scratched the surface of what is possible to do with Jest, and there are thousand of mock tecniques depending of what you want to mock: classes, timers, async methods.. jest has you covered.&lt;/p&gt;

&lt;p&gt;Now let’s talk about… Puppeteer.&lt;/p&gt;

&lt;h2 id=&quot;puppetteer-a-headless-chrome&quot;&gt;Puppetteer: a headless Chrome&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://pptr.dev/&quot;&gt;Puppeteer&lt;/a&gt; is a node library that allows to control a Chromium instance. Let’s quiclky see an example. To install:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ npm i --save-dev puppeteer 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Puppeteer will download a beta-version of chromium that will be used to run our tests. Usually the puppeteer version uses a chromium version that is 2-3 versions further than the regular chrome, and this is done to test new chromium too.&lt;/p&gt;

&lt;p&gt;Let’s try to run a super-easy example that comes from their website: let’s take a screenshot of my personal website, michelenasti.com:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const puppeteer = require('puppeteer');

(async () =&amp;gt; {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://michelenasti.com');
  await page.screenshot({path: 'example.png'});

  await browser.close();
})();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some things to note:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Most of the time we will interact with the &lt;code&gt;page&lt;/code&gt; object, almost all useful stuff is there&lt;/li&gt;
  &lt;li&gt;Almost all methods are async, so we have to use &lt;code&gt;await&lt;/code&gt; everywhere&lt;/li&gt;
  &lt;li&gt;Chromium is started with a very dumb resolution, 800x600, like my first 486 monitor.&lt;/li&gt;
  &lt;li&gt;The documentation is your friend: check it out!&lt;/li&gt;
  &lt;li&gt;If you want to &lt;em&gt;see&lt;/em&gt; chrome in action, pass this configuration to &lt;code&gt;puppeteer.launch()&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;await puppeteer.launch({
  headless: false
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing more to say, we are ready to glue together jest + puppeteer in our tests!&lt;/p&gt;

&lt;h2 id=&quot;jest-puppeteer-to-the-rescue&quot;&gt;jest-puppeteer to the rescue!&lt;/h2&gt;

&lt;p&gt;Let’s instal &lt;a href=&quot;https://github.com/smooth-code/jest-puppeteer&quot;&gt;jest-puppeteer&lt;/a&gt;, a jest plugin to remote-control puppeteer in jest:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ npm install --save-dev jest-puppeteer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, in the root of your project, create an &lt;code&gt;e2e&lt;/code&gt; folder that will contain all your e2e tests. Copy &lt;code&gt;jest.config.js&lt;/code&gt; from &lt;code&gt;unit&lt;/code&gt; and add this option:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  &quot;preset&quot;: &quot;jest-puppeteer&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This setting will tell Jest to launch tests in a different environment, that is Chrome.&lt;/p&gt;

&lt;p&gt;Ready to run our first test?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// e2e/example01/01.spec.js
describe('Google', () =&amp;gt; {
    beforeAll(async () =&amp;gt; {
      await page.goto('https://google.com')
    })
  
    it('should display &quot;google&quot; text on page', async () =&amp;gt; {
      await expect(page).toMatch('google')
    })
  })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I cheated, this example comes directly from jest guide, but it is helpful to understand how it works.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;in the &lt;code&gt;beforeAll&lt;/code&gt; block we navigate to the google page;&lt;/li&gt;
  &lt;li&gt;in the test block, we check that &lt;code&gt;google&lt;/code&gt; is somewhere on the page.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Suggestion&lt;/strong&gt;: try to change website with michelenasti.com … it will fail&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s move to something more interactive. We will borrow &lt;a href=&quot;http://todomvc.com/examples/vue/&quot;&gt;Todolist MVC app&lt;/a&gt; from &lt;a href=&quot;http://todomvc.com/&quot;&gt;this website&lt;/a&gt; (they replicate the same app in every possible framework so you can study them).&lt;/p&gt;

&lt;p&gt;The idea is to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;add a todo item&lt;/li&gt;
  &lt;li&gt;check that it has been added to the list&lt;/li&gt;
  &lt;li&gt;remove it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s write such test!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// e2e/example02/01.spec.js
describe('TodoApp MVC tests', () =&amp;gt; {
    beforeEach(async () =&amp;gt; {
        await page.goto('http://todomvc.com/examples/vue/')
    })

    it('should add a todo', async () =&amp;gt; {
    	// (1)
        await page.type('input.new-todo', 'this is a todo');
        await page.keyboard.press('Enter');
        const label = await page.$('div.view label')
		// (2)
        const property = await label.getProperty('innerHTML')
        const jsonValue = await property.jsonValue()
        console.log(jsonValue)
        expect(jsonValue).toBe('this is a todo')
		// (3)
        await page.hover('div.view label')
        await page.click('div.view button.destroy')
        const label2 = await page.$('div.view label')
        expect(label2).toBe(null)
    })
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I don’t want to illude you, you’ll learn many tricks with experience, like me while I was preparing these examples.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;at (1) we write in the big input box our todo item&lt;/li&gt;
  &lt;li&gt;at (2) we check that the value has been added to the list&lt;/li&gt;
  &lt;li&gt;at (3) we first hover the item, in order to make the destroy button appear; then we click it. &lt;em&gt;What happens if we do not hover over the text?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;…And that’s it! Testing is an art and as such must be constantly exercised. These frameworks are complex because they allow to do complex things. During this talk I tried to give you hints of what you should do based on my experience.&lt;/p&gt;

&lt;p&gt;I also want to highlight some &lt;strong&gt;alternatives&lt;/strong&gt; of these frameworks. For &lt;strong&gt;Jest&lt;/strong&gt; the most famous alternative is &lt;strong&gt;Mocha&lt;/strong&gt;, it has almost the same API. However, to use mocha you have to install a lot of external libraries (the assertion library, the mocking framework, etc), so I prefer jest because it already contains everything.&lt;/p&gt;

&lt;p&gt;Regarding &lt;strong&gt;puppeteer&lt;/strong&gt;, there are some old competitors like &lt;strong&gt;Selenium&lt;/strong&gt; (and you can write tests in other languages too, or you can also use other browsers);  if you want to stick with Chrome, &lt;strong&gt;Cypress&lt;/strong&gt; is another great tool that is worth to try. It is much more visual than puppeteer.&lt;/p&gt;

&lt;p&gt;Remember:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If there is no test written, than you didn’t test it.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>musikele</name></author><category term="[&quot;english&quot;]" /><category term="jest" /><category term="testing" /><category term="javascript" /><summary type="html">When I started my career as a software developer I immediately become “friend” with the concepts of unit testing and integration testing. At the time (2012) the backend was written in Java and the frontend was written in GWT, a Java framework to build UIs that is compiled to JS.</summary></entry><entry><title type="html">What is the difference between var, let and const in Javascript</title><link href="https://michelenasti.com/2019/08/17/what-is-the-difference-between-var-let-and-const-in-javascript.html" rel="alternate" type="text/html" title="What is the difference between var, let and const in Javascript" /><published>2019-08-17T00:00:00+02:00</published><updated>2019-08-19T11:10:06+02:00</updated><id>https://michelenasti.com/2019/08/17/what-is-the-difference-between-var-let-and-const-in-javascript</id><content type="html" xml:base="https://michelenasti.com/2019/08/17/what-is-the-difference-between-var-let-and-const-in-javascript.html">&lt;p&gt;I did some interviews in the last few days, the role we were searching was “super-duper senior javascript master” so I asked this very simple question as starter:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What is the difference between &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; to declare a variable?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Surprisingly, a lot of js developers do not know the right answer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/proxy.duckduckgo.com-3.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;var-the-first-the-oldest-the-deprecated&quot;&gt;Var: the first, the oldest, the deprecated&lt;/h2&gt;

&lt;p&gt;Var is with us since the very first version of Javascript. All major browsers, including Internet Explorer, still and will understand a var declaration forever. So why I say it’s deprecated?&lt;/p&gt;

&lt;p&gt;Well, when you declare a variable with var, it’s declaration is &lt;em&gt;hoisted&lt;/em&gt; and the assignment will happen in a separate time. This is unnoticed for most of the time, unless you hit a bug and start complaining. Let’s see an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// ...looks fine, isn't it?
if (!someVariable) {
    console.log(&quot;will this execute?&quot;) 
    // will throw ReferenceError: someVariable is not defined
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now refresh the page and run this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (! someVariable) {
    console.log(&quot;will this execute? and what is the value of someVariable?&quot;, someVariable) 
    // apart from console.logs, we only added this line: 
    var someVariable = true 
    console.log(&quot;Value of someVariable again: &quot;, someVariable)    
}

//output:
//  &quot;will this execute? and what is the value of someVariable? undefined&quot;
//  &quot;Value of someVariable again:  true&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Did you notice that I declared the variable inside the if block? You would expect an error (“dude, your variable does not exist at this moment”) instead Javascript will just let you do it. Why?&lt;/p&gt;

&lt;h3 id=&quot;hoisting&quot;&gt;Hoisting&lt;/h3&gt;

&lt;p&gt;Javascript will read your .js file twice. The first time it will &lt;strong&gt;move on the top of the current unction&lt;/strong&gt; all &lt;code&gt;var&lt;/code&gt; declarations, initializing these variables with &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second time it reads the &lt;code&gt;.js&lt;/code&gt; file, it will now execute the interpreted code.&lt;/p&gt;

&lt;p&gt;Based on this, the previous code becomes something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// 
function someFunction() {
  	var someVariable = undefined
  	if (!someVariable) {
		console.log(&quot;will this execute? and what is the value of someVariable?&quot;, someVariable) 
    	someVariable = true
      	console.log(&quot;Value of someVariable again: &quot;, someVariable)    
  	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: If the script is executed in a “global” context, you should imagine a “wrapper function” around your code. So variable declarations are moved on top of the file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since this &lt;em&gt;movement of variables&lt;/em&gt; happen in functions, we can say tha &lt;code&gt;var&lt;/code&gt; is function-scoped. This code should not surprise you anymore:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; if (someCondition) {
 someCondition = false
} else {
  var someCondition = true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… But when you check the code and see that &lt;code&gt;someCondition&lt;/code&gt; is true, but the first if block didn’t execute,  you’ll end in wtf.&lt;/p&gt;

&lt;h3 id=&quot;so-whats-the-problem&quot;&gt;So, what’s the problem&lt;/h3&gt;

&lt;p&gt;The biggest problem is that this way of thinking of variables is completely different from all other programming languages. &lt;strong&gt;Developers coming from other programming languages will believe that a&lt;/strong&gt; &lt;code&gt;var&lt;/code&gt; &lt;strong&gt;is block scoped, while indeed it’s function scoped&lt;/strong&gt;. This will take you to weird bugs.&lt;/p&gt;

&lt;p&gt;That’s why the JS community decided to fix this with ES6 introducing two new variable declarations: &lt;strong&gt;let&lt;/strong&gt; and &lt;strong&gt;const&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;let&quot;&gt;Let&lt;/h2&gt;

&lt;p&gt;Imagine a world where you declare a variable and it will behave exactly as you thought: it’s block scoped, it doesn’t do strange movements, and the browser will throw at you the right errors if you forget to initialize. Let me present you … &lt;code&gt;let&lt;/code&gt; !&lt;/p&gt;

&lt;p&gt;The same code as before will now be more reasonable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (! someVariable) {
    console.log(&quot;will this execute? and what is the value of someVariable?&quot;, someVariable) 
    let someVariable = true
    console.log(&quot;Value of someVariable again: &quot;, someVariable)    
}

// : ReferenceError: someVariable is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the &lt;code&gt;var&lt;/code&gt; problem is fixed, what if you want to declare an immutable reference to a variable? In the past, doing so in Javascript was weird and included accessing some private properties; now that’s a lot easier.&lt;/p&gt;

&lt;h2 id=&quot;const&quot;&gt;Const&lt;/h2&gt;

&lt;p&gt;With const, we can finally declare constant &lt;em&gt;references&lt;/em&gt;, but what does it mean? Let’s see an example again:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const PRICE = 33
const TITLE = 'wonderful title'
const anObject = { a: 'obj property' } 

PRICE=44 // TypeError: invalid assignment to const `PRICE'
TITLE = 'less beautiful title' // TypeError: invalid assignment to const `TITLE'

anObject = {} // TypeError: invalid assignment to const `anObject'
anObject.a = 'new obj property' // no error! 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;The last two lines should bring you special attention.&lt;/em&gt; &lt;code&gt;const&lt;/code&gt; will &lt;strong&gt;freeze the reference&lt;/strong&gt;. If the referenced object holds other properties, you can still change them.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;Since Internet Explorer is fading away, the days we can finally get rid of &lt;code&gt;var&lt;/code&gt; are very close. The problem is that until it is not completely dead we have to transpile our code with &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; to &lt;code&gt;var&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A lot of developers have no idea of why we transpile and what is happening under the hood, and it’s a pity because it’s my first question when I interview JS senior developers :/&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="Javascript" /><category term=" Interview" /><category term=" Questions" /><summary type="html">I did some interviews in the last few days, the role we were searching was “super-duper senior javascript master” so I asked this very simple question as starter:</summary></entry><entry><title type="html">Detect network issues from your pc to a remote url</title><link href="https://michelenasti.com/2019/08/02/detect-network-issues-to-urls.html" rel="alternate" type="text/html" title="Detect network issues from your pc to a remote url" /><published>2019-08-02T00:00:00+02:00</published><updated>2019-08-02T19:39:48+02:00</updated><id>https://michelenasti.com/2019/08/02/detect-network-issues-to-urls</id><content type="html" xml:base="https://michelenasti.com/2019/08/02/detect-network-issues-to-urls.html">&lt;p&gt;Suppose you see that a website, or a URL, that seems to be unaccessible.&lt;/p&gt;

&lt;p&gt;The first thing to do is to check &lt;strong&gt;if the website is down just for you or for the whole universe&lt;/strong&gt;. There are many websites that do this, the one I discovered recently is &lt;a href=&quot;https://www.uptrends.com/tools/uptime&quot;&gt;Uptrends&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By putting a url in uptrends you can see how long a resource will take to load from a bunch of locations in the world:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://files.slack.com/files-pri/T04DE1CDJ-FLXGT5B8Q/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Oh no! There’s an issue in Europe!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Another check you can do is for &lt;strong&gt;&lt;em&gt;proper hackers&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;®&lt;/em&gt;&lt;strong&gt;.&lt;/strong&gt; Launch this command from bash:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mtr -rwc 50 &amp;lt;url&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result  is a very nice list of all hops made by data from our PC to the remote host&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;➜  ~ sudo mtr -rwc 50 michelenasti.com 
[sudo] password di musikele: 
Start: 2019-08-02T10:27:39+0200
HOST: musikele-XPS-15-9560                Loss%   Snt   Last   Avg  Best  Wrst StDev
  1.|-- _gateway                             0.0%    50    2.7   2.2   1.9   4.2   0.4
  2.|-- ???                                 100.0    50    0.0   0.0   0.0   0.0   0.0
  3.|-- 172.18.18.108                        0.0%    50   10.6  10.7   8.5  16.8   1.5
  4.|-- 172.18.19.226                       56.0%    50   11.7  11.3   9.0  30.4   4.6
  5.|-- 172.19.177.38                        0.0%    50   16.5  16.9  15.6  19.6   0.7
  6.|-- 172.19.177.2                         0.0%    50   27.4  27.8  24.6  69.4   8.6
  7.|-- etrunk49.milano50.mil.seabone.net   52.0%    50   28.2  28.3  26.6  40.6   2.9
  8.|-- et9-1-0.ashburn2.ash.seabone.net     0.0%    50  122.1 121.0 119.1 129.5   2.0
  9.|-- cloudflare.ashburn2.ash.seabone.net  0.0%    50  128.3 133.4 125.5 216.4  14.6
 10.|-- 104.28.13.252                        0.0%    50  124.4 124.8 123.5 126.3   0.6
➜  ~ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;mtr&lt;/code&gt; stands for &lt;strong&gt;My TraceRoute&lt;/strong&gt; and combines ping with traceroute. It gives a lot of information about the routers crossed during the path to the destination.&lt;/p&gt;

&lt;p&gt;One may think that there are some errors in the upper report, however you should have in mind that many routers are configured to delete ICMP packets (the ones used by mtr, or by ping) or to slow them down for quality assurance.&lt;/p&gt;

&lt;p&gt;I really suggest you to read &lt;a href=&quot;https://www.linode.com/docs/networking/diagnostics/diagnosing-network-issues-with-mtr/&quot;&gt;this article from Linode&lt;/a&gt; that explains almost everything you may want to know and it’s very easy to follow.&lt;/p&gt;

&lt;p&gt;Enjoy your networking!&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="network" /><category term="sysadmin" /><summary type="html">Suppose you see that a website, or a URL, that seems to be unaccessible.</summary></entry><entry><title type="html">Typescript, Babel, Webpack, ESLint: my configuration</title><link href="https://michelenasti.com/2019/06/27/typescript-babel-webpack-eslint-my-configuration.html" rel="alternate" type="text/html" title="Typescript, Babel, Webpack, ESLint: my configuration" /><published>2019-06-27T00:00:00+02:00</published><updated>2019-10-16T11:26:25+02:00</updated><id>https://michelenasti.com/2019/06/27/typescript-babel-webpack-eslint-my-configuration</id><content type="html" xml:base="https://michelenasti.com/2019/06/27/typescript-babel-webpack-eslint-my-configuration.html">&lt;p&gt;The purpose of this post is to give you, dear reader, an example of the configuration I use on some projects. Configuring the whole stack is sometimes frustrating. Here’s what works for me.&lt;/p&gt;

&lt;h2 id=&quot;typescript&quot;&gt;Typescript&lt;/h2&gt;

&lt;p&gt;I &lt;a href=&quot;https://michelenasti.com/2019/06/24/typescript-why-so-complicated.html&quot;&gt;just wrote an article&lt;/a&gt; about that and you should read it. It contains my &lt;code&gt;tsconfig.json&lt;/code&gt; and why every option is configured that way.&lt;/p&gt;

&lt;h2 id=&quot;babel--7x-&quot;&gt;Babel ( 7.x )&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Update (2019-10-16)&lt;/strong&gt;: on my work projects I had to use Typescript for transpiling, I’ll cover this in the next paragraph. You can skip Babel setup if you do not need this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The fun fact is, even if we use Typescript and our files end with &lt;code&gt;.ts&lt;/code&gt;, to build the project we will &lt;em&gt;skip&lt;/em&gt; typescript. Let me be clearer. We will use &lt;strong&gt;Babel&lt;/strong&gt;, that is a transpiler, and &lt;strong&gt;Webpack&lt;/strong&gt;, that is a bundler. Webpack will bundle files that are transpiled by Babel.&lt;/p&gt;

&lt;p&gt;But wait?! Babel transpiles what? The latest trend is that Babel will &lt;em&gt;strip out&lt;/em&gt; every Typescript interface, annotation or type inference and will just transform the file to a normal &lt;code&gt;.js&lt;/code&gt; file. This output will then be given in input to Webpack.&lt;/p&gt;

&lt;p&gt;Enough talking! Time to install babel and it’s dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install --save-dev @babel/core @babel/cli @babel/preset-env @babel/plugin-proposal-class-properties @babel/plugin-proposal-object-rest-spread @babel/preset-typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here’s my babel setup:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//babel.config.js
  module.exports = api =&amp;gt; {
      const isTest = api.env('test');

      const targets = {
          browsers: &quot;&amp;gt; 0.25%, not dead&quot;
      }

      if (isTest) {
          delete targets.browsers;
          targets.node = &quot;current&quot;;
      }

      return {
          &quot;presets&quot;: [
              [
                  &quot;@babel/env&quot;,
                  {
                      &quot;useBuiltIns&quot;: &quot;entry&quot;,
                      &quot;corejs&quot;: &quot;3.0.0&quot;,
                      targets
                  }
              ],
              &quot;@babel/typescript&quot;
          ],
          &quot;plugins&quot;: [
              &quot;@babel/proposal-class-properties&quot;,
              &quot;@babel/proposal-object-rest-spread&quot;
          ]
      };
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quick explanation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I use Jest and puppeteer to test my code, and Jest requires &lt;code&gt;targets.node&lt;/code&gt; to be set to &lt;code&gt;current&lt;/code&gt;. If you don’t use Jest and Puppeteer, just remove the &lt;code&gt;isTest&lt;/code&gt;check.&lt;/li&gt;
  &lt;li&gt;Babel works with presets, each preset will transform some pieces of code depending on some rules.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;@babel/env&lt;/code&gt; is a quasi-default rule, it will transform our js code to something that is understandable by something that is parsable by what’s defined in &lt;code&gt;targets&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;@babel/typescript&lt;/code&gt; is the king here. It will &lt;em&gt;strip off&lt;/em&gt; all Typescript specific data (interfaces, types, etc.).&lt;/li&gt;
  &lt;li&gt;the two plugins added are already in a very advanced standardization process, but they are added because typescript allows them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;is-it-working&quot;&gt;Is it working?&lt;/h3&gt;

&lt;p&gt;run this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx babel src --out-dir build_ts --extensions &quot;.ts,.tsx&quot; --source-maps inline
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we’ll run babel on the directory &lt;code&gt;src&lt;/code&gt;, the output will go in &lt;code&gt;build_ts&lt;/code&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It works? without hassles? Let’s go to the next step:&lt;/p&gt;

&lt;h2 id=&quot;alternative-to-babel-typescript-compiler-update&quot;&gt;Alternative to Babel: Typescript compiler (UPDATE)&lt;/h2&gt;

&lt;p&gt;When I wrote this article I was just fine with babel + typescript + webpack, unfortunately shit happens and in this case the shit’s name is called Internet Explorer.&lt;/p&gt;

&lt;p&gt;Babel is notoriously good at adding polyfills for older browsers, however this process was not particularly suitable for my use case since I develop a library and I did not want to bloat my project with external dependencies, only to support IE.&lt;/p&gt;

&lt;p&gt;So, if you use Babel you can add polyfills and you can follow &lt;a href=&quot;https://www.codementor.io/lawwantsin/babel-polyfills-transforms-presets-csbnjsok6&quot;&gt;this article&lt;/a&gt; to do it. &lt;strong&gt;I still think Babel is the best solution for webapps (not for libraries)&lt;/strong&gt;. Babel does also do a great job in converting ES6-only objects (like Promises) to ES5 with the right configuration.  With the right set of babel plugins and polyfills, you can convert whatever syntax from the past, the present and the future.&lt;/p&gt;

&lt;p&gt;Instead, &lt;strong&gt;Typescript will deliver a smaller bundle but you must be sure to be using a syntax that will work with IE&lt;/strong&gt;. If you use Promises, or fetch for example, TS will not provide any polyfill for it and you must manually check that IE will not break. Not the best experience, but not an impossible job either.&lt;/p&gt;

&lt;p&gt;In our case, the “broken” error came from the use of &lt;code&gt;Symbol&lt;/code&gt;, that is used in &lt;code&gt;for... of&lt;/code&gt; iterations. Read more to see what to change if you want to support &lt;code&gt;tsc&lt;/code&gt; instead of babel for transpiling code.&lt;/p&gt;

&lt;h2 id=&quot;webpack-4x&quot;&gt;Webpack (4.x)&lt;/h2&gt;

&lt;p&gt;Installation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm i --save-dev webpack webpack-cli babel-loader
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;For Typescript:&lt;/strong&gt; change &lt;code&gt;babel-loader&lt;/code&gt; with &lt;code&gt;ts-loader&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s my configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//webpack.config.js

var path = require('path');
var webpack = require('webpack');

module.exports = {
  entry: './src/index',
  mode: 'development',
  devtool: 'false',
  output: {
    path: path.resolve(__dirname, 'build'),
    filename: 'dist.js',
  },
  resolve: {
    extensions: ['.ts', '.tsx', '.js', '.json'],
  },
  module: {
    rules: [
      {
        // Include ts, tsx, js, and jsx files.
        test: /\.(ts|js)x?$/,
        exclude: /node_modules/,
        loader: 'babel-loader',
      },
    ],
  },
  plugins: [],
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most important part is the &lt;code&gt;rules&lt;/code&gt; part. Our rule is that every file will be tested, if it ends with &lt;code&gt;.ts&lt;/code&gt; it will be passed to plugin &lt;code&gt;babel-loader&lt;/code&gt; that will pass the file to &lt;code&gt;babel&lt;/code&gt; before assembling it with babel.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For Typescript&lt;/strong&gt;: change the &lt;code&gt;rules:  [ ...&lt;/code&gt; section with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;rules: [{
    // Include ts, tsx, js, and jsx files.
    test: /\.(ts|js)x?$/,
    exclude: /node_modules/,
    loader: 'ts-loader',
}],
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is the most basic webpack setup I could come up with. Reality is much more complicated than this and &lt;a href=&quot;https://webpack.js.org/configuration/output/&quot;&gt;you may need to set additional options/plugins&lt;/a&gt;. Don’t be afraid to check out webpack documentation, you’ll learn interesting things&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;is-it-working-1&quot;&gt;Is it working?&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npx webpack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It should create the file &lt;code&gt;build/dist.js&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;eslint&quot;&gt;ESLint&lt;/h2&gt;

&lt;p&gt;Installation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i --save-dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Configuration code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//.eslintrc.js
module.exports = {
    parser: '@typescript-eslint/parser',
    parserOptions: {
        ecmaVersion: 2018,
        sourceType: 'module',
    },
    plugins: ['@typescript-eslint'],
    'env': {
        'browser': true,
        'es6': true,
        'jest': trueparser: '@typescript-eslint/parser',
    parserOptions: {
        ecmaVersion: 2018,
        sourceType: 'module',
    },
    plugins: ['@typescript-eslint'],
    },
    'extends': [
        'eslint:recommended',
        'plugin:@typescript-eslint/recommended',
    ],
    'rules': {
    //...
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;we tell ESLint to use the &lt;a href=&quot;https://www.npmjs.com/package/@typescript-eslint/parser&quot;&gt;typescript parser&lt;/a&gt; with some specific parser options.&lt;/li&gt;
  &lt;li&gt;Then we add the plugin @typescript-eslint that will provide us with some useful rules for typescript…&lt;/li&gt;
  &lt;li&gt;…Like &lt;code&gt;@typescript-eslint/recommended&lt;/code&gt;, that contains a few rules that are recommended by the community.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you convert a legacy Javascript project to typescript, the &lt;code&gt;typescript-eslint/recommended&lt;/code&gt; set of rules is … &lt;em&gt;too much&lt;/em&gt;. That’s why I usually comment it out and try to fix problems day after day.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;jest&quot;&gt;JEST&lt;/h2&gt;

&lt;p&gt;this article doesn’t really cover Jest and Typescript, but I’ll only add this quick snippet for those who may find it useful. To configure Jest with TS:&lt;/p&gt;

&lt;p&gt;install &lt;code&gt;ts-jest&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-basj&quot;&gt;$ npm i --save-dev ts-jest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;add these lines to &lt;code&gt;jest.config.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;module.exports = {
    ...,
    transform: {
        '^.+\\.tsx?$': 'ts-jest'
    },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;ready-to-start-your-projects&quot;&gt;Ready to start your projects?&lt;/h2&gt;

&lt;p&gt;Hope my configuration files have helped you creating your new projects. Can’t wait to know what you’re working at!&lt;/p&gt;</content><author><name>musikele</name></author><category term="Italiano" /><category term="typescript" /><category term="babel" /><category term="webpack" /><category term="eslint" /><summary type="html">The purpose of this post is to give you, dear reader, an example of the configuration I use on some projects. Configuring the whole stack is sometimes frustrating. Here’s what works for me.</summary></entry><entry><title type="html">Typescript: why so complicated?! (A list of my preferred options)</title><link href="https://michelenasti.com/2019/06/24/typescript-why-so-complicated.html" rel="alternate" type="text/html" title="Typescript: why so complicated?! (A list of my preferred options)" /><published>2019-06-24T00:00:00+02:00</published><updated>2019-06-25T22:01:34+02:00</updated><id>https://michelenasti.com/2019/06/24/typescript-why-so-complicated</id><content type="html" xml:base="https://michelenasti.com/2019/06/24/typescript-why-so-complicated.html">&lt;p&gt;Hey there, after digging about how Typescript settings mesh together, I decided to write my article about what I found &lt;em&gt;the hard way&lt;/em&gt;, hoping to clear the path for newcomers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/typescript-cover-image.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you install Typescript, default values are a bit dumb. For example, 99% of the world would put the source code in a &lt;code&gt;src&lt;/code&gt; directory, and typescript has to be configured explicitly this way. Let’s see my &lt;code&gt;tsconfig.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;compilerOptions&quot;: {
        &quot;module&quot;: &quot;esnext&quot;,
        &quot;target&quot;: &quot;esnext&quot;,
        &quot;sourceMap&quot;: true,
        &quot;outDir&quot;: &quot;./build/&quot;,
        &quot;moduleResolution&quot;: &quot;node&quot;,
        &quot;strict&quot;: true,
        &quot;lib&quot;: [
            &quot;dom&quot;,
            &quot;esnext&quot;,
            &quot;dom.iterable&quot;,
            &quot;scripthost&quot;
        ],
    },
    &quot;include&quot;: [
        &quot;src/**/*.ts&quot;
    ],
    &quot;compileOnSave&quot;: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is part of my setup. I will go through some of these options so you can choose wisely.&lt;/p&gt;

&lt;h3 id=&quot;the-target-option&quot;&gt;The “target” option&lt;/h3&gt;

&lt;p&gt;Typescript is a compiler from a superset to a subset of Javascript features and &lt;code&gt;target&lt;/code&gt; determines what kind of EcmaScript (Javascript’s formal name) should be targeted.&lt;/p&gt;

&lt;p&gt;Possible values are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;ES3&lt;/code&gt; (default)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ES5&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ES6&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;esnext&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you leave it blank, or choose &lt;code&gt;ES3&lt;/code&gt;, your code would be compatible with very old browsers, like Internet Explorer 5 or Netscape Navigator (joking, but not that much). ES3 is the first standardized version of Javascript.&lt;/p&gt;

&lt;p&gt;You may think this is a great default value and be tempted to use &lt;code&gt;fetch&lt;/code&gt;, or &lt;code&gt;Promise&lt;/code&gt;, and typescript will let you use them, BUT &lt;strong&gt;typescript will not add any polyfill to your code.&lt;/strong&gt; Beware of this!&lt;/p&gt;

&lt;p&gt;Similarly you can choose to run several different options, &lt;code&gt;ES5&lt;/code&gt; (if your users are on Internet Explorer),  &lt;code&gt;ES6&lt;/code&gt;… I prefer &lt;code&gt;esnext&lt;/code&gt; to be able to use the latest features of the language and leave to Babel the transpilation step.&lt;/p&gt;

&lt;p&gt;Did you know that prior to ES6 there was no official way to import some JS code inside another JS code? The community came out with several options and the next section will discuss them.&lt;/p&gt;

&lt;h3 id=&quot;the-module-option&quot;&gt;The “module” option&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;module&lt;/strong&gt; determines the way modules (and files) express dependencies between each other. Possible values are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;None&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;CommonJS&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;AMD&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;System&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;UMD&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ES6&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ES2015&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ESNext&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ouch, so many options for a single task: importing code. Why?! That’s because the evolution of Javascript is non-linear,  and many of them do not apply for every platform.&lt;/p&gt;

&lt;p&gt;If you use &lt;strong&gt;None&lt;/strong&gt; you cannot use &lt;code&gt;import&lt;/code&gt;, &lt;code&gt;export&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt;… nothing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AMD&lt;/strong&gt;, &lt;strong&gt;System&lt;/strong&gt; and &lt;strong&gt;CommonJS&lt;/strong&gt; are (IMHO) a thing of the past.  the first (AMD) came from &lt;a href=&quot;https://requirejs.org/docs/whyamd.html&quot; title=&quot;RequireJS&quot;&gt;RequireJS&lt;/a&gt; and the second from &lt;a href=&quot;https://github.com/systemjs/systemjs&quot; title=&quot;SystemJS&quot;&gt;SystemJS&lt;/a&gt;. These two are browser’s solutions. Not so long ago there was no way to express dependencies across JS files, so many competing systems came out to solve the same problem. AMD and SystemJS did not get enough fortune to become a standard.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CommonJS&lt;/strong&gt; is a spec that is very similar to what NodeJS has implemented (&lt;code&gt;require&lt;/code&gt;/&lt;code&gt;exports&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UMD&lt;/strong&gt; stands for &lt;em&gt;Universal Module Definition&lt;/em&gt; and tries to deliver a module that works with every possible module definition defined before.&lt;/p&gt;

&lt;p&gt;However, the ECMAScript community went for the &lt;code&gt;import/export&lt;/code&gt; solution, and node has embraced that too, and we have that available in  &lt;code&gt;ES6&lt;/code&gt; and &lt;code&gt;ES2015&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Again, I prefer to use Typescript as a superset of JS, so I choose &lt;code&gt;esnext&lt;/code&gt; and let webpack decide how to bundle stuff together.&lt;/p&gt;

&lt;h3 id=&quot;outdir-or-outfile-&quot;&gt;outDir or outFile ?&lt;/h3&gt;

&lt;p&gt;You have decided which module system you want to use (you know  my vote for &lt;code&gt;ES6&lt;/code&gt;), but do you want a single file in output (&lt;code&gt;outFile&lt;/code&gt;) or many single files in a output directory (&lt;code&gt;outDir&lt;/code&gt;)?&lt;/p&gt;

&lt;p&gt;If you write JS for the browser you may be tempted to go for &lt;code&gt;outFile&lt;/code&gt; and let TS deal with everything. You may think that this way you can skip webpack, babel and so on. The problem is that TS allows to use this option only with &lt;code&gt;amd&lt;/code&gt; and &lt;code&gt;system&lt;/code&gt;. So this is a hard requirement for that.&lt;/p&gt;

&lt;p&gt;The second big problem is that, to build a single file with all modules, Typescript needs also to know the &lt;em&gt;order&lt;/em&gt; of files, so &lt;em&gt;you&lt;/em&gt; have to provide the list in the right order. Imagine having 30-50-100 modules…&lt;/p&gt;

&lt;p&gt;Again, my advice is to use&lt;code&gt;outDir&lt;/code&gt;. For every source file you get a compiled file in the output directory. Then, again, did I tell you of webpack + babel?&lt;/p&gt;

&lt;h3 id=&quot;moduleresolution&quot;&gt;ModuleResolution&lt;/h3&gt;

&lt;p&gt;This setting accepts two possible values: &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;classic&lt;/code&gt;. At this point there’s no need to have a value different than &lt;code&gt;node&lt;/code&gt; here. For what I read &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/module-resolution.html&quot;&gt;in the official documentation&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nowadays, this strategy [&lt;code&gt;classic&lt;/code&gt;] is mainly present for backward compatibility.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;lib&quot;&gt;Lib&lt;/h3&gt;

&lt;p&gt;Since we are working in the browser and we are targeting a JS version greater than ES2015, I use the defaults that are &lt;code&gt;DOM,ES6,DOM.Iterable,ScriptHost&lt;/code&gt;. The list of all available libraries is &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/compiler-options.html&quot;&gt;here&lt;/a&gt;. If you forget to put those, Typescript will output weird errors like missing &lt;code&gt;Set&lt;/code&gt; interface or other stuff - I guess the problem is that TS goes in &lt;code&gt;node_modules&lt;/code&gt; and finds code that is obviously thought for Node, and it fails somehow.&lt;/p&gt;

&lt;h3 id=&quot;compileonsave&quot;&gt;compileOnSave&lt;/h3&gt;

&lt;p&gt;An option for IDEs to trigger compilation on a file save. If your IDE does not support it you can disable it but having it turned on it does not harm.&lt;/p&gt;

&lt;h3 id=&quot;strict-true&quot;&gt;strict: true&lt;/h3&gt;

&lt;p&gt;You use Typescript because you want it to catch syntax errors in your library. However, the default value for this option is &lt;code&gt;false&lt;/code&gt; and this means that many syntax checks are not done for you.&lt;/p&gt;

&lt;p&gt;If you start a new project, I strongly advise to turn on this option. If you, like me, are converting a JS library to TS, this option may transform your job in hell: introduce it gradually and slowly.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;So many choices to do and I guess inexperienced developers do not know what to do at first. Hoping to do them a favour!&lt;/p&gt;

&lt;p&gt;I’ve also cited &lt;strong&gt;Webpack + Babel&lt;/strong&gt; setup here, and this will be discussed in another article. It will require some changes here and there, and typescript will only be used to check the syntax of the project, but the transpilation will be done by Babel.&lt;/p&gt;

&lt;p&gt;Curious? Stay tuned!&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="typescript" /><category term="javascript" /><summary type="html">Hey there, after digging about how Typescript settings mesh together, I decided to write my article about what I found the hard way, hoping to clear the path for newcomers.</summary></entry><entry><title type="html">I work remote, I do two video meetings per day</title><link href="https://michelenasti.com/2019/06/13/i-work-remote-i-do-two-video-calls-per-day.html" rel="alternate" type="text/html" title="I work remote, I do two video meetings per day" /><published>2019-06-13T00:00:00+02:00</published><updated>2019-06-16T17:26:53+02:00</updated><id>https://michelenasti.com/2019/06/13/i-work-remote-i-do-two-video-calls-per-day</id><content type="html" xml:base="https://michelenasti.com/2019/06/13/i-work-remote-i-do-two-video-calls-per-day.html">&lt;p&gt;Do you love meetings? Do you enjoy taking a break from your work and &lt;em&gt;talk&lt;/em&gt; - ehm, &lt;em&gt;listen&lt;/em&gt; to your managers, stakeholders, customers, peers? I suppose you not. If you’re like me, 99% of your work life meetings have been a total waste of time.&lt;/p&gt;

&lt;p&gt;For example, I remember one day I had 8 hours of meetings, well actually they were 4 different meetings of 2 hours, but with the same people and the same manager attending.&lt;/p&gt;

&lt;p&gt;I also remember a boss sentence, “&lt;em&gt;we will discuss later about this, and we will, because this topic is important for me”&lt;/em&gt;, usually meaning that we should never ever bring the discussion back.&lt;/p&gt;

&lt;p&gt;I also remember another meeting, on friday evening, were we decided to use framework “X” to do something, so I started studying it in the weekend, only to find on monday that the company has decided to use another framework Y.&lt;/p&gt;

&lt;p&gt;The list can go on, feel free to add your horror stories in the comments. I’m sure you had worse meetings than mine :)&lt;/p&gt;

&lt;p&gt;But I’m here to say that I’ve also experienced another way of working: for some projects I had no meetings at all.&lt;/p&gt;

&lt;p&gt;For example, referring to my remote work experience, when you start working remotely the first sentiment you feel is &lt;em&gt;abandonment&lt;/em&gt;. It’s like, &lt;em&gt;where’s my boss?&lt;/em&gt; Obviously I was not &lt;em&gt;abandoned&lt;/em&gt; but that’s the first feeling you get.&lt;/p&gt;

&lt;p&gt;Then I read a book about &lt;a href=&quot;https://amzn.to/2RdiUUt&quot; title=&quot;Human centered work&quot;&gt;human centered work (in italian)&lt;/a&gt;, and amongst other things there is an entire chapter on how to organize the team work. &lt;strong&gt;Before calling your next meeting, ask yourself if all the attendees are actually getting a benefit from it&lt;/strong&gt;. (With this simple rule, 50% of my meetings could have been discarded).&lt;/p&gt;

&lt;p&gt;Some meetings are strictly necessary. &lt;strong&gt;The main role of a boss is to give the &lt;em&gt;strategic direction&lt;/em&gt; to the team&lt;/strong&gt;, and there’s no email that can substitute the facial expression or the tone of voice.&lt;/p&gt;

&lt;p&gt;So, let’s go back to the title of this post. Yes, I work remotely, and yes, &lt;strong&gt;I do two&lt;/strong&gt; (small) &lt;strong&gt;meetings every day&lt;/strong&gt;. Two video-meetings actually. The first one at 9:30 is to kick off the day, the second at 15:30 as a status update.&lt;/p&gt;

&lt;p&gt;They don’t last long, usually in 5 minutes they are done, but it’s a ritual that helps me accomplish my tasks.&lt;/p&gt;

&lt;p&gt;The best part is that we use a software where we can see each other in the face during the meeting, and the default is with webcam on. This actually gives a lot of humanity to remote working: as programmers, we are used to solve problems via chat, by typing, but that’s the slowest way to do that.&lt;/p&gt;

&lt;p&gt;When you start introducing video calls as an option, and switch to that whenever it’s the clearest (&amp;amp; fastest) way to solve a problem, you’ll see the benefit.&lt;/p&gt;

&lt;p&gt;So … should your company do video meetings every day? If your team is small enough, and you all work in the same time zone, why not. I suppose this approach doesn’t scale at all, but I still have to work for a big remote company so I don’t know how they organize their work. As a programmer, I like to see that managers - and peers - are interested in what I’m doing, and doing a meeting is the bare minimum for showing appreciation.&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="remote" /><category term="work" /><category term="meeting" /><category term="meetings" /><summary type="html">Do you love meetings? Do you enjoy taking a break from your work and talk - ehm, listen to your managers, stakeholders, customers, peers? I suppose you not. If you’re like me, 99% of your work life meetings have been a total waste of time.</summary></entry><entry><title type="html">SSH cheatsheet (from zero to hero)</title><link href="https://michelenasti.com/2019/04/03/ssh-cheatsheet-from-zero-to-hero.html" rel="alternate" type="text/html" title="SSH cheatsheet (from zero to hero) " /><published>2019-04-03T00:00:00+02:00</published><updated>2019-05-09T11:34:37+02:00</updated><id>https://michelenasti.com/2019/04/03/ssh-cheatsheet-from-zero-to-hero</id><content type="html" xml:base="https://michelenasti.com/2019/04/03/ssh-cheatsheet-from-zero-to-hero.html">&lt;p&gt;SSH is one of the basic commands you need to master, no matter what’s your platform of choice. Because you’ll always end up working on some random server, and you’ll have to login to see logs or restarting services. Also, you’ll never see it as a &lt;em&gt;skill to show&lt;/em&gt; because it’s implicit that you have to know how to use it, at least for logging in to some website.&lt;/p&gt;

&lt;p&gt;Here is a little cheatsheet of the most important commands (and tricks) you might find useful.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ssh-big.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;creating-a-new-pair-of-keys&quot;&gt;Creating a new pair of keys&lt;/h2&gt;

&lt;p&gt;Before working with SSH, you need to create a new pair of keys. Basically it is a pair of private/public keys. &lt;strong&gt;To generate a new key pair on your computer&lt;/strong&gt;, run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ssh-keygen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;keys are created in &lt;code&gt;~/.ssh&lt;/code&gt; directory. Two files will be created:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;➜  $ cd ~/.ssh
➜  $ ls -al
-rw------- 1 musikele musikele 1,8K feb 18 21:56 id_rsa
-rw-r--r-- 1 musikele musikele  411 feb 18 21:56 id_rsa.pub
➜  $
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The private key is &lt;code&gt;id_rsa&lt;/code&gt; and you should never share it with anybody. It is readable and writable only by the current user.&lt;/p&gt;

&lt;p&gt;The public key is &lt;code&gt;id_rsa.pub&lt;/code&gt; and it can be shared with others. As you can see the &lt;code&gt;id_rsa.pub&lt;/code&gt; is also readable by anyone on the system.&lt;/p&gt;

&lt;h2 id=&quot;set-up-ssh-login-to-remote-server-without-password&quot;&gt;Set up SSH login to remote server without password&lt;/h2&gt;

&lt;p&gt;Now that we have SSH set up on our computer, let’s see how we can login to a remote server. (We assume that ssh is set up on the remote server too - if not, just lunch the previous command there too!).&lt;/p&gt;

&lt;p&gt;There are two ways to log in to a remote server:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;by typing the remote user’s password,&lt;/li&gt;
  &lt;li&gt;by using your private/public key.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will talk about the second option from now on.&lt;/p&gt;

&lt;p&gt;What we want to do now is to register our public key on the server. I want to remain  practical in this article, but if you need some deep explanation of what happens during the login process I suggest you to &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/understanding-the-ssh-encryption-and-connection-process&quot; title=&quot;How SSH works&quot;&gt;follow this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There’s a simple command to set up the ssh key on a remote server (run on your local computer):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ssh-copy-id root@123.123.123.123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;once you hit enter, the remote server will ask for the password (at least for the first time). Once done, you can log in to a remote server by typing&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ssh root@123.123.123.123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…and you’re in!&lt;/p&gt;

&lt;p&gt;What is this command &lt;code&gt;ssh-copy-id&lt;/code&gt; doing? This command will copy your public key (&lt;code&gt;~/.ssh/id_rsa.pub&lt;/code&gt;) in the remote file &lt;code&gt;~/.ssh/authenticated_keys&lt;/code&gt;. The server will use the your public key to authenticate you.&lt;/p&gt;

&lt;h2 id=&quot;logging-in-as-a-different-user&quot;&gt;Logging in as a different user&lt;/h2&gt;

&lt;p&gt;When we log in to a remote server, without using a username, we will log in with the same username of our local machine. My username is &lt;code&gt;musikele&lt;/code&gt;, so if I try to login to a remote server that’s what happens:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ssh 123.123.123.123
musikele@123.123.123.123's password:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… but if you’re logging in to a corporate machine you don’t have a user set up with your  username. So we prefix the host address with the remote user, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ssh remote_user@123.123.123.123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re in!&lt;/p&gt;

&lt;p&gt;Other useful options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-p 2222&lt;/code&gt; is used to specify the port to use. Default port for SSH is 22.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-i /path/to/alternate/key&lt;/code&gt; is used to speficy another &lt;em&gt;private&lt;/em&gt; key you want to use instead of the default one. You can have as many public/private keys you want, and they an be in different files or in different paths.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-f&lt;/code&gt; runs ssh in the background (you’ll see later when to use it)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-N&lt;/code&gt; does not open a window.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;to run only one command and exit, simply write the command after the ssh connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ssh -p 2222 remote_user@123.123.123.123 ls -al
drwxrwxrwx+  3 root          root     4096 Apr  3 10:02 #recycle
drwxr-xr-x  31 admin         users    4096 Mar 13 07:41 .
drwxrwxrwx+ 13 root          root     4096 Feb  6 09:54 ..
-rwxrwxrwx+  1 admin         users   14340 Jun 18  2017 .DS_Store
...
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We just lunched &lt;code&gt;ls -al&lt;/code&gt; on a remote machine! (and the prompt at line 7 is our local prompt, again).&lt;/p&gt;

&lt;h2 id=&quot;simplify-connections-with-ssh-config-files&quot;&gt;Simplify connections with ssh config files&lt;/h2&gt;

&lt;p&gt;It may be tedious to write the same info (username, remote server address, port…) again and again. With ssh we can define an alias with some informations already set, so that we don’t have to type them again and again. Here’s an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ vi ~/.ssh/config
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# use four spaces to indent
Host foo
    Hostname 123.123.123.123
    User root
    IdentityFile ~/.ssh/id_rsa
    Port 22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then we just log in with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ssh foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a real time saver tip ;)&lt;/p&gt;

&lt;h2 id=&quot;copy-files-to-and-from-the-remote-host&quot;&gt;Copy files to and from the remote host&lt;/h2&gt;

&lt;p&gt;One of the most common actions we want to do with our remote servers is to copy files from and to it. The handy command &lt;strong&gt;scp&lt;/strong&gt; will help us doing this.&lt;/p&gt;

&lt;p&gt;To  transfer a file from local host to a remote one:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;scp bar.txt mark@123.123.123.123:~/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we are coping &lt;code&gt;bar.txt&lt;/code&gt; file on the server, logging in as user &lt;code&gt;mark&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Whatever is after the &lt;code&gt;:&lt;/code&gt; is the path on the remote server. If the path starts with &lt;code&gt;/&lt;/code&gt; it is an absolute path; otherwise it will be local to the user’s home folder.&lt;/p&gt;

&lt;p&gt;Some other handy options for this command are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-P&lt;/code&gt; for the port (note that for the regular ssh we used &lt;code&gt;-p&lt;/code&gt; lowercase)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-r&lt;/code&gt; for a recursive copy of a folder&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And of course, if you want to copy from a remote host to your local pc:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;scp mark@123.123.123.123:~/bar.txt ./new.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;configure-a-ssh-tunnel&quot;&gt;Configure a ssh tunnel&lt;/h2&gt;

&lt;p&gt;With &lt;em&gt;tunneling&lt;/em&gt; you can redirect traffic from one port of an ssh host to a remote server.&lt;/p&gt;

&lt;p&gt;Let’s see an easy example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ssh -L 8000:yahoo.com:80 mark@myhost.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;your computer will listen on port &lt;code&gt;localhost:8000&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;when a packet is sent at &lt;code&gt;localhost:8000&lt;/code&gt; it will reach &lt;code&gt;myhost.com&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;ssh daemon at &lt;code&gt;myhost.com&lt;/code&gt; will redirect to &lt;code&gt;yahoo.com:80&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;responses follow the same path.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This technique can be useful to access a server on a private network. The only problem is that we also log in to &lt;code&gt;myhost.com&lt;/code&gt; and the connection stays open until we exit from the remote session.&lt;/p&gt;

&lt;p&gt;Combining with options  &lt;code&gt;-f -N&lt;/code&gt; ,  we run the tunnel and return to the localhost computer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ssh -f -N -L 8000:yahoo.com:80 mark@myhost.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another great use for tunneling is to redirect  traffic from the ssh server to your local host. Imagine to hit &lt;code&gt;myhost.com:8000&lt;/code&gt; but the traffic is redirected to &lt;code&gt;localhost:3000&lt;/code&gt;. This is useful for debugging, or to set up proxies, etc.&lt;/p&gt;

&lt;p&gt;Remote tunneling is disabled by default; to enable, open the config file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;set &lt;code&gt;GatewayPorts&lt;/code&gt; option to &lt;code&gt;yes&lt;/code&gt; and restart the service (for example with &lt;code&gt;service ssh restart&lt;/code&gt; on Debian/Ubuntu systems).&lt;/p&gt;

&lt;p&gt;Now we can explore the tunneling functionality by launching:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ssh -R 8000:localhost:3000 mark@myhost.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What’s happening here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;port &lt;code&gt;8000&lt;/code&gt; on server &lt;code&gt;myhost.com&lt;/code&gt; is exposed (be sure that it’s reachable, for example by setting port forwarding on gateways if you have)&lt;/li&gt;
  &lt;li&gt;when you connect to port &lt;code&gt;myhost.com:8000&lt;/code&gt; the data is sent to &lt;code&gt;localhost:3000&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;eventual responses will flow back on the same route.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;escape-sequences&quot;&gt;Escape sequences&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;To stop a blocked ssh connection hit &lt;code&gt;&amp;lt;ENTER&amp;gt;&lt;/code&gt; then write: &lt;code&gt;~.&lt;/code&gt; (tilde fullstop).&lt;/li&gt;
  &lt;li&gt;Another escape sequence is &lt;code&gt;~ CTRL-Z&lt;/code&gt; (tilde character + CTRL + Z). The ssh connection will be moved to background. To resume, type &lt;code&gt;fg&lt;/code&gt;. Remember to hit &lt;code&gt;&amp;lt;ENTER&amp;gt;&lt;/code&gt; if you have written anything before.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;verify-ssh-fingerprints&quot;&gt;Verify SSH fingerprints&lt;/h2&gt;

&lt;p&gt;When you connect to a new machine, a new entry is created in the local file &lt;code&gt;~/.ssh/known_hosts&lt;/code&gt; of your computer. This entry contains the fingerprint of the server, so next time it will be already trusted.&lt;/p&gt;

&lt;p&gt;However, sometimes keys on remote servers will change and our machine will not be able to connect again.&lt;/p&gt;

&lt;p&gt;In order to check the new fingerprint of a remote server:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;connect to the remote server (e.g. &lt;code&gt;ssh root@123.123.123.123&lt;/code&gt;) with password&lt;/li&gt;
  &lt;li&gt;on remote host, launch:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ssh-keygen -l -f /etc/ssh/ssh_host_ecdsa_key.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of the command is the fingerprint of the key.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;on localhost, launch:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ssh-keygen -R 123.123.123.123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will remove the line associated with &lt;code&gt;123.123.123.123&lt;/code&gt; in the &lt;code&gt;~/.ssh/known_hosts&lt;/code&gt; file.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;finally, connect again to the remote server:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ssh root@123.123.123.123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The remote host will show its fingerprint, and it should match the one calculated before.&lt;/p&gt;

&lt;h2 id=&quot;other-cool-ssh-options&quot;&gt;Other cool SSH options&lt;/h2&gt;

&lt;h3 id=&quot;deny-any-root-access&quot;&gt;Deny any root access&lt;/h3&gt;

&lt;p&gt;You can imagine why a ssh connection for the root account can be a bad thing. Fortunately It can be disabled.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;launch &lt;code&gt;vi /etc/ssh/sshd_config&lt;/code&gt;. This file contains a bunch of options for ssh.&lt;/li&gt;
  &lt;li&gt;Search for &lt;code&gt;PermitRootLogin&lt;/code&gt; and set to &lt;code&gt;no&lt;/code&gt; to avoid root login.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;prohibit-password-access&quot;&gt;Prohibit password access&lt;/h3&gt;

&lt;p&gt;Another value for this setting is &lt;code&gt;prohibit-password&lt;/code&gt;. This way you can only connect via public/private key.  You can disable password authentication by setting &lt;code&gt;PasswordAuthentication&lt;/code&gt; option to &lt;code&gt;no&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to accept connections only for a specific set of users, or only users that come from a specific IP, you can set &lt;code&gt;AllowUsers&lt;/code&gt; option like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AllowUsers foo bar@1.2.3.4 *@2.3.4.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember to restart the server with &lt;code&gt;service ssh restart&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;monitoring-connection-attempts&quot;&gt;Monitoring connection attempts&lt;/h2&gt;

&lt;p&gt;To check malicious/suspicious activity we have some tools that come at help.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;vi /var/log/auth.log&lt;/code&gt; contains all the informations about who tried to log in the system, with other info like the IP, etc.&lt;/li&gt;
  &lt;li&gt;command &lt;code&gt;lastlog&lt;/code&gt; will show last logs from all users of the system.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lastlog -u mark&lt;/code&gt; will display last logs for user &lt;code&gt;mark&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, we may see that our employee &lt;code&gt;mark&lt;/code&gt; is connecting to the server, but at strange hours. So we can ask mark to  &lt;code&gt;cat ~/bash_history&lt;/code&gt; and check his latest commands.  We can use this info to check if he legitimately accessed the machine, or if it was a hacker.&lt;/p&gt;

&lt;h3 id=&quot;thats-all-folks&quot;&gt;That’s all folks&lt;/h3&gt;

&lt;p&gt;This article is nothing more than a summary of what I learned by following &lt;a href=&quot;&quot;&gt;this excellent ssh course from Egghead&lt;/a&gt;. I think they are great and deserve a paid subscription.&lt;/p&gt;

&lt;p&gt;Tunnelling was the most difficult thing to set up. Here are &lt;a href=&quot;&quot;&gt;two&lt;/a&gt; &lt;a href=&quot;&quot;&gt;articles&lt;/a&gt; that have helped me out. about this&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="ssh" /><category term="tutorial" /><summary type="html">SSH is one of the basic commands you need to master, no matter what’s your platform of choice. Because you’ll always end up working on some random server, and you’ll have to login to see logs or restarting services. Also, you’ll never see it as a skill to show because it’s implicit that you have to know how to use it, at least for logging in to some website.</summary></entry><entry><title type="html">What’s the difference between Browserify and Webpack?</title><link href="https://michelenasti.com/2019/03/23/what-s-the-difference-between-browserify-and-webpack.html" rel="alternate" type="text/html" title="What's the difference between Browserify and Webpack?" /><published>2019-03-23T00:00:00+01:00</published><updated>2019-03-23T11:34:02+01:00</updated><id>https://michelenasti.com/2019/03/23/what-s-the-difference-between-browserify-and-webpack</id><content type="html" xml:base="https://michelenasti.com/2019/03/23/what-s-the-difference-between-browserify-and-webpack.html">&lt;p&gt;&lt;strong&gt;Browserify&lt;/strong&gt; belongs to the very first generation of module bundlers and it basically allowed one thing, that is, use the &lt;code&gt;require&lt;/code&gt; function from NodeJS in the browser. Browserify’s only job was to concatenate files wrapping them in functions that were then called by other fils.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bropack.png&quot; alt=&quot;&quot; title=&quot;Browserify vs Webpack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Webpack&lt;/strong&gt; came around after (that’s why I call it &lt;em&gt;2nd generation&lt;/em&gt;) but it enhanced a lot and it has also joined the &lt;em&gt;3rd generation&lt;/em&gt;, together with &lt;strong&gt;Rollup&lt;/strong&gt; and &lt;strong&gt;Parcel&lt;/strong&gt;. The difference with Browserify is that Webpack is extremely configurable, and it can be used to write libraries, webapps, and much more.&lt;/p&gt;

&lt;p&gt;Webpack integrates so well with all existing tools that already existed but that didn’t talk to each other (minimizers, obfuscators, patchers…) and by integrating with &lt;strong&gt;babel&lt;/strong&gt; it allowed to write ES6 code even before browsers were actually supporting it.&lt;/p&gt;

&lt;p&gt;The third generation not only did all of this but also introduced the concept of &lt;em&gt;zero config&lt;/em&gt;, meaning you don’t have to configure anything, it will just work.&lt;/p&gt;

&lt;p&gt;And then there’s &lt;em&gt;threeshaking&lt;/em&gt;: if an external file exposes 100 functions but you use only one, webpack picks only the one you used and its dependencies, not the whole file. This way, your bundler will save space, meaning less data flowing through the net.&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="browserify" /><category term="webpack" /><category term="rollup" /><category term="parcel" /><category term="bundler" /><summary type="html">Browserify belongs to the very first generation of module bundlers and it basically allowed one thing, that is, use the require function from NodeJS in the browser. Browserify’s only job was to concatenate files wrapping them in functions that were then called by other fils.</summary></entry><entry><title type="html">How ads are loaded so fast: the command queue pattern</title><link href="https://michelenasti.com/2019/02/12/how-ads-are-loaded-so-fast-the-command-queue-pattern.html" rel="alternate" type="text/html" title="How ads are loaded so fast: the command queue pattern" /><published>2019-02-12T00:00:00+01:00</published><updated>2019-02-15T11:55:44+01:00</updated><id>https://michelenasti.com/2019/02/12/how-ads-are-loaded-so-fast-the-command-queue-pattern</id><content type="html" xml:base="https://michelenasti.com/2019/02/12/how-ads-are-loaded-so-fast-the-command-queue-pattern.html">&lt;p&gt;Prior to work in an ads company I had no idea of how ads are actually rendered on a page. I mean, I had a vague sense of what was going on, but the actual world behind it … well, it’s huge :)&lt;/p&gt;

&lt;p&gt;Sometimes ads are loaded on a page even before you actually see any content. How? The first thing we learned at university is to wait for the DOM to have completely loaded, before doing anything to the DOM itself. This does not apply to ads, or better to say, ad companies use many tricks to load ads without blocking the DOM.&lt;/p&gt;

&lt;p&gt;I won’t go in the detail of this process now, but basically &lt;strong&gt;ads are rendered inside &lt;em&gt;iframes&lt;/em&gt;&lt;/strong&gt;, and iframes should be used only for very narrow use cases, like widgets to inject on other pages, or payment processors. In the past I did the exact opposite: we implemented an angular 1 routing system with iframes, and that’s something I wouldn’t do again (&lt;a href=&quot;https://michelenasti.com/2015/05/iframe-safari-ios-e-la-lotta-allultimo-millisecondo/&quot;&gt;my experience&lt;/a&gt; - in italian).&lt;/p&gt;

&lt;p&gt;Here in this article I’m going to talk about how some popular ad libraries (like &lt;a href=&quot;https://support.google.com/admanager/answer/1638622?hl=en&amp;amp;ref_topic=4390039&quot;&gt;google publisher tag&lt;/a&gt; or &lt;a href=&quot;http://prebid.org/dev-docs/getting-started.html&quot;&gt;Prebid&lt;/a&gt;) allow users to write code that will be put in a queue and will be executed as soon as the library is loaded.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-async-library-loading&quot;&gt;The problem: async library loading&lt;/h2&gt;

&lt;p&gt;Suppose we have a library that will load something, and this initialization process will take some time. Also, we don’t know when the library will be actually loaded, since it’s asyncronous. However, we would like to start giving commands (e.g. setup instructions) to this library as soon as possible. How?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Let’s suppose our library’s name is, without much fantasy, &lt;code&gt;Library&lt;/code&gt; and is loaded from file &lt;code&gt;Library.js&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-client-code&quot;&gt;The client code&lt;/h2&gt;

&lt;p&gt;in the client’s code, the code that the user will write to interact with our library, we will initialize the library like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var Library = Library || {}; 
Library.queue = Library.queue || [];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In these two simple lines, we have initialized our library and its commands queue. In fact, if the &lt;code&gt;Library&lt;/code&gt; object does not exist, we will initialize it with an empty object, and then we will create the empty array property &lt;code&gt;Library.queue&lt;/code&gt; that will contain our initalization code. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Library.queue.push(function(){
	console.log(&quot;Called only when the library has loaded, not before&quot;);
	Library.doMagic();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: I’m deliberately using ES5 code here. It would be fantastic that every user in the world was using the latest version of the coolest browser, but the reality is that &lt;strong&gt;a bunch of zombies are still using Internet Explorer&lt;/strong&gt;. Ad companies want to earn money on these people too!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-we-load-the-library&quot;&gt;How we load the Library&lt;/h2&gt;

&lt;p&gt;Imagine we load our library with this &lt;code&gt;script&lt;/code&gt; tag:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;/path/to/Library.js&quot; async defer&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;async&lt;/code&gt; means that the browser will download the library as soon as possible, but the evaluation will start whenever it is more convenient (the browser decides). The HTML parser is paused when the script is evluated. &lt;code&gt;defer&lt;/code&gt; means the same thing (more or less!) but the code execution happens only after the DOM has been loaded. &lt;a href=&quot;https://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html&quot; title=&quot;async vs defer&quot;&gt;More info here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By inserting the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; keyword we don’t have any guarantee of the Library execution time, so we don’t know who will be loaded first.&lt;/p&gt;

&lt;h2 id=&quot;the-library-internals&quot;&gt;The Library internals&lt;/h2&gt;

&lt;p&gt;Here’s an example of how the Library could initialize itself:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//This code could be in file Library.js 
 
var Library = (function() {
  ...
  var queue = []; 
  if (Library) {
    // queue from outside might be null... 
    queue = Library.queue || queue;
  } 
  //here we execute code that is in the queue
  while (queue.length &amp;gt; 0) {
    var command = queue.shift(); 
    command();
  }
  ...
})()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First we will check if the &lt;code&gt;Library&lt;/code&gt; object already exists. This may be because of the initialization we did in the client code. If so, we take the queue object and start executing all commands from the queue, until the queue is empty.&lt;/p&gt;

&lt;h2 id=&quot;thats-so-async-its-actually-fast&quot;&gt;That’s so async, it’s actually fast&lt;/h2&gt;

&lt;p&gt;By not forcing the browser to stop and parse our js, we gain a significant amount of perceived speed. And by splitting the client code in &lt;em&gt;commands&lt;/em&gt; we also get the guarantee that the client code will be executed.&lt;/p&gt;

&lt;p&gt;In this simple snippet we have not covered other themes like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;what if we add another element to the queue after the initialization has already completed?&lt;/li&gt;
  &lt;li&gt;A way of logging functions (yes, we can stringify functions) and remember a history of executed functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s an exercise for you, fellow readers!&lt;/p&gt;</content><author><name>musikele</name></author><category term="Italiano" /><summary type="html">Prior to work in an ads company I had no idea of how ads are actually rendered on a page. I mean, I had a vague sense of what was going on, but the actual world behind it … well, it’s huge :)</summary></entry></feed>