<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>I'm a full stack Developer with an eye for the web.</description>
    <link>https://michelenasti.com/</link>
    <atom:link href="https://michelenasti.com/feed.xml" rel="self" type="application/rss+xml" />
    <updated>2017-03-23T12:09:23+01:00</updated>
    <id>https://michelenasti.com</id>
    <author>
      <name></name>
    </author>
    
      <item>
        <title>L'Inglese tra italiani, a lavoro, è una scelta sbagliata</title>
        <link>https://michelenasti.com/2017/03/20/l-inglese-tra-italiani-a-lavoro-e-una-scelta-sbagliata.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/03/20/l-inglese-tra-italiani-a-lavoro-e-una-scelta-sbagliata.html</guid>
        <pubDate>Mon, 20 Mar 2017 10:56:01 +0100</pubDate>
        <author></author>
        
          <description>&lt;p&gt;C’è un trend che ogni tanto ritorna, ossia quello di usare l’inglese come lingua ufficiale durante l’orario di lavoro. Con colleghi italiani. In un ufficio italiano.&lt;/p&gt;

&lt;p&gt;La prima volta che ho sentito di questa pratica era durante la mia prima esperienza lavorativa; realizzando un software per un’azienda inglese, una grande parte delle specifiche arrivavano in quella lingua (giustamente!) e i nostri Business Analyst dovevano interfacciarsi continuamente con loro per documentare il software. Da qui, la scelta del team di analisti di parlare solo in inglese, tra di loro, per un giorno a settimana.&lt;/p&gt;

&lt;p&gt;Ora che lavoro da remoto, e interazione “sincrona” con i colleghi è molto scarsa, per uno specifico progetto è stato concordato di comunicare (in chat!) solo ed esclusivamente in inglese.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pexels-photo-119689%20(1).jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;it’s time for a cup of tea!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Chi vi scrive ha un inglese decente, complice il papà professore di Inglese che si è sbattuto per insegnarglielo fin da piccolo. Ovvio che non sono madrelingua ma non faccio pena, anzi mi sento tranquillamente a mio agio a parlare il mio fantastico &lt;em&gt;English&lt;/em&gt; con accento napoletano.&lt;/p&gt;

&lt;p&gt;Ebbene, &lt;strong&gt;trovo questa idea di sforzarsi a parlare inglese, tra italiani, una cagata pazzesca.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;i-tipi-di-comunicazione&quot;&gt;I tipi di comunicazione&lt;/h2&gt;

&lt;p&gt;Faccio solo un rapido e semplice excursus sul tipo di comunicazioni possibili in un ambiente di lavoro:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Comunicazione Sincrona&lt;/strong&gt; - è quel tipo di comunicazione che prevede due o più persone impegnate nello stesso momento. Esempi: la classica chiacchierata face-2-face, la telefonata, una videocall (skype...) etc. Qui è importante l'immediatezza e la chiarezza dei concetti espressi.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Comunicazione Asincrona&lt;/strong&gt; - Le comunicazioni che non prevedono una risposta immediata tra gli interlocutori. Tra questi tipi di comunicazione ci sono chat, mail, blog post, commenti a un wiki, documentazione, documenti word... Qui invece è desiderabile ottenere una comunicazione non ambigua e chiara anche a distanza di mesi.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aspettarsi una risposta istantanea a una chat è da stupidi, così come vi sembrerebbe piuttosto strano se un interlocutore fisico (con cui state conversando al distributore) smetta di rispondervi all’improvviso.&lt;/p&gt;

&lt;p&gt;Bene, avete appena completato il primo corso base di comunicazione aziendale :)&lt;/p&gt;

&lt;h2 id=&quot;perché-parlare-in-inglese-tra-italiani-è-una-cagata-pazzesca&quot;&gt;Perché parlare in inglese tra italiani è una cagata pazzesca&lt;/h2&gt;

&lt;p&gt;Ho sentito molti motivi per cui le aziende vogliono introdurre l’inglese aggressivo tra i propri dipendenti. Smontiamoli uno ad uno.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&quot;Così possiamo attrarre talenti stranieri&quot;.&lt;/strong&gt;&amp;nbsp;Cazzata. I talenti stranieri non vengono perché in Italia si parla inglese, anzi si aspettano che con loro parliate in inglese (che li avete chiamati a fare?). Per attrarre talenti stranieri servono &lt;strong&gt;idee sfidanti&lt;/strong&gt;, &lt;strong&gt;stipendi alti&lt;/strong&gt;, e un&amp;nbsp;&lt;strong&gt;ecosistema dinamico.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&quot;Così i dipendenti migliorano l'inglese&quot;.&lt;/strong&gt; Mi dispiace davvero che qualcuno pensi che, se due persone che non conoscono l'inglese iniziano improvvisamente a parlarlo (sotto tortura), poi lo imparano. Anche questa è una &lt;em&gt;cazzata&lt;/em&gt;. Se volete imparare l'inglese esiste una sola strada: un bel corso di lingue in cui si parla molto (e in cui la grammatica non è trascurata).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&quot;Così ci sentiamo più internazionali&quot;&lt;/strong&gt;. Equivale a misurarsi il pene col righello senza mai confrontare le misure con gli altri. L'unica metrica che dovrebbe interessarvi è il FATTURATO.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;Aggiungo, per completezza, che sul luogo di lavoro è importante che la comunicazione sia &lt;strong&gt;efficace, semplice e chiara&lt;/strong&gt;. &lt;em&gt;Ogni sovrastruttura, impedimento, legaccio, costrizione finirà col logorare il vostro lavoro.&lt;/em&gt; Io ad esempio non sopporto quando devo parlare con qualcuno e mi si risponde “mandami una mail che sono SEMPRE impegnato” (non riesci neanche a trovare 10 minuti per me?). Anche questo è un esempio di costrizione che non migliora il problem solving. &lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;lestremo-opposto-only-italian-please&quot;&gt;L’estremo opposto: only Italian, please&lt;/h2&gt;

&lt;p&gt;Siccome sono un programmatore (e se siete su questa pagina dovreste averlo intuito) posso già dirvi che il 99% dei libri su cui ho studiato, gli articoli on line che ho letto (e scritto) , le guide tecniche e i siti delle aziende più importanti sono in inglese.&lt;/p&gt;

&lt;p&gt;Questo vuol dire sostanzialmente due cose:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;La documentazione dei vostri software e dei vostri processi di business non può essere in italiano&lt;/strong&gt;. Anche se oggi siete tutti italiani sul progetto, un bel giorno potreste trovarvi ad assumere degli stranieri, o delocalizzare lo sviluppo in qualche paese asiatico, e l’unico modo che avete per comunicare con loro sarà l’inglese. Siate future-proof e usate l’inglese come fa il resto del mondo.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Il vostro codice sorgente deve essere in inglese.&lt;/strong&gt; Il motivo è lo stesso del punto precedente, con l’aggravante che &lt;code class=&quot;highlighter-rouge&quot;&gt;checkIfCodiceFiscaleIsValid()&lt;/code&gt; non si può sentire.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E’ importante dunque che chi voglia lavorare in questo mondo debba per lo meno saper leggere e scrivere un Inglese decente.&lt;/p&gt;

&lt;h2 id=&quot;quando-è-giusto-parlare-inglese-o-qualsiasi-altra-lingua-straniera&quot;&gt;Quando è giusto parlare inglese (o qualsiasi altra lingua straniera)&lt;/h2&gt;

&lt;p&gt;Quando nella vostra conversazione sincrona uno dei partecipanti non capisce l’italiano. A quel punto si sceglie una lingua compresa da tutti e la si usa.&lt;/p&gt;

&lt;h2 id=&quot;implicazioni-filosofiche-di-questa-scelta&quot;&gt;Implicazioni filosofiche di questa scelta&lt;/h2&gt;

&lt;p&gt;Siamo costretti a restare confinati nella nostra italianità? Non avremo mai accesso ai “talenti stranieri”?&lt;/p&gt;

&lt;p&gt;Se la tua azienda è una s.r.l., non puoi certo definirla L.T.D. :)&lt;/p&gt;

&lt;p&gt;Un altra conseguenza è che non è la lingua che si parla a rendere &lt;em&gt;grande&lt;/em&gt; un workplace.&lt;/p&gt;

&lt;p&gt;Infine: meglio un ottimo performer con un inglese zoppicante, o un  inglese madrelingua che lavora così così?&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/03/20/l-inglese-tra-italiani-a-lavoro-e-una-scelta-sbagliata.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>L'Inglese tra italiani, a lavoro, è una scelta sbagliata</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" L'Inglese tra italiani, a lavoro, è una scelta sbagliata ">
                          <figcaption>L'Inglese tra italiani, a lavoro, è una scelta sbagliata</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-03-20 10:56:01 CET">Mon, 20 Mar 2017 10:56:01 +0100</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>C’è un trend che ogni tanto ritorna, ossia quello di usare l’inglese come lingua ufficiale durante l’orario di lavoro. Con colleghi italiani. In un ufficio italiano.</p>

<p>La prima volta che ho sentito di questa pratica era durante la mia prima esperienza lavorativa; realizzando un software per un’azienda inglese, una grande parte delle specifiche arrivavano in quella lingua (giustamente!) e i nostri Business Analyst dovevano interfacciarsi continuamente con loro per documentare il software. Da qui, la scelta del team di analisti di parlare solo in inglese, tra di loro, per un giorno a settimana.</p>

<p>Ora che lavoro da remoto, e interazione “sincrona” con i colleghi è molto scarsa, per uno specifico progetto è stato concordato di comunicare (in chat!) solo ed esclusivamente in inglese.</p>

<p><img src="/images/pexels-photo-119689%20(1).jpeg" alt="" /></p>

<p><em>it’s time for a cup of tea!</em></p>

<p>Chi vi scrive ha un inglese decente, complice il papà professore di Inglese che si è sbattuto per insegnarglielo fin da piccolo. Ovvio che non sono madrelingua ma non faccio pena, anzi mi sento tranquillamente a mio agio a parlare il mio fantastico <em>English</em> con accento napoletano.</p>

<p>Ebbene, <strong>trovo questa idea di sforzarsi a parlare inglese, tra italiani, una cagata pazzesca.</strong></p>

<h2 id="i-tipi-di-comunicazione">I tipi di comunicazione</h2>

<p>Faccio solo un rapido e semplice excursus sul tipo di comunicazioni possibili in un ambiente di lavoro:</p>
<ul>
  <li>
    <p><strong>Comunicazione Sincrona</strong> - è quel tipo di comunicazione che prevede due o più persone impegnate nello stesso momento. Esempi: la classica chiacchierata face-2-face, la telefonata, una videocall (skype...) etc. Qui è importante l'immediatezza e la chiarezza dei concetti espressi.</p>
  </li>
  <li>
    <p><strong>Comunicazione Asincrona</strong> - Le comunicazioni che non prevedono una risposta immediata tra gli interlocutori. Tra questi tipi di comunicazione ci sono chat, mail, blog post, commenti a un wiki, documentazione, documenti word... Qui invece è desiderabile ottenere una comunicazione non ambigua e chiara anche a distanza di mesi.</p>
  </li>
</ul>

<p>Aspettarsi una risposta istantanea a una chat è da stupidi, così come vi sembrerebbe piuttosto strano se un interlocutore fisico (con cui state conversando al distributore) smetta di rispondervi all’improvviso.</p>

<p>Bene, avete appena completato il primo corso base di comunicazione aziendale :)</p>

<h2 id="perché-parlare-in-inglese-tra-italiani-è-una-cagata-pazzesca">Perché parlare in inglese tra italiani è una cagata pazzesca</h2>

<p>Ho sentito molti motivi per cui le aziende vogliono introdurre l’inglese aggressivo tra i propri dipendenti. Smontiamoli uno ad uno.</p>
<ul>
  <li>
    <p><strong>"Così possiamo attrarre talenti stranieri".</strong>&nbsp;Cazzata. I talenti stranieri non vengono perché in Italia si parla inglese, anzi si aspettano che con loro parliate in inglese (che li avete chiamati a fare?). Per attrarre talenti stranieri servono <strong>idee sfidanti</strong>, <strong>stipendi alti</strong>, e un&nbsp;<strong>ecosistema dinamico.</strong></p>
  </li>
  <li>
    <p><strong>"Così i dipendenti migliorano l'inglese".</strong> Mi dispiace davvero che qualcuno pensi che, se due persone che non conoscono l'inglese iniziano improvvisamente a parlarlo (sotto tortura), poi lo imparano. Anche questa è una <em>cazzata</em>. Se volete imparare l'inglese esiste una sola strada: un bel corso di lingue in cui si parla molto (e in cui la grammatica non è trascurata).</p>
  </li>
  <li>
    <p><strong>"Così ci sentiamo più internazionali"</strong>. Equivale a misurarsi il pene col righello senza mai confrontare le misure con gli altri. L'unica metrica che dovrebbe interessarvi è il FATTURATO.</p>
  </li>
</ul>

<p><span style="font-size: 18px;">Aggiungo, per completezza, che sul luogo di lavoro è importante che la comunicazione sia <strong>efficace, semplice e chiara</strong>. <em>Ogni sovrastruttura, impedimento, legaccio, costrizione finirà col logorare il vostro lavoro.</em> Io ad esempio non sopporto quando devo parlare con qualcuno e mi si risponde “mandami una mail che sono SEMPRE impegnato” (non riesci neanche a trovare 10 minuti per me?). Anche questo è un esempio di costrizione che non migliora il problem solving. </span></p>

<h2 id="lestremo-opposto-only-italian-please">L’estremo opposto: only Italian, please</h2>

<p>Siccome sono un programmatore (e se siete su questa pagina dovreste averlo intuito) posso già dirvi che il 99% dei libri su cui ho studiato, gli articoli on line che ho letto (e scritto) , le guide tecniche e i siti delle aziende più importanti sono in inglese.</p>

<p>Questo vuol dire sostanzialmente due cose:</p>
<ul>
  <li><strong>La documentazione dei vostri software e dei vostri processi di business non può essere in italiano</strong>. Anche se oggi siete tutti italiani sul progetto, un bel giorno potreste trovarvi ad assumere degli stranieri, o delocalizzare lo sviluppo in qualche paese asiatico, e l’unico modo che avete per comunicare con loro sarà l’inglese. Siate future-proof e usate l’inglese come fa il resto del mondo.</li>
  <li><strong>Il vostro codice sorgente deve essere in inglese.</strong> Il motivo è lo stesso del punto precedente, con l’aggravante che <code class="highlighter-rouge">checkIfCodiceFiscaleIsValid()</code> non si può sentire.</li>
</ul>

<p>E’ importante dunque che chi voglia lavorare in questo mondo debba per lo meno saper leggere e scrivere un Inglese decente.</p>

<h2 id="quando-è-giusto-parlare-inglese-o-qualsiasi-altra-lingua-straniera">Quando è giusto parlare inglese (o qualsiasi altra lingua straniera)</h2>

<p>Quando nella vostra conversazione sincrona uno dei partecipanti non capisce l’italiano. A quel punto si sceglie una lingua compresa da tutti e la si usa.</p>

<h2 id="implicazioni-filosofiche-di-questa-scelta">Implicazioni filosofiche di questa scelta</h2>

<p>Siamo costretti a restare confinati nella nostra italianità? Non avremo mai accesso ai “talenti stranieri”?</p>

<p>Se la tua azienda è una s.r.l., non puoi certo definirla L.T.D. :)</p>

<p>Un altra conseguenza è che non è la lingua che si parla a rendere <em>grande</em> un workplace.</p>

<p>Infine: meglio un ottimo performer con un inglese zoppicante, o un  inglese madrelingua che lavora così così?</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>Deploy a NodeJS app on Heroku in less than 1 minute</title>
        <link>https://michelenasti.com/2017/03/18/deploy-a-nodejs-app-on-heroku-in-less-than-1-minute.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/03/18/deploy-a-nodejs-app-on-heroku-in-less-than-1-minute.html</guid>
        <pubDate>Sat, 18 Mar 2017 14:18:53 +0100</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Actually, the time you need to deploy an app depends on how fast you are to copy &amp;amp; paste.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;Your code must be hosted in a git repository.&lt;/p&gt;

&lt;h2 id=&quot;steps-to-set-up-the-environment-the-first-time&quot;&gt;Steps to set up the environment the first time&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Sign up (or log in) to
  &lt;a href=&quot;http://heroku.com&quot;&gt;heroku.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;download
  &lt;a href=&quot;https://devcenter.heroku.com/articles/heroku-cli&quot;&gt;heroku’s command for the console&lt;/a&gt; (select the right version for your operating system).&lt;/li&gt;
  &lt;li&gt;be sure the command is installed: &lt;code class=&quot;highlighter-rouge&quot;&gt;heroku -v&lt;/code&gt; (you should see some output)&lt;/li&gt;
  &lt;li&gt;launch &lt;code class=&quot;highlighter-rouge&quot;&gt;heroku login&lt;/code&gt;and log in with your email and password.&lt;/li&gt;
  &lt;li&gt;Upload ssh keys to heroku: &lt;code class=&quot;highlighter-rouge&quot;&gt;heroku keys:add&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh -v git@heroku.com&lt;/code&gt;: even if the command seems to fail, check that the long output contains the row
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;debug1: Authentication succeeded (publickey).
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;Generally it is one of the last 5-6 rows. If this log is present, everything is set up correctly.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;steps-to-set-up-the-environment-with-the-nodejs-app&quot;&gt;Steps to set up the environment with the NodeJs app&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Set the host port of your application as an environment variable:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const port = process.env.PORT || 3000 ;  
... 
app.listen(port);
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;set the &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt; script, in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;scripts&quot;: {
   &quot;start&quot;: &quot;node server.js&quot;,
   ...
   }

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Check that the app runs correctly: &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;launch &lt;code class=&quot;highlighter-rouge&quot;&gt;heroku create&lt;/code&gt;: will create a new remote for your repository named &lt;code class=&quot;highlighter-rouge&quot;&gt;heroku&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push heroku&lt;/code&gt; : will push your code to heroku&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;heroku open&lt;/code&gt;: will open your webapp in the browser&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For every modification you do to your code, just commit and &lt;code class=&quot;highlighter-rouge&quot;&gt;git push heroku&lt;/code&gt;!&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/03/18/deploy-a-nodejs-app-on-heroku-in-less-than-1-minute.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>Deploy a NodeJS app on Heroku in less than 1 minute</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" Deploy a NodeJS app on Heroku in less than 1 minute ">
                          <figcaption>Deploy a NodeJS app on Heroku in less than 1 minute</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-03-18 14:18:53 CET">Sat, 18 Mar 2017 14:18:53 +0100</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Actually, the time you need to deploy an app depends on how fast you are to copy &amp; paste.</p>

<h2 id="prerequisites">Prerequisites</h2>
<p>Your code must be hosted in a git repository.</p>

<h2 id="steps-to-set-up-the-environment-the-first-time">Steps to set up the environment the first time</h2>
<ol>
  <li>Sign up (or log in) to
  <a href="http://heroku.com">heroku.com</a></li>
  <li>download
  <a href="https://devcenter.heroku.com/articles/heroku-cli">heroku’s command for the console</a> (select the right version for your operating system).</li>
  <li>be sure the command is installed: <code class="highlighter-rouge">heroku -v</code> (you should see some output)</li>
  <li>launch <code class="highlighter-rouge">heroku login</code>and log in with your email and password.</li>
  <li>Upload ssh keys to heroku: <code class="highlighter-rouge">heroku keys:add</code></li>
  <li><code class="highlighter-rouge">ssh -v git@heroku.com</code>: even if the command seems to fail, check that the long output contains the row
    <div class="highlighter-rouge"><pre class="highlight"><code>debug1: Authentication succeeded (publickey).
</code></pre>
    </div>
    <p>Generally it is one of the last 5-6 rows. If this log is present, everything is set up correctly.</p>
  </li>
</ol>

<h2 id="steps-to-set-up-the-environment-with-the-nodejs-app">Steps to set up the environment with the NodeJs app</h2>
<ul>
  <li>Set the host port of your application as an environment variable:
    <div class="highlighter-rouge"><pre class="highlight"><code>const port = process.env.PORT || 3000 ;  
... 
app.listen(port);
</code></pre>
    </div>
  </li>
  <li>set the <code class="highlighter-rouge">npm start</code> script, in <code class="highlighter-rouge">package.json</code>:</li>
</ul>

<div class="highlighter-rouge"><pre class="highlight"><code>"scripts": {
   "start": "node server.js",
   ...
   }

</code></pre>
</div>

<ul>
  <li>Check that the app runs correctly: <code class="highlighter-rouge">npm start</code></li>
  <li>launch <code class="highlighter-rouge">heroku create</code>: will create a new remote for your repository named <code class="highlighter-rouge">heroku</code></li>
  <li><code class="highlighter-rouge">git push heroku</code> : will push your code to heroku</li>
  <li><code class="highlighter-rouge">heroku open</code>: will open your webapp in the browser</li>
</ul>

<p>For every modification you do to your code, just commit and <code class="highlighter-rouge">git push heroku</code>!</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>Two easy ways perform GET requests in NodeJS </title>
        <link>https://michelenasti.com/2017/03/14/two-easy-ways-perform-get-requests-in-nodejs.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/03/14/two-easy-ways-perform-get-requests-in-nodejs.html</guid>
        <pubDate>Tue, 14 Mar 2017 00:07:41 +0100</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Today I want to talk about something that we all need during our programming life: requesting data from a remote server. We will do this using callbacks and promises, to show both the approaches.&lt;/p&gt;

&lt;p&gt;We will see this specifically for NodeJS because it’s so simple that I couldn’t even imagine.&lt;/p&gt;

&lt;p&gt;In this article I’m going to talk about two super-popular libraries that do the same thing, but expose their API to the developer differently. Let’s see what they do and how to use them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/callbacks.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-simple-use-case-google-maps-api&quot;&gt;a simple use case: Google maps API&lt;/h2&gt;

&lt;p&gt;Just as an example, we will write a simple program that takes a textual address (for example&lt;code class=&quot;highlighter-rouge&quot;&gt;Piazza della Concordia, Salerno&lt;/code&gt;) and return latitude and longitude.&lt;/p&gt;

&lt;p&gt;The URL is this: &lt;a href=&quot;https://maps.googleapis.com/maps/api/geocode/json?address=piazza della concordia, salerno&quot;&gt;https://maps.googleapis.com/maps/api/geocode/json?address=piazza della concordia, salerno&lt;/a&gt;.  Clicking on this link you can see the response in json format.&lt;/p&gt;

&lt;p&gt;Our mission is to retrive latitude and longitude, so&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;results[0].geometry.location.lat
results[0].geometry.location.lng
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;request-the-name-says-it-all&quot;&gt;Request: the name says it all&lt;/h2&gt;

&lt;p&gt;The first library I’m going to talk is simply called &lt;a href=&quot;https://www.npmjs.com/package/request&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt;&lt;/a&gt;. Install as always:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;npm&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install request --save
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the NPM description:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Request is designed to be the simplest way possible to make http calls. It supports HTTPS and follows redirects by default.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is a NodeJS function that uses &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt; to perform the call&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encodedAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;encodeURIComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//server unreachable&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Unable to connect to Google Servers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// no results &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ZERO_RESULTS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Unable to find that address'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'OK'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formatted_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;latitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;longitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lng&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;encodeURIComponent()&lt;/code&gt; is a function that converts strings with special characters (like spaces, or quotes..) to a string that can be passed over a URI.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt; is just a function that takes an URI, some options, and will give the result in a &lt;strong&gt;callback&lt;/strong&gt;. Since we are following Node standard approach to callbacks, where the first argument is the error object, the return callback contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; as first argument.&lt;/p&gt;

&lt;h2 id=&quot;axios-a-promise-based-equivalent&quot;&gt;Axios: a Promise based equivalent&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://michelenasti.com/2017/03/12/js-promises-description-pros-cons-of-this-es6-construct.html&quot;&gt;In my last article we talked about promises&lt;/a&gt;, so we would like to see these in action, right? We have two options, the first is to wrap &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt; in a promise (easy, but more code); the second is to &lt;strong&gt;use a library already built with promises in mind&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The one I use, and that is super popular, is called &lt;strong&gt;&lt;a href=&quot;https://www.npmjs.com/package/axios&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Axios&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;: Here’s the description&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Promise based HTTP client for the browser and node.js&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To install:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;npm&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install axios
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here is the snippet for the axios request:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encodedAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;encodeURIComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geocodeUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geocodeUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// throw error on no results&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ZERO_RESULTS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Unable to find that address'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// return new promise with data (for chaining)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;latitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;longitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;formatted_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formatted_address&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// show data&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;latitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formatted_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;latitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;latitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;latitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;longitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//error handling &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The approach here is different. &lt;code class=&quot;highlighter-rouge&quot;&gt;axios.get()&lt;/code&gt; returns a Promise, that we chain with a call to the &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Once we have the data, in the form of &lt;code class=&quot;highlighter-rouge&quot;&gt;response.data&lt;/code&gt;, we can extrapolate the fields we need.&lt;/p&gt;

&lt;p&gt;I could just print the data in the first &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; block, but to be more coherent with my design guidelines (&lt;em&gt;every function does just one thing&lt;/em&gt;) I wanted to separate the two operations so the first block will just retrieve the data, then returns another Promise (&lt;code class=&quot;highlighter-rouge&quot;&gt;return Promise.resolve({..})&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The next &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; block will only display the data retrieved.&lt;/p&gt;

&lt;h2 id=&quot;which-approach-do-you-prefer&quot;&gt;Which approach do you prefer?&lt;/h2&gt;

&lt;p&gt;This depends on you! &lt;strong&gt;I prefer promises&lt;/strong&gt;, because I find them more natural, but being a Node coder means you can choose and decide what’s best for you. Both are well tested libraries with well known patterns, so you only have to choose the one you love.&lt;/p&gt;

&lt;p&gt;Cheers from &lt;code class=&quot;highlighter-rouge&quot;&gt;40.7802306&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;14.7010686&lt;/code&gt; !&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/03/14/two-easy-ways-perform-get-requests-in-nodejs.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>Two easy ways perform GET requests in NodeJS </h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" Two easy ways perform GET requests in NodeJS  ">
                          <figcaption>Two easy ways perform GET requests in NodeJS </figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-03-14 00:07:41 CET">Tue, 14 Mar 2017 00:07:41 +0100</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Today I want to talk about something that we all need during our programming life: requesting data from a remote server. We will do this using callbacks and promises, to show both the approaches.</p>

<p>We will see this specifically for NodeJS because it’s so simple that I couldn’t even imagine.</p>

<p>In this article I’m going to talk about two super-popular libraries that do the same thing, but expose their API to the developer differently. Let’s see what they do and how to use them.</p>

<p><img src="/images/callbacks.png" alt="" /></p>

<h2 id="a-simple-use-case-google-maps-api">a simple use case: Google maps API</h2>

<p>Just as an example, we will write a simple program that takes a textual address (for example<code class="highlighter-rouge">Piazza della Concordia, Salerno</code>) and return latitude and longitude.</p>

<p>The URL is this: <a href="https://maps.googleapis.com/maps/api/geocode/json?address=piazza della concordia, salerno">https://maps.googleapis.com/maps/api/geocode/json?address=piazza della concordia, salerno</a>.  Clicking on this link you can see the response in json format.</p>

<p>Our mission is to retrive latitude and longitude, so</p>

<div class="highlighter-rouge"><pre class="highlight"><code>results[0].geometry.location.lat
results[0].geometry.location.lng
</code></pre>
</div>

<h2 id="request-the-name-says-it-all">Request: the name says it all</h2>

<p>The first library I’m going to talk is simply called <a href="https://www.npmjs.com/package/request"><code class="highlighter-rouge">request</code></a>. Install as always:</p>

<div class="language-console highlighter-rouge"><pre class="highlight"><code><span class="w">$ </span><span class="nc">npm</span><span class="kv"> install request --save
</span></code></pre>
</div>

<p>From the NPM description:</p>

<blockquote>
  <p>Request is designed to be the simplest way possible to make http calls. It supports HTTPS and follows redirects by default.</p>
</blockquote>

<p>Here is a NodeJS function that uses <code class="highlighter-rouge">request</code> to perform the call</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">encodedAddress</span> <span class="o">=</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">address</span><span class="p">);</span>

  <span class="nx">request</span><span class="p">({</span>
    <span class="na">url</span><span class="p">:</span> <span class="err">`</span><span class="na">https</span><span class="p">:</span><span class="c1">//maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,</span>
    <span class="na">json</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">},</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>

    <span class="c1">//server unreachable</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> 
      <span class="nx">callback</span><span class="p">(</span><span class="s1">'Unable to connect to Google Servers'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// no results </span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">body</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="s1">'ZERO_RESULTS'</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">callback</span><span class="p">(</span><span class="s1">'Unable to find that address'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">body</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="s1">'OK'</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">callback</span><span class="p">(</span><span class="kc">undefined</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">address</span><span class="p">:</span> <span class="nx">body</span><span class="p">.</span><span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">formatted_address</span><span class="p">,</span>
        <span class="na">latitude</span><span class="p">:</span> <span class="nx">body</span><span class="p">.</span><span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">lat</span><span class="p">,</span>
        <span class="na">longitude</span><span class="p">:</span> <span class="nx">body</span><span class="p">.</span><span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">lng</span>
      <span class="p">});</span>
    <span class="p">}</span>

  <span class="p">});</span>
</code></pre>
</div>

<p><code class="highlighter-rouge">encodeURIComponent()</code> is a function that converts strings with special characters (like spaces, or quotes..) to a string that can be passed over a URI.</p>

<p><code class="highlighter-rouge">request</code> is just a function that takes an URI, some options, and will give the result in a <strong>callback</strong>. Since we are following Node standard approach to callbacks, where the first argument is the error object, the return callback contains a <code class="highlighter-rouge">undefined</code> as first argument.</p>

<h2 id="axios-a-promise-based-equivalent">Axios: a Promise based equivalent</h2>

<p><a href="https://michelenasti.com/2017/03/12/js-promises-description-pros-cons-of-this-es6-construct.html">In my last article we talked about promises</a>, so we would like to see these in action, right? We have two options, the first is to wrap <code class="highlighter-rouge">request</code> in a promise (easy, but more code); the second is to <strong>use a library already built with promises in mind</strong>.</p>

<p>The one I use, and that is super popular, is called <strong><a href="https://www.npmjs.com/package/axios"><code class="highlighter-rouge">Axios</code></a></strong>: Here’s the description</p>

<blockquote>
  <p>Promise based HTTP client for the browser and node.js</p>
</blockquote>

<p>To install:</p>

<div class="language-console highlighter-rouge"><pre class="highlight"><code><span class="w">$ </span><span class="nc">npm</span><span class="kv"> install axios
</span></code></pre>
</div>

<p>Here is the snippet for the axios request:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">encodedAddress</span> <span class="o">=</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">address</span><span class="p">);</span>

<span class="kd">let</span> <span class="nx">geocodeUrl</span> <span class="o">=</span> <span class="err">`</span><span class="nx">https</span><span class="err">:</span><span class="c1">//maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`;</span>

<span class="nx">axios</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">geocodeUrl</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// throw error on no results</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="s1">'ZERO_RESULTS'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">'Unable to find that address'</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="c1">// return new promise with data (for chaining)</span>
  <span class="k">return</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">({</span>
    <span class="na">latitude</span><span class="p">:</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">lat</span><span class="p">,</span>
    <span class="na">longitude</span><span class="p">:</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">lng</span><span class="p">,</span>
    <span class="na">formatted_address</span><span class="p">:</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">formatted_address</span>
  <span class="p">});</span>

  <span class="c1">// show data</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="na">latitude</span><span class="p">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">response</span><span class="p">.</span><span class="nx">formatted_address</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="na">latitude</span><span class="p">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">response</span><span class="p">.</span><span class="nx">latitude</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="na">latitude</span><span class="p">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">response</span><span class="p">.</span><span class="nx">longitude</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>

  <span class="c1">//error handling </span>
<span class="p">}).</span><span class="k">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
<span class="p">});</span> 
</code></pre>
</div>

<p>The approach here is different. <code class="highlighter-rouge">axios.get()</code> returns a Promise, that we chain with a call to the <code class="highlighter-rouge">then()</code> method.</p>

<p>Once we have the data, in the form of <code class="highlighter-rouge">response.data</code>, we can extrapolate the fields we need.</p>

<p>I could just print the data in the first <code class="highlighter-rouge">then()</code> block, but to be more coherent with my design guidelines (<em>every function does just one thing</em>) I wanted to separate the two operations so the first block will just retrieve the data, then returns another Promise (<code class="highlighter-rouge">return Promise.resolve({..})</code>).</p>

<p>The next <code class="highlighter-rouge">then()</code> block will only display the data retrieved.</p>

<h2 id="which-approach-do-you-prefer">Which approach do you prefer?</h2>

<p>This depends on you! <strong>I prefer promises</strong>, because I find them more natural, but being a Node coder means you can choose and decide what’s best for you. Both are well tested libraries with well known patterns, so you only have to choose the one you love.</p>

<p>Cheers from <code class="highlighter-rouge">40.7802306</code>, <code class="highlighter-rouge">14.7010686</code> !</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>JS Promises: description, pros, cons of this ES6 construct</title>
        <link>https://michelenasti.com/2017/03/12/js-promises-description-pros-cons-of-this-es6-construct.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/03/12/js-promises-description-pros-cons-of-this-es6-construct.html</guid>
        <pubDate>Sun, 12 Mar 2017 14:06:29 +0100</pubDate>
        <author></author>
        
          <description>&lt;p&gt;I hope that you have done some kind of exploration with Javascript, NodeJS and asynchronous constructs right now.&lt;/p&gt;

&lt;p&gt;To recap: when you wait for an async operation to handle the result, for example in NodeJS when we read a file, we do this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'filename.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
   &lt;span class=&quot;c1&quot;&gt;//now you can use the data object &lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is the standard, classic way of handling asynchronicity in NodeJS and Javascript.&lt;/p&gt;

&lt;p&gt;In the last few years a new approach has come to rise, first from outside libraries, then as part of ES6 language: &lt;strong&gt;Promises&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/promise.jpg&quot; alt=&quot;&quot; style=&quot;float: none;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Not me in the photo. This is the Italian way to promise. I love his way of looking guilty. &lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;i-promise-that-i-will-give-you-the-result&quot;&gt;I promise that I will give you the result&lt;/h2&gt;

&lt;p&gt;I don’t want to talk about the history of promises, because like everything in JS Promises have a complex story coming from many libraries doing the same thing, with different syntaxes and patterns.&lt;/p&gt;

&lt;p&gt;However ES6 has standardized this, and now we have a fantastic &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt; object. Let’s see how to use it.&lt;/p&gt;

&lt;p&gt;The following snippet will create a Promise that waits 2,5 seconds and then sends a message &lt;code class=&quot;highlighter-rouge&quot;&gt;Hey. it worked&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;somePromise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//1&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// only one can be called and only once &lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hey. it worked'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                      &lt;span class=&quot;c1&quot;&gt;//2&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//reject('Unable to fulfill promise');          //3&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; 

&lt;span class=&quot;nx&quot;&gt;somePromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;                                   &lt;span class=&quot;c1&quot;&gt;//4&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Success: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Error: '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;My definition of promises: &lt;strong&gt;a &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt; is a wrapper object that you use to encapsulate a function that might return a value in the future&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We declare a promise as showed in (1): &lt;code class=&quot;highlighter-rouge&quot;&gt;new Promise()&lt;/code&gt; with a function inside.&lt;/p&gt;

&lt;p&gt;This function takes two arguments that are two other functions, usually called &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt;. So the full specification is &lt;code class=&quot;highlighter-rouge&quot;&gt;let somePromise = new Promise((resolve, reject) =&amp;gt; {...});&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;How do you use these two parameters? &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt; (2) is a function used to return a value, when the function ends normally (e.g. reading a file, you get the content of the file and return to the caller); &lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt; (3) is used when you encounter a problem (e.g. you couldn’t read the file).&lt;/p&gt;

&lt;p&gt;There are some bonds on using Promises:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;you cannot call both &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt;in your code. As soon as one of the two functions gets called, the promise stops.&lt;/li&gt;
  &lt;li&gt;if you don’t call any of the two functions, the promise will hang.&lt;/li&gt;
  &lt;li&gt;you can only pass &lt;strong&gt;one&lt;/strong&gt; parameter to &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt;. If you have more stuff to pass, wrap everything in an object.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, now we have defined a promise. How do we use it? An example is shown in (4): we just call the promise and then use the &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; method to use the response.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; can take two functions as arguments:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the first callback is called when the promise ends correctly, with the value contained in &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;the second callback is the &lt;em&gt;error handler&lt;/em&gt;, so you might want to use it when you want to get data from the &lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chaining-promises&quot;&gt;Chaining promises&lt;/h2&gt;

&lt;p&gt;This approach is nice, but the true power comes when you can &lt;code class=&quot;highlighter-rouge&quot;&gt;chain&lt;/code&gt; many promises one after another.&lt;/p&gt;

&lt;p&gt;The following code shows a function &lt;code class=&quot;highlighter-rouge&quot;&gt;asyncAdd&lt;/code&gt; that adds two numbers after 1,5 seconds. I bet your calculator is faster. It does however some checks on the type of &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;, to be sure they are numbers.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;asyncAdd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'number'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'number'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Arguments must be numbers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;asyncAdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                         &lt;span class=&quot;c1&quot;&gt;// (1)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;// (2)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;asyncAdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'33'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// (3)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;// (4)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Should be 45:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// (5)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Quiz&lt;/strong&gt;: what does this code print? (Answer below)&lt;/p&gt;

&lt;p&gt;In (1) we are evaluating the first sum. &lt;strong&gt;Then&lt;/strong&gt; (2) (&lt;em&gt;Look how it is semantically fantastic to express this concept in plain english!!!&lt;/em&gt;) we write the result to console, and return another operation (3): we add the result to the number ‘33’ (&lt;strong&gt;note! it is a string!&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Since we are returning a function that returns a promise, we can chain the two promises with another &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We didn’t write the second &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; callback, because we have used the &lt;code class=&quot;highlighter-rouge&quot;&gt;.catch()&lt;/code&gt; method. We will explain this in a second.&lt;/p&gt;

&lt;p&gt;In the second &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; (4) we would print the result of the total sum.&lt;/p&gt;

&lt;p&gt;Lastly, in (5) we have the &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt; block. In the previous paragraph we were saying that you can handle errors inside every &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;, but if you chain many &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; together and the first one fails, the others are still executed. Usually you don’t want this, because the next &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; depends on the result of the previous.&lt;/p&gt;

&lt;p&gt;So, if you just want to stop an operation at the first error encountered, you can use a single &lt;code class=&quot;highlighter-rouge&quot;&gt;catch()&lt;/code&gt; block at the end: whatever promise will fail, be it the first or the last, the &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt; block will be called to handle the failure. So easy to reason about.&lt;/p&gt;

&lt;p&gt;(Sorry, no answer for the quiz… run it and see!)&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;A promise is a new construct that, after some practice, becomes a powerful tool for your async constructs.&lt;/p&gt;

&lt;p&gt;The advantages are that you don’t have to write anymore nested callbacks with a lot of indented code, that is often complex to reason about, and to handle errors.&lt;/p&gt;

&lt;p&gt;The disadvantage is that there is much more than what I wrote in this article, about promises, that covers every possible edge case that naturally occours when you work with async code. However, what you read here should cover 80% of your needs.&lt;/p&gt;

&lt;p&gt;You can transform every callback in a promise; many NodeJS core developers don’t like promises at all, and use only callbacks. Popular libraries in NPM use one way or the other to deliver results, so you might be forced to use one or the other approach based on this.&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/03/12/js-promises-description-pros-cons-of-this-es6-construct.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>JS Promises: description, pros, cons of this ES6 construct</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" JS Promises: description, pros, cons of this ES6 construct ">
                          <figcaption>JS Promises: description, pros, cons of this ES6 construct</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-03-12 14:06:29 CET">Sun, 12 Mar 2017 14:06:29 +0100</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>I hope that you have done some kind of exploration with Javascript, NodeJS and asynchronous constructs right now.</p>

<p>To recap: when you wait for an async operation to handle the result, for example in NodeJS when we read a file, we do this:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kr">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'fs'</span><span class="p">);</span>
<span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s1">'filename.txt'</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
   <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span> 
   <span class="c1">//now you can use the data object </span>
   <span class="p">...</span>
<span class="p">});</span>
</code></pre>
</div>

<p>This is the standard, classic way of handling asynchronicity in NodeJS and Javascript.</p>

<p>In the last few years a new approach has come to rise, first from outside libraries, then as part of ES6 language: <strong>Promises</strong>.</p>

<p><img src="/images/promise.jpg" alt="" style="float: none;" /></p>

<p><em>Not me in the photo. This is the Italian way to promise. I love his way of looking guilty. </em></p>

<h2 id="i-promise-that-i-will-give-you-the-result">I promise that I will give you the result</h2>

<p>I don’t want to talk about the history of promises, because like everything in JS Promises have a complex story coming from many libraries doing the same thing, with different syntaxes and patterns.</p>

<p>However ES6 has standardized this, and now we have a fantastic <code class="highlighter-rouge">Promise</code> object. Let’s see how to use it.</p>

<p>The following snippet will create a Promise that waits 2,5 seconds and then sends a message <code class="highlighter-rouge">Hey. it worked</code>:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">somePromise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">//1</span>
  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// only one can be called and only once </span>
    <span class="nx">resolve</span><span class="p">(</span><span class="s1">'Hey. it worked'</span><span class="p">);</span>                      <span class="c1">//2</span>
    <span class="c1">//reject('Unable to fulfill promise');          //3</span>
  <span class="p">},</span> <span class="mi">2500</span><span class="p">);</span>
<span class="p">});</span> 

<span class="nx">somePromise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span>                                   <span class="c1">//4</span>
  <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Success: '</span> <span class="o">+</span> <span class="nx">message</span><span class="p">);</span>
  <span class="p">},</span> 
  <span class="p">(</span><span class="nx">errorMessage</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Error: '</span><span class="p">,</span> <span class="nx">errorMessage</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">);</span>
</code></pre>
</div>

<p>My definition of promises: <strong>a <code class="highlighter-rouge">Promise</code> is a wrapper object that you use to encapsulate a function that might return a value in the future</strong>.</p>

<p>We declare a promise as showed in (1): <code class="highlighter-rouge">new Promise()</code> with a function inside.</p>

<p>This function takes two arguments that are two other functions, usually called <code class="highlighter-rouge">resolve</code> and <code class="highlighter-rouge">reject</code>. So the full specification is <code class="highlighter-rouge">let somePromise = new Promise((resolve, reject) =&gt; {...});</code>.</p>

<p>How do you use these two parameters? <code class="highlighter-rouge">resolve</code> (2) is a function used to return a value, when the function ends normally (e.g. reading a file, you get the content of the file and return to the caller); <code class="highlighter-rouge">reject</code> (3) is used when you encounter a problem (e.g. you couldn’t read the file).</p>

<p>There are some bonds on using Promises:</p>

<ul>
  <li>you cannot call both <code class="highlighter-rouge">resolve</code> or <code class="highlighter-rouge">reject</code>in your code. As soon as one of the two functions gets called, the promise stops.</li>
  <li>if you don’t call any of the two functions, the promise will hang.</li>
  <li>you can only pass <strong>one</strong> parameter to <code class="highlighter-rouge">resolve</code> or <code class="highlighter-rouge">reject</code>. If you have more stuff to pass, wrap everything in an object.</li>
</ul>

<p>Ok, now we have defined a promise. How do we use it? An example is shown in (4): we just call the promise and then use the <code class="highlighter-rouge">then</code> method to use the response.</p>

<p><code class="highlighter-rouge">then</code> can take two functions as arguments:</p>

<ul>
  <li>the first callback is called when the promise ends correctly, with the value contained in <code class="highlighter-rouge">resolve</code></li>
  <li>the second callback is the <em>error handler</em>, so you might want to use it when you want to get data from the <code class="highlighter-rouge">reject</code> function.</li>
</ul>

<h2 id="chaining-promises">Chaining promises</h2>

<p>This approach is nice, but the true power comes when you can <code class="highlighter-rouge">chain</code> many promises one after another.</p>

<p>The following code shows a function <code class="highlighter-rouge">asyncAdd</code> that adds two numbers after 1,5 seconds. I bet your calculator is faster. It does however some checks on the type of <code class="highlighter-rouge">a</code> and <code class="highlighter-rouge">b</code>, to be sure they are numbers.</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">asyncAdd</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span> <span class="o">===</span> <span class="s1">'number'</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">b</span> <span class="o">===</span> <span class="s1">'number'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">resolve</span><span class="p">(</span><span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">reject</span><span class="p">(</span><span class="s1">'Arguments must be numbers'</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">},</span> <span class="mi">1500</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="nx">asyncAdd</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>                         <span class="c1">// (1)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>                  <span class="c1">// (2)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">asyncAdd</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="s1">'33'</span><span class="p">);</span>     <span class="c1">// (3)</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>                     <span class="c1">// (4)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Should be 45:'</span><span class="p">,</span> <span class="nx">res</span><span class="p">);</span> 
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">errorMessage</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>           <span class="c1">// (5)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">errorMessage</span><span class="p">);</span>
  <span class="p">})</span>
</code></pre>
</div>

<p><strong>Quiz</strong>: what does this code print? (Answer below)</p>

<p>In (1) we are evaluating the first sum. <strong>Then</strong> (2) (<em>Look how it is semantically fantastic to express this concept in plain english!!!</em>) we write the result to console, and return another operation (3): we add the result to the number ‘33’ (<strong>note! it is a string!</strong>).</p>

<p>Since we are returning a function that returns a promise, we can chain the two promises with another <code class="highlighter-rouge">then()</code>.</p>

<p>We didn’t write the second <code class="highlighter-rouge">then</code> callback, because we have used the <code class="highlighter-rouge">.catch()</code> method. We will explain this in a second.</p>

<p>In the second <code class="highlighter-rouge">then()</code> (4) we would print the result of the total sum.</p>

<p>Lastly, in (5) we have the <code class="highlighter-rouge">catch</code> block. In the previous paragraph we were saying that you can handle errors inside every <code class="highlighter-rouge">then</code>, but if you chain many <code class="highlighter-rouge">then</code> together and the first one fails, the others are still executed. Usually you don’t want this, because the next <code class="highlighter-rouge">then</code> depends on the result of the previous.</p>

<p>So, if you just want to stop an operation at the first error encountered, you can use a single <code class="highlighter-rouge">catch()</code> block at the end: whatever promise will fail, be it the first or the last, the <code class="highlighter-rouge">catch</code> block will be called to handle the failure. So easy to reason about.</p>

<p>(Sorry, no answer for the quiz… run it and see!)</p>

<h2 id="conclusions">Conclusions</h2>

<p>A promise is a new construct that, after some practice, becomes a powerful tool for your async constructs.</p>

<p>The advantages are that you don’t have to write anymore nested callbacks with a lot of indented code, that is often complex to reason about, and to handle errors.</p>

<p>The disadvantage is that there is much more than what I wrote in this article, about promises, that covers every possible edge case that naturally occours when you work with async code. However, what you read here should cover 80% of your needs.</p>

<p>You can transform every callback in a promise; many NodeJS core developers don’t like promises at all, and use only callbacks. Popular libraries in NPM use one way or the other to deliver results, so you might be forced to use one or the other approach based on this.</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title> Quando l'azienda non paga gli stipendi</title>
        <link>https://michelenasti.com/2017/02/28/quando-l-azienda-non-paga-gli-stipendi.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/02/28/quando-l-azienda-non-paga-gli-stipendi.html</guid>
        <pubDate>Tue, 28 Feb 2017 11:36:03 +0100</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Qualche anno fa &lt;strong&gt;l’azienda per cui lavoravo ha attraversato un periodo di crisi e lo stipendio arrivava a singhiozzo&lt;/strong&gt; (o peggio, non arrivava proprio). Lo ricordo come uno dei periodi più brutti della mia vita.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Per rispetto agli ex colleghi ancora coinvolti in questa vicenda, non voglio citare il nome dell’azienda che attualmente è in liquidazione; sappiate che ci sono persone che non hanno avuto la fortuna di trovare un altro lavoro, e altri che aspettano ancora i soldi dovuti.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;i-fatti&quot;&gt;I fatti&lt;/h2&gt;

&lt;p&gt;Sono stato assunto da un’azienda di consulenza e, come tutti i consulenti, sono stato mandato a lavorare presso un’altra azienda “madre”. &lt;strong&gt;Per i primi 3-4 mesi il lavoro è stato fantastico&lt;/strong&gt;, ricordo soprattutto la spensieratezza di conoscere i nuovi colleghi e i progetti su cui dovevo lavorare.&lt;/p&gt;

&lt;p&gt;Dopo i primi mesi, tuttavia, arrivarono &lt;strong&gt;le prime comunicazioni che lo stipendio sarebbe stato pagato in ritardo&lt;/strong&gt; - prima 5 giorni, poi 10 giorni, poi 20 giorni… si fece dicembre e arrivò la comunicazione definitiva, &lt;strong&gt;“non sappiamo quando avremo modo di pagare la tredicesima e la mensilità”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I miei giorni lavorativi scorrevano apparentemente normali&lt;/strong&gt;, andavo a lavoro tutti i giorni e cercavo di dare il massimo come faccio sempre; &lt;strong&gt;era anche difficile parlare di queste cose con i colleghi e con i capi&lt;/strong&gt;, perché tutti gli altri erano dipendenti dell’azienda madre quindi avevo pochi colleghi diretti. L’unica persona con cui potevo sfogarmi era mia moglie (quindi immaginatevi il clima a casa).&lt;/p&gt;

&lt;h2 id=&quot;i-tentativi-di-cambiare-la-mia-situazione&quot;&gt;I tentativi di cambiare la mia situazione&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;La prima cosa che ho provato a fare è di trovare un altro lavoro, e in effetti l’ho anche trovato.&lt;/strong&gt; Ho firmato una lettera di assunzione con un’altra azienda, e ho comunicato le dimissioni nei termini (45 giorni! caspita quanto ci vuole a licenziarsi quando manca l’ossigeno), &lt;strong&gt;ma cinque giorni prima delle dimissioni effettive mi chiama per ritrattare&lt;/strong&gt;: &lt;em&gt;“Michele, aspettavamo soldi dalla regione che non sono arrivati. Se puoi, se puoi resta dove sei.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Mi è caduto il mondo addosso. &lt;strong&gt;Dopo aver trovato una via d’uscita, scopro che era un vicolo cieco&lt;/strong&gt; e devo tornare indietro e rifare tutto da capo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Con la testa bassa vado dal responsabile del progetto&lt;/strong&gt; a cui lavoravo &lt;strong&gt;e gli chiedo se è disposto a riprendermi&lt;/strong&gt;, ovviamente valutandomi per il mio lavoro e senza alcuna presunzione di essere “perdonato”. Voi cosa avreste fatto? &lt;strong&gt;Beh lui si è sbracciato per tenermi a lavoro&lt;/strong&gt;, e a tre giorni dalle dimissioni ufficiali (con quintali di carte già spedite a INPS, consulenti del lavoro, etc) abbiamo ritirato tutto.&lt;/p&gt;

&lt;p&gt;Contemporaneamente, la mia azienda di consulenza (quella che mi pagava lo stipendio) giurava e spergiurava di aver risolto i problemi finanziari, e quindi c’era da stare tranquilli. Ovviamente non era affatto così.&lt;/p&gt;

&lt;p&gt;Dopo altri 3-4 mesi di pagamenti a singhiozzo, ritorno dal mio responsabile sul progetto - quello che mi aveva “ripreso” a seguito del casino delle dimissioni ritirate - e gli spiego per la prima volta come stanno le cose davvero. &lt;strong&gt;Gli dico che non ce la faccio più, che mi sembra di essere un cretino e che non so come gestire la situazione&lt;/strong&gt;. A questo punto l’azienda “madre” mi aiuta a trovare un’altra società satellite dando di nuovo le dimissioni a 45 giorni con la determinazione che stavolta, anche a costo di rimanere senza lavoro, non avrei voluto avere più niente a che fare con un’azienda che non paga.&lt;/p&gt;

&lt;p&gt;Me ne sono andato con un credito di 4500 €, e ad oggi restano solo 450€ ancora da avere (che forse non rivedrò mai più). Altri miei ex colleghi aspettano cifre più alte, dell’ordine di 10.000€ (TFR e arretrati). &lt;/p&gt;

&lt;h2 id=&quot;come-ci-si-sente&quot;&gt;Come ci si sente&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;La sensazione che ho avuto nei periodi più bui era che la colpa fosse mia&lt;/strong&gt;. Ricordo in particolare il periodo di Natale, quando non potevo comprare nemmeno un regalino a mia moglie perché avevo 4,5€ sul conto! L’inconscio mi faceva apparire che non era l’azienda ad essere nel torto, &lt;strong&gt;ero io a non aver fatto la cosa giusta (quale, poi?!) al momento giusto.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;E’ stata dura prendere qualsiasi decisione perché avevo sempre la sensazione di perderci qualcosa, ma non saprei dirvi cosa.&lt;/strong&gt; E non vi parlo nemmeno della sensazione di irriconoscenza che ho avuto verso l’azienda “madre” del progetto, che mi hanno aiutato quando hanno potuto, e che ho provato a mollare un paio di volte. Insomma, una situazione psicologica debole.&lt;/p&gt;

&lt;h2 id=&quot;cosa-si-può-fare-per-evitare-tutto-questo&quot;&gt;Cosa si può fare per evitare tutto questo&lt;/h2&gt;

&lt;p&gt;A mente fredda è facile parlare, ma ci sono alcuni suggerimenti che posso darvi.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Al primo accenno di stipendio pagato in ritardo o non pagato affatto, &lt;strong&gt;cercate un’alternativa&lt;/strong&gt;. L’ideale è rassegnare le dimissioni “normali” così non perdete mensilità, TFR, e quanto altro. Non credete a chi vi dice che tutto si aggiusterà, a meno che non abbiate accesso a conti e contratti e possiate dire con tranquillità che le cose stiano davvero a posto.&lt;/li&gt;
  &lt;li&gt;Se avete un buon gruzzolo messo da parte e potete permettervi uno-due mesi senza stipendio (che, pur restando in azienda, accadrà), e se siete a almeno 3 mensilità arretrate, &lt;strong&gt;vi conviene licenziarvi IMMEDIATAMENTE per giusta causa e fare domanda di disoccupazione all’INPS.&lt;/strong&gt; In rete si trovano &lt;a href=&quot;http://www.guidafisco.it/mancato-pagamento-stipendio-dimissioni-870&quot;&gt;molti articoli a riguardo&lt;/a&gt;. E’ importante sapere che se vi licenziate “normalmente” non avete diritto a niente, ma il mancato stipendio è considerabile come &lt;em&gt;giusta causa&lt;/em&gt;, purché dopo iniziate una causa civile contro il datore di lavoro per riavere i soldi indietro (altra condizione affinché l’INPS eroghi la disoccupazione).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Restare in azienda e sperare di essere licenziati è una pessima idea.&lt;/strong&gt; Psicologicamente subirete tutto voi ed è estenuante. Anzi, non è nemmeno una tattica: è come stare su una barca in pieno oceano col mare in tempesta - o con la calma piatta: state bene finché avete viveri. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Io spero che non vi accada mai nulla di tutto ciò, ma se vi è accaduto e volete provare a spiegare come vi siete sentiti e cosa avete fatto per uscirne, questo blog è a vostra disposizione. &lt;strong&gt;Non fate nomi di aziende perché io modero tutto e i commenti offensivi o diffamatori saranno immediatamente cancellati.&lt;/strong&gt; Grazie per la comprensione.&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/02/28/quando-l-azienda-non-paga-gli-stipendi.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1> Quando l'azienda non paga gli stipendi</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt="  Quando l'azienda non paga gli stipendi ">
                          <figcaption> Quando l'azienda non paga gli stipendi</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-02-28 11:36:03 CET">Tue, 28 Feb 2017 11:36:03 +0100</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Qualche anno fa <strong>l’azienda per cui lavoravo ha attraversato un periodo di crisi e lo stipendio arrivava a singhiozzo</strong> (o peggio, non arrivava proprio). Lo ricordo come uno dei periodi più brutti della mia vita.</p>

<blockquote>
  <p>Per rispetto agli ex colleghi ancora coinvolti in questa vicenda, non voglio citare il nome dell’azienda che attualmente è in liquidazione; sappiate che ci sono persone che non hanno avuto la fortuna di trovare un altro lavoro, e altri che aspettano ancora i soldi dovuti.</p>
</blockquote>

<h2 id="i-fatti">I fatti</h2>

<p>Sono stato assunto da un’azienda di consulenza e, come tutti i consulenti, sono stato mandato a lavorare presso un’altra azienda “madre”. <strong>Per i primi 3-4 mesi il lavoro è stato fantastico</strong>, ricordo soprattutto la spensieratezza di conoscere i nuovi colleghi e i progetti su cui dovevo lavorare.</p>

<p>Dopo i primi mesi, tuttavia, arrivarono <strong>le prime comunicazioni che lo stipendio sarebbe stato pagato in ritardo</strong> - prima 5 giorni, poi 10 giorni, poi 20 giorni… si fece dicembre e arrivò la comunicazione definitiva, <strong>“non sappiamo quando avremo modo di pagare la tredicesima e la mensilità”</strong>.</p>

<p><strong>I miei giorni lavorativi scorrevano apparentemente normali</strong>, andavo a lavoro tutti i giorni e cercavo di dare il massimo come faccio sempre; <strong>era anche difficile parlare di queste cose con i colleghi e con i capi</strong>, perché tutti gli altri erano dipendenti dell’azienda madre quindi avevo pochi colleghi diretti. L’unica persona con cui potevo sfogarmi era mia moglie (quindi immaginatevi il clima a casa).</p>

<h2 id="i-tentativi-di-cambiare-la-mia-situazione">I tentativi di cambiare la mia situazione</h2>

<p><strong>La prima cosa che ho provato a fare è di trovare un altro lavoro, e in effetti l’ho anche trovato.</strong> Ho firmato una lettera di assunzione con un’altra azienda, e ho comunicato le dimissioni nei termini (45 giorni! caspita quanto ci vuole a licenziarsi quando manca l’ossigeno), <strong>ma cinque giorni prima delle dimissioni effettive mi chiama per ritrattare</strong>: <em>“Michele, aspettavamo soldi dalla regione che non sono arrivati. Se puoi, se puoi resta dove sei.”</em></p>

<p>Mi è caduto il mondo addosso. <strong>Dopo aver trovato una via d’uscita, scopro che era un vicolo cieco</strong> e devo tornare indietro e rifare tutto da capo.</p>

<p><strong>Con la testa bassa vado dal responsabile del progetto</strong> a cui lavoravo <strong>e gli chiedo se è disposto a riprendermi</strong>, ovviamente valutandomi per il mio lavoro e senza alcuna presunzione di essere “perdonato”. Voi cosa avreste fatto? <strong>Beh lui si è sbracciato per tenermi a lavoro</strong>, e a tre giorni dalle dimissioni ufficiali (con quintali di carte già spedite a INPS, consulenti del lavoro, etc) abbiamo ritirato tutto.</p>

<p>Contemporaneamente, la mia azienda di consulenza (quella che mi pagava lo stipendio) giurava e spergiurava di aver risolto i problemi finanziari, e quindi c’era da stare tranquilli. Ovviamente non era affatto così.</p>

<p>Dopo altri 3-4 mesi di pagamenti a singhiozzo, ritorno dal mio responsabile sul progetto - quello che mi aveva “ripreso” a seguito del casino delle dimissioni ritirate - e gli spiego per la prima volta come stanno le cose davvero. <strong>Gli dico che non ce la faccio più, che mi sembra di essere un cretino e che non so come gestire la situazione</strong>. A questo punto l’azienda “madre” mi aiuta a trovare un’altra società satellite dando di nuovo le dimissioni a 45 giorni con la determinazione che stavolta, anche a costo di rimanere senza lavoro, non avrei voluto avere più niente a che fare con un’azienda che non paga.</p>

<p>Me ne sono andato con un credito di 4500 €, e ad oggi restano solo 450€ ancora da avere (che forse non rivedrò mai più). Altri miei ex colleghi aspettano cifre più alte, dell’ordine di 10.000€ (TFR e arretrati). </p>

<h2 id="come-ci-si-sente">Come ci si sente</h2>

<p><strong>La sensazione che ho avuto nei periodi più bui era che la colpa fosse mia</strong>. Ricordo in particolare il periodo di Natale, quando non potevo comprare nemmeno un regalino a mia moglie perché avevo 4,5€ sul conto! L’inconscio mi faceva apparire che non era l’azienda ad essere nel torto, <strong>ero io a non aver fatto la cosa giusta (quale, poi?!) al momento giusto.</strong></p>

<p><strong>E’ stata dura prendere qualsiasi decisione perché avevo sempre la sensazione di perderci qualcosa, ma non saprei dirvi cosa.</strong> E non vi parlo nemmeno della sensazione di irriconoscenza che ho avuto verso l’azienda “madre” del progetto, che mi hanno aiutato quando hanno potuto, e che ho provato a mollare un paio di volte. Insomma, una situazione psicologica debole.</p>

<h2 id="cosa-si-può-fare-per-evitare-tutto-questo">Cosa si può fare per evitare tutto questo</h2>

<p>A mente fredda è facile parlare, ma ci sono alcuni suggerimenti che posso darvi.</p>

<ol>
  <li>Al primo accenno di stipendio pagato in ritardo o non pagato affatto, <strong>cercate un’alternativa</strong>. L’ideale è rassegnare le dimissioni “normali” così non perdete mensilità, TFR, e quanto altro. Non credete a chi vi dice che tutto si aggiusterà, a meno che non abbiate accesso a conti e contratti e possiate dire con tranquillità che le cose stiano davvero a posto.</li>
  <li>Se avete un buon gruzzolo messo da parte e potete permettervi uno-due mesi senza stipendio (che, pur restando in azienda, accadrà), e se siete a almeno 3 mensilità arretrate, <strong>vi conviene licenziarvi IMMEDIATAMENTE per giusta causa e fare domanda di disoccupazione all’INPS.</strong> In rete si trovano <a href="http://www.guidafisco.it/mancato-pagamento-stipendio-dimissioni-870">molti articoli a riguardo</a>. E’ importante sapere che se vi licenziate “normalmente” non avete diritto a niente, ma il mancato stipendio è considerabile come <em>giusta causa</em>, purché dopo iniziate una causa civile contro il datore di lavoro per riavere i soldi indietro (altra condizione affinché l’INPS eroghi la disoccupazione).</li>
  <li><strong>Restare in azienda e sperare di essere licenziati è una pessima idea.</strong> Psicologicamente subirete tutto voi ed è estenuante. Anzi, non è nemmeno una tattica: è come stare su una barca in pieno oceano col mare in tempesta - o con la calma piatta: state bene finché avete viveri. </li>
</ol>

<p>Io spero che non vi accada mai nulla di tutto ciò, ma se vi è accaduto e volete provare a spiegare come vi siete sentiti e cosa avete fatto per uscirne, questo blog è a vostra disposizione. <strong>Non fate nomi di aziende perché io modero tutto e i commenti offensivi o diffamatori saranno immediatamente cancellati.</strong> Grazie per la comprensione.</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>The Javascript Event Loop for dummies</title>
        <link>https://michelenasti.com/the-javascript-event-loop-for-dummies/</link>
        <guid isPermaLink="true">https://michelenasti.com/the-javascript-event-loop-for-dummies/</guid>
        <pubDate>Sat, 25 Feb 2017 11:29:00 +0100</pubDate>
        <author></author>
        
          <description>&lt;p&gt;What does it mean that Javascript has no threads?! What is the event loop and how it is related? How can JS be even considered a modern programming language?! Let’s find out the surprising truth about this stuff.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/o_weighted_hula_hoop-1.jpg&quot; alt=&quot;An event loop. The dancer is not included.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;quiz-whats-going-on&quot;&gt;Quiz: what’s going on?&lt;/h2&gt;

&lt;p&gt;Let’s consider this small javascript program. What will be printed?&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Starting app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//first block &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'First setTimeout'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//second block &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Second setTimeout'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Finishing app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In case you don’t know: &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; is a javascript global function used to fire an action (the first argument) when the delay (second argument) is elapsed.&lt;/p&gt;

&lt;p&gt;So the first &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout()&lt;/code&gt; block will wait two seconds and then will write &lt;code class=&quot;highlighter-rouge&quot;&gt;First setTimeout&lt;/code&gt; on console.&lt;/p&gt;

&lt;p&gt;The second block will wait 0 milliseconds (… it doesn’t wait at all!) and then write &lt;code class=&quot;highlighter-rouge&quot;&gt;Second setTimeout&lt;/code&gt; to the console).&lt;/p&gt;

&lt;p&gt;Back to the quiz… what is the expected outcome?&lt;/p&gt;

&lt;table&gt;

&lt;thead&gt;

&lt;tr&gt;

&lt;th&gt;#1&lt;/th&gt;

&lt;th&gt;#2&lt;/th&gt;

&lt;th&gt;#3&lt;/th&gt;

&lt;th&gt;#4&lt;/th&gt;

&lt;/tr&gt;

&lt;/thead&gt;

&lt;tbody&gt;

&lt;tr&gt;

&lt;td&gt;Starting App  
First setTimeout  
Second setTimeout  
Finishing app&lt;/td&gt;

&lt;td&gt;Starting App  
Second setTimeout  
Finishing app  
First setTimeout&lt;/td&gt;

&lt;td&gt;Starting App  
Finishing app  
Second setTimeout  
First setTimeout&lt;/td&gt;

&lt;td&gt;Starting App  
Second setTimeout  
First setTimeout  
Finishing app&lt;/td&gt;

&lt;/tr&gt;

&lt;/tbody&gt;

&lt;/table&gt;

&lt;p&gt;What’s your choice? Don’t scroll down and think a little bit…&lt;/p&gt;

&lt;p&gt;Hey, you could just paste this code in your browser’s console to discover that … the right answer is &lt;strong&gt;#3&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This behaviour may seem surprising but is perfectly legit.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;h2 id=&quot;what-is-really-happening-under-the-hood&quot;&gt;what is really happening under the hood&lt;/h2&gt;

&lt;p&gt;Let’s start with a Dogma: &lt;strong&gt;in Javascript there is just one thread&lt;/strong&gt;. (&lt;em&gt;This is not correct anymore, because in the last years a new technology called &lt;code class=&quot;highlighter-rouge&quot;&gt;Service Workers&lt;/code&gt; has become available; but it is not important for now.&lt;/em&gt;) Everything is always executed in the same thread, even events that happen asynchronously.&lt;/p&gt;

&lt;p&gt;So what happens when an asynchronous event happen, like the &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; is a good example of an asynchronous event. Expanding the reasoning, this can be a reading of a file, or receiving a packet over the network. The philosophy doesn’t change.&lt;/p&gt;

&lt;p&gt;Bearing this in mind, let’s return to the basis.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The first &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log()&lt;/code&gt; is printed: &lt;code class=&quot;highlighter-rouge&quot;&gt;Starting app&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The first block is evaluated:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//first block &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'First setTimeout'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This code says: &lt;em&gt;after 2000 milliseconds, trigger the function specified as first argument&lt;/em&gt;. Since &lt;code class=&quot;highlighter-rouge&quot;&gt;() =&amp;gt; { ... }&lt;/code&gt; is a function, this is put in a &lt;strong&gt;callback queue&lt;/strong&gt; ready to get fired when the conditions occur.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The second block is evaluated:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//second block &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Second setTimeout'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Another explanation. This code says: &lt;em&gt;after zero milliseconds, fire the function specified as first argument&lt;/em&gt;. One would expect to be fired instantly, but this does not happen: The function is put in a &lt;strong&gt;callback queue&lt;/strong&gt;, and when NodeJS believes the conditions are respected, the function is fired.&lt;/p&gt;

&lt;p&gt;Node cannot fire the function NOW because there’s other javascript code being executed in the stack: it’s the &lt;em&gt;main program&lt;/em&gt;, the one that starts with the first &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log()&lt;/code&gt;. Think of this as a being wrapped inside a function; nodeJS is evaluating &lt;strong&gt;this&lt;/strong&gt; function and cannot evaluate others.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The last &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log()&lt;/code&gt; is evaluated and &lt;code class=&quot;highlighter-rouge&quot;&gt;Finishing app&lt;/code&gt; is written to console.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;NodeJS controls the call queue and decides what to fire. There are two functions in the call queue. It’s NodeJS’s responsibility to select the right one: since the second &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; had a higher priority, it will be fired first: you’ll then see &lt;code class=&quot;highlighter-rouge&quot;&gt;Second setTimeout&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Node will pop the previous function from the stack and will check again the callback queue. This time it will select the first block &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; callback, and will print &lt;code class=&quot;highlighter-rouge&quot;&gt;First setTimeout&lt;/code&gt;. Then, Node will pop this last function from the stack, and when it realizes that nothing more can be executed, the program will end.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-happens-when-you-read-data-from-a-file-or-receive-a-response-from-the-network&quot;&gt;What happens when you read data from a file or receive a response from the network?&lt;/h3&gt;

&lt;p&gt;The behavior is the same! Node will put your callback function in the callback queue, and it will be called as soon as possible.&lt;/p&gt;

&lt;h3 id=&quot;the-advantages-of-this&quot;&gt;The advantages of this&lt;/h3&gt;

&lt;p&gt;The main advantage is that &lt;strong&gt;the CPU will not stop when waiting for an I/O event&lt;/strong&gt;: it will just put the callback in the queue, and Node will execute the next available function. This means that one single CPU can handle more traffic and a greater number of concurrent connections; it is not limited by the number of threads a server can handle (because there is just one thread).&lt;/p&gt;

&lt;h3 id=&quot;the-disadvantage&quot;&gt;The disadvantage&lt;/h3&gt;

&lt;p&gt;The first disadvantage is that &lt;strong&gt;programming with async in mind and with callbacks is profoundly different&lt;/strong&gt; from the past: it is more difficult to reason about and to debug, at start. However, once you truly understand the philosophy and the way it works, you’ll never want to come back again.&lt;/p&gt;

&lt;h2 id=&quot;so-what-you-suggest&quot;&gt;So? What you suggest?&lt;/h2&gt;

&lt;p&gt;Node.js is a great idea made simple: a complex use case solved smartly. &lt;strong&gt;Learning Node will help you become a better programmer&lt;/strong&gt;, and this applies even if you work with other languages.&lt;/p&gt;

&lt;p&gt;I can only suggest you to google *NodeJS vs XXX performance”, change XXX with whatever you want… You’ll find that &lt;a href=&quot;https://dzone.com/articles/performance-comparison-between&quot;&gt;an interpreted language, with no tweaks, is faster than well-established platforms&lt;/a&gt; (Caution: old article! but the main points still hold) with years of optimization.&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/the-javascript-event-loop-for-dummies/">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>The Javascript Event Loop for dummies</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" The Javascript Event Loop for dummies ">
                          <figcaption>The Javascript Event Loop for dummies</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-02-25 11:29:00 CET">Sat, 25 Feb 2017 11:29:00 +0100</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>What does it mean that Javascript has no threads?! What is the event loop and how it is related? How can JS be even considered a modern programming language?! Let’s find out the surprising truth about this stuff.</p>

<p><img src="/images/o_weighted_hula_hoop-1.jpg" alt="An event loop. The dancer is not included." /></p>

<h2 id="quiz-whats-going-on">Quiz: what’s going on?</h2>

<p>Let’s consider this small javascript program. What will be printed?</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Starting app'</span><span class="p">);</span>

<span class="c1">//first block </span>
<span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'First setTimeout'</span><span class="p">);</span>
<span class="p">},</span> <span class="mi">2000</span><span class="p">);</span>

<span class="c1">//second block </span>
<span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Second setTimeout'</span><span class="p">);</span>
<span class="p">},</span> <span class="mi">0</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Finishing app'</span><span class="p">);</span>
</code></pre>
</div>

<p>In case you don’t know: <code class="highlighter-rouge">setTimeout</code> is a javascript global function used to fire an action (the first argument) when the delay (second argument) is elapsed.</p>

<p>So the first <code class="highlighter-rouge">setTimeout()</code> block will wait two seconds and then will write <code class="highlighter-rouge">First setTimeout</code> on console.</p>

<p>The second block will wait 0 milliseconds (… it doesn’t wait at all!) and then write <code class="highlighter-rouge">Second setTimeout</code> to the console).</p>

<p>Back to the quiz… what is the expected outcome?</p>

<table>

<thead>

<tr>

<th>#1</th>

<th>#2</th>

<th>#3</th>

<th>#4</th>

</tr>

</thead>

<tbody>

<tr>

<td>Starting App  
First setTimeout  
Second setTimeout  
Finishing app</td>

<td>Starting App  
Second setTimeout  
Finishing app  
First setTimeout</td>

<td>Starting App  
Finishing app  
Second setTimeout  
First setTimeout</td>

<td>Starting App  
Second setTimeout  
First setTimeout  
Finishing app</td>

</tr>

</tbody>

</table>

<p>What’s your choice? Don’t scroll down and think a little bit…</p>

<p>Hey, you could just paste this code in your browser’s console to discover that … the right answer is <strong>#3</strong>.</p>

<p>This behaviour may seem surprising but is perfectly legit.</p>

<p>Why?</p>

<h2 id="what-is-really-happening-under-the-hood">what is really happening under the hood</h2>

<p>Let’s start with a Dogma: <strong>in Javascript there is just one thread</strong>. (<em>This is not correct anymore, because in the last years a new technology called <code class="highlighter-rouge">Service Workers</code> has become available; but it is not important for now.</em>) Everything is always executed in the same thread, even events that happen asynchronously.</p>

<p>So what happens when an asynchronous event happen, like the <code class="highlighter-rouge">setTimeout</code>?</p>

<p><code class="highlighter-rouge">setTimeout</code> is a good example of an asynchronous event. Expanding the reasoning, this can be a reading of a file, or receiving a packet over the network. The philosophy doesn’t change.</p>

<p>Bearing this in mind, let’s return to the basis.</p>

<ul>
  <li>
    <p>The first <code class="highlighter-rouge">console.log()</code> is printed: <code class="highlighter-rouge">Starting app</code></p>
  </li>
  <li>
    <p>The first block is evaluated:</p>
  </li>
</ul>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="c1">//first block </span>
<span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'First setTimeout'</span><span class="p">);</span>
<span class="p">},</span> <span class="mi">2000</span><span class="p">);</span>
</code></pre>
</div>

<p>This code says: <em>after 2000 milliseconds, trigger the function specified as first argument</em>. Since <code class="highlighter-rouge">() =&gt; { ... }</code> is a function, this is put in a <strong>callback queue</strong> ready to get fired when the conditions occur.</p>

<ul>
  <li>The second block is evaluated:</li>
</ul>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="c1">//second block </span>
<span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Second setTimeout'</span><span class="p">);</span>
<span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
</code></pre>
</div>

<p>Another explanation. This code says: <em>after zero milliseconds, fire the function specified as first argument</em>. One would expect to be fired instantly, but this does not happen: The function is put in a <strong>callback queue</strong>, and when NodeJS believes the conditions are respected, the function is fired.</p>

<p>Node cannot fire the function NOW because there’s other javascript code being executed in the stack: it’s the <em>main program</em>, the one that starts with the first <code class="highlighter-rouge">console.log()</code>. Think of this as a being wrapped inside a function; nodeJS is evaluating <strong>this</strong> function and cannot evaluate others.</p>

<ul>
  <li>
    <p>The last <code class="highlighter-rouge">console.log()</code> is evaluated and <code class="highlighter-rouge">Finishing app</code> is written to console.</p>
  </li>
  <li>
    <p>NodeJS controls the call queue and decides what to fire. There are two functions in the call queue. It’s NodeJS’s responsibility to select the right one: since the second <code class="highlighter-rouge">setTimeout</code> had a higher priority, it will be fired first: you’ll then see <code class="highlighter-rouge">Second setTimeout</code>.</p>
  </li>
  <li>
    <p>Node will pop the previous function from the stack and will check again the callback queue. This time it will select the first block <code class="highlighter-rouge">setTimeout</code> callback, and will print <code class="highlighter-rouge">First setTimeout</code>. Then, Node will pop this last function from the stack, and when it realizes that nothing more can be executed, the program will end.</p>
  </li>
</ul>

<h3 id="what-happens-when-you-read-data-from-a-file-or-receive-a-response-from-the-network">What happens when you read data from a file or receive a response from the network?</h3>

<p>The behavior is the same! Node will put your callback function in the callback queue, and it will be called as soon as possible.</p>

<h3 id="the-advantages-of-this">The advantages of this</h3>

<p>The main advantage is that <strong>the CPU will not stop when waiting for an I/O event</strong>: it will just put the callback in the queue, and Node will execute the next available function. This means that one single CPU can handle more traffic and a greater number of concurrent connections; it is not limited by the number of threads a server can handle (because there is just one thread).</p>

<h3 id="the-disadvantage">The disadvantage</h3>

<p>The first disadvantage is that <strong>programming with async in mind and with callbacks is profoundly different</strong> from the past: it is more difficult to reason about and to debug, at start. However, once you truly understand the philosophy and the way it works, you’ll never want to come back again.</p>

<h2 id="so-what-you-suggest">So? What you suggest?</h2>

<p>Node.js is a great idea made simple: a complex use case solved smartly. <strong>Learning Node will help you become a better programmer</strong>, and this applies even if you work with other languages.</p>

<p>I can only suggest you to google *NodeJS vs XXX performance”, change XXX with whatever you want… You’ll find that <a href="https://dzone.com/articles/performance-comparison-between">an interpreted language, with no tweaks, is faster than well-established platforms</a> (Caution: old article! but the main points still hold) with years of optimization.</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>I libri motivazionali funzionano?</title>
        <link>https://michelenasti.com/libri-motivazionali/</link>
        <guid isPermaLink="true">https://michelenasti.com/libri-motivazionali/</guid>
        <pubDate>Wed, 15 Feb 2017 01:00:00 +0100</pubDate>
        <author></author>
        
          <description>&lt;p&gt;In una discussione con alcuni miei amici abbiamo iniziato a parlare di libri che stavamo leggendo in questo periodo, e ne è nato un discorso sui libri &lt;em&gt;motivazionali&lt;/em&gt; (quei libri che ti insegnano a essere una persona migliore).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enrico&lt;/strong&gt; sta leggendo &lt;a href=&quot;http://amzn.to/2mKm1Ti&quot;&gt;&lt;strong&gt;Miracle Morning&lt;/strong&gt;, &lt;em&gt;trasforma la tua vita un mattino alla volta prima delle 8:00&lt;/em&gt;&lt;/a&gt;. E’ uno dei libri che ho nella lista quindi sono estremamente curioso.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/miracle-morning.jpg&quot; alt=&quot;miracle morning&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tuttavia, io ho una “politica” per cui non compro un nuovo libro se prima non ho finito il precedente, e sto ancora leggendo &lt;a href=&quot;http://amzn.to/2mK757I&quot;&gt;&lt;strong&gt;Chi ha e chi non ha&lt;/strong&gt;, &lt;em&gt;Storie di disuguaglianze&lt;/em&gt;&lt;/a&gt; libro a tratti pesantuccio e a tratti molto leggero che parla di disuguaglianza economica (non sociale).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/chi-ha-chi-non-ha.jpg&quot; alt=&quot;Chi ha e chi non ha&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tra i capitoli si parla, ad esempio, di:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;come si fa a misurare se una nazione è composta da ricchi o poveri;&lt;/li&gt;
  &lt;li&gt;chi è stato l’uomo più ricco della storia;&lt;/li&gt;
  &lt;li&gt;come interpretare le migrazioni di massa dei nostri giorni;&lt;/li&gt;
  &lt;li&gt;perchè solo 8 club di calcio dopo il 2001 sono diventati ricchissimi e gli altri annaspano;&lt;/li&gt;
  &lt;li&gt;Stati Uniti e Argentina sono partiti dalla stessa condizione economica, nel 1800. come mai ora sono così diverse? cosa è successo?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Da qui in poi il mio articolo assume un tono più colloquiale, anche per rappresentare meglio le cose che ci siamo detti.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michele (non io)&lt;/strong&gt; - ho una domanda per voi. Leggendo tanto e provando a correggere alcune abitudini, non vi capita di non riuscirci? Ovvero di riuscirci solo all’inizio quando ci s’impone di cambiare qualcosa, ma poi appena cambia una virgola nella routine le cose lette vengono abbandonate. La domanda è quante volte le metodologie lette poi le avete davvero applicate nella vita quotidiana.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Io&lt;/strong&gt; - A me questo capita con lo sport… specialmente quello che faccio da solo. Avevo preso la bellissima abitudine di andare a correre alle 19 tutte le sere … un’oretta di corsa. Poi una volta è venuto a piovere, un’altro giorno c’era un servizio da fare, poi un’altra cosa… e alla fine mi sono demotivato.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enrico&lt;/strong&gt; - In effetti a ripensarci forse non ci sono mai riuscito semplicemente leggendo, anzi non ricordo proprio di aver mai ottenuto risultato. Di sicuro mi è capitato di cambiare abitudini nella mia vita ma ci sono riuscito quasi inconsciamente, perché ero fortemente motivato a raggiungere un obiettivo. L’ho fatto senza pianificare niente, semplicemente sono cambiato in base ad un desiderio e ad un’esigenza, quindi in maniera naturale. La cosa complicata, dove i libri possono aiutarti, è pianificare e forzare il cambiamento, ossia possono ispirarti in qualche modo e rafforzare qualcosa che stavi già pensando.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Io&lt;/strong&gt; - Un libro che è riuscito a cambiare qualcosa è stato &lt;a href=&quot;http://amzn.to/2mJYCkP&quot;&gt;&lt;strong&gt;è facile smettere di fumare se sai come farlo&lt;/strong&gt;&lt;/a&gt;: avevo provato a smettere di fumare altre volte prima, ad esempio diminuendo le sigarette o smettendo di punto in bianco, e poi sono sempre tornato a fumare. Con il libro invece ho fumato fino all’ultima pagina, l’ho finito e mi sono chiesto: “mah?!” dopodiché non ho mai più fumato.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/smettere-fumare.jpg&quot; alt=&quot;E' facile smettere di fumare se sai come farlo&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ho fumato per un periodo circa 10 anni fa. Troppo tardi per arrabbiarsi ora, mamma :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Michele&lt;/strong&gt; - Waaa sta cosa di quel libro mi ha sempre intrigato, perchè non sei il primo che me lo dice. E’ incredibile.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Io&lt;/strong&gt; - In quel caso penso che mi abbia dato delle motivazioni psicologiche profonde che mi hanno fatto decidere di non prendere mai più una sigaretta. Quasi a dire “sono un cretino se fumo ancora”. Ma ammetto che ero fortemente determinato a smettere già di mio.
Altri amici a cui ho passato il libro e che non erano davvero intenzionati a smettere mi hanno detto tutti la stessa cosa: arrivati a metà libro si sono accorti che se avessero continuato avrebbero smesso davvero, … e hanno smesso di leggere.
In generale comunque non vado molto dietro a questi libri motivazionali. Ho sempre paura che raccontino fuffa. Però se anche per 1 settimana mi fanno diventare una persona migliore, un tentativo bisogna farlo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enrico&lt;/strong&gt; - Ad esempio, avevo iniziato a svegliarmi prima perché mi rendevo conto la mattina passava troppo velocemente e non riuscivo a fare tutte le cose che volevo. Poi sono capitato su questo libro che ha confermato alcune intuizioni che avevo, mi ha spiegato anche un possibile metodo da adottare per poter ottenere di più. Ora lo adatterò un po’ alle mie esigenze, però diciamo che ti dà una possibile strada da percorrere e ti suggerisce alcune riflessioni alle quali può darsi saresti arrivato da solo, ma anche no.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michele&lt;/strong&gt; - E’ logico che se è un argomento che già stai approfondendo, il risultato viene massimizzato. Quindi il concetto è tutto lì, questi libri aiutano quando sei pronto a recepirne l’insegnamento o le idee che ti propongono.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enrico&lt;/strong&gt; - Si, sono strapieni di fuffa, nel ho letti abbastanza da capire come prendermi solo i punti salienti. Questi libri sono fatti per abbracciare un pubblico ampio e persuadere le menti di persone che vanno dalla casalinga di 60 anni al ragazzino di 16 anni.
E’ normale che ti devono indorare la pillola in mille modi, ripeterti i concetti in mille salse fino a convincerti che quello che dicono è giusto; anche in questo, ad esempio, alcuni capitoli sono proprio l’identica copia di un altro, riformulato con esempi o strutturando il pensiero in ordine inverso. Alla fine si leggono velocemente proprio per questo :) 
Vi posso dare un’altra informazione: il libro più bello che ho letto è &lt;a href=&quot;https://michelenasti.com/2016/03/5-motivi-cui-rework-ti-cambiera-la-vita/&quot;&gt;REWORK&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2016/03/wp-1457508741600-2.jpg&quot; alt=&quot;Rework&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;IO&lt;/strong&gt; - letto anch’io!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Enrico&lt;/strong&gt; - l’ho apprezzato oltre per quello che dice anche perché è scritto in maniera essenziale, va dritto al punto senza perdersi in mille chiacchiere.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Qui si conclude la discussione “aulica”, poi da buoni amici abbiamo iniziato a parlare d’altro.&lt;/p&gt;

&lt;p&gt;Mi piacerebbe sapere da voi, c’è qualche libro motivazionale che avete letto? Che giudizio ne date? Fatemi sapere la vostra nei commenti. Buon lavoro!&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/libri-motivazionali/">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>I libri motivazionali funzionano?</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" I libri motivazionali funzionano? ">
                          <figcaption>I libri motivazionali funzionano?</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-02-15 01:00:00 CET">Wed, 15 Feb 2017 01:00:00 +0100</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>In una discussione con alcuni miei amici abbiamo iniziato a parlare di libri che stavamo leggendo in questo periodo, e ne è nato un discorso sui libri <em>motivazionali</em> (quei libri che ti insegnano a essere una persona migliore).</p>

<p><strong>Enrico</strong> sta leggendo <a href="http://amzn.to/2mKm1Ti"><strong>Miracle Morning</strong>, <em>trasforma la tua vita un mattino alla volta prima delle 8:00</em></a>. E’ uno dei libri che ho nella lista quindi sono estremamente curioso.</p>

<p><img src="/images/miracle-morning.jpg" alt="miracle morning" /></p>

<p>Tuttavia, io ho una “politica” per cui non compro un nuovo libro se prima non ho finito il precedente, e sto ancora leggendo <a href="http://amzn.to/2mK757I"><strong>Chi ha e chi non ha</strong>, <em>Storie di disuguaglianze</em></a> libro a tratti pesantuccio e a tratti molto leggero che parla di disuguaglianza economica (non sociale).</p>

<p><img src="/images/chi-ha-chi-non-ha.jpg" alt="Chi ha e chi non ha" /></p>

<p>Tra i capitoli si parla, ad esempio, di:</p>
<ul>
  <li>come si fa a misurare se una nazione è composta da ricchi o poveri;</li>
  <li>chi è stato l’uomo più ricco della storia;</li>
  <li>come interpretare le migrazioni di massa dei nostri giorni;</li>
  <li>perchè solo 8 club di calcio dopo il 2001 sono diventati ricchissimi e gli altri annaspano;</li>
  <li>Stati Uniti e Argentina sono partiti dalla stessa condizione economica, nel 1800. come mai ora sono così diverse? cosa è successo?</li>
</ul>

<p>Da qui in poi il mio articolo assume un tono più colloquiale, anche per rappresentare meglio le cose che ci siamo detti.</p>

<p><strong>Michele (non io)</strong> - ho una domanda per voi. Leggendo tanto e provando a correggere alcune abitudini, non vi capita di non riuscirci? Ovvero di riuscirci solo all’inizio quando ci s’impone di cambiare qualcosa, ma poi appena cambia una virgola nella routine le cose lette vengono abbandonate. La domanda è quante volte le metodologie lette poi le avete davvero applicate nella vita quotidiana.</p>

<p><strong>Io</strong> - A me questo capita con lo sport… specialmente quello che faccio da solo. Avevo preso la bellissima abitudine di andare a correre alle 19 tutte le sere … un’oretta di corsa. Poi una volta è venuto a piovere, un’altro giorno c’era un servizio da fare, poi un’altra cosa… e alla fine mi sono demotivato.</p>

<p><strong>Enrico</strong> - In effetti a ripensarci forse non ci sono mai riuscito semplicemente leggendo, anzi non ricordo proprio di aver mai ottenuto risultato. Di sicuro mi è capitato di cambiare abitudini nella mia vita ma ci sono riuscito quasi inconsciamente, perché ero fortemente motivato a raggiungere un obiettivo. L’ho fatto senza pianificare niente, semplicemente sono cambiato in base ad un desiderio e ad un’esigenza, quindi in maniera naturale. La cosa complicata, dove i libri possono aiutarti, è pianificare e forzare il cambiamento, ossia possono ispirarti in qualche modo e rafforzare qualcosa che stavi già pensando.</p>

<p><strong>Io</strong> - Un libro che è riuscito a cambiare qualcosa è stato <a href="http://amzn.to/2mJYCkP"><strong>è facile smettere di fumare se sai come farlo</strong></a>: avevo provato a smettere di fumare altre volte prima, ad esempio diminuendo le sigarette o smettendo di punto in bianco, e poi sono sempre tornato a fumare. Con il libro invece ho fumato fino all’ultima pagina, l’ho finito e mi sono chiesto: “mah?!” dopodiché non ho mai più fumato.</p>

<p><img src="/images/smettere-fumare.jpg" alt="E' facile smettere di fumare se sai come farlo" /></p>

<blockquote>
  <p>Ho fumato per un periodo circa 10 anni fa. Troppo tardi per arrabbiarsi ora, mamma :)</p>
</blockquote>

<p><strong>Michele</strong> - Waaa sta cosa di quel libro mi ha sempre intrigato, perchè non sei il primo che me lo dice. E’ incredibile.</p>

<p><strong>Io</strong> - In quel caso penso che mi abbia dato delle motivazioni psicologiche profonde che mi hanno fatto decidere di non prendere mai più una sigaretta. Quasi a dire “sono un cretino se fumo ancora”. Ma ammetto che ero fortemente determinato a smettere già di mio.
Altri amici a cui ho passato il libro e che non erano davvero intenzionati a smettere mi hanno detto tutti la stessa cosa: arrivati a metà libro si sono accorti che se avessero continuato avrebbero smesso davvero, … e hanno smesso di leggere.
In generale comunque non vado molto dietro a questi libri motivazionali. Ho sempre paura che raccontino fuffa. Però se anche per 1 settimana mi fanno diventare una persona migliore, un tentativo bisogna farlo.</p>

<p><strong>Enrico</strong> - Ad esempio, avevo iniziato a svegliarmi prima perché mi rendevo conto la mattina passava troppo velocemente e non riuscivo a fare tutte le cose che volevo. Poi sono capitato su questo libro che ha confermato alcune intuizioni che avevo, mi ha spiegato anche un possibile metodo da adottare per poter ottenere di più. Ora lo adatterò un po’ alle mie esigenze, però diciamo che ti dà una possibile strada da percorrere e ti suggerisce alcune riflessioni alle quali può darsi saresti arrivato da solo, ma anche no.</p>

<p><strong>Michele</strong> - E’ logico che se è un argomento che già stai approfondendo, il risultato viene massimizzato. Quindi il concetto è tutto lì, questi libri aiutano quando sei pronto a recepirne l’insegnamento o le idee che ti propongono.</p>

<p><strong>Enrico</strong> - Si, sono strapieni di fuffa, nel ho letti abbastanza da capire come prendermi solo i punti salienti. Questi libri sono fatti per abbracciare un pubblico ampio e persuadere le menti di persone che vanno dalla casalinga di 60 anni al ragazzino di 16 anni.
E’ normale che ti devono indorare la pillola in mille modi, ripeterti i concetti in mille salse fino a convincerti che quello che dicono è giusto; anche in questo, ad esempio, alcuni capitoli sono proprio l’identica copia di un altro, riformulato con esempi o strutturando il pensiero in ordine inverso. Alla fine si leggono velocemente proprio per questo :) 
Vi posso dare un’altra informazione: il libro più bello che ho letto è <a href="https://michelenasti.com/2016/03/5-motivi-cui-rework-ti-cambiera-la-vita/">REWORK</a></p>

<p><img src="/wp-content/uploads/2016/03/wp-1457508741600-2.jpg" alt="Rework" /></p>

<ul>
  <li>
    <p><strong>IO</strong> - letto anch’io!</p>
  </li>
  <li>
    <p><strong>Enrico</strong> - l’ho apprezzato oltre per quello che dice anche perché è scritto in maniera essenziale, va dritto al punto senza perdersi in mille chiacchiere.</p>
  </li>
</ul>

<hr />

<p>Qui si conclude la discussione “aulica”, poi da buoni amici abbiamo iniziato a parlare d’altro.</p>

<p>Mi piacerebbe sapere da voi, c’è qualche libro motivazionale che avete letto? Che giudizio ne date? Fatemi sapere la vostra nei commenti. Buon lavoro!</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>hey javascript function, take this!</title>
        <link>https://michelenasti.com/2017/02/10/hey-javascript-function-take-this.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/02/10/hey-javascript-function-take-this.html</guid>
        <pubDate>Fri, 10 Feb 2017 10:05:22 +0100</pubDate>
        <author></author>
        
          <description>&lt;p&gt;In this article I’m going to do a quick recap of ES5 and ES6 functions, explaining what happens to &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/this.jpg&quot; alt=&quot;&quot; /&gt;\&lt;/p&gt;

&lt;h2 id=&quot;functions-as-you-may-already-know-plain-old-classic-es5&quot;&gt;Functions as you may already know: plain-old-classic ES5&lt;/h2&gt;

&lt;p&gt;As you know, in javascript you can define a function in many ways. The standard, 20-years-old way of declaring a function is this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This kind of functions will be “hoisted”, this means that the function will be read before any other code, and used when called. So you can also write this with no error:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// no error: this is executed later&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;//this is read and hoisted first &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you find this behaviour too strange (at first glance, it is!), you can &lt;strong&gt;assign a function to a variable&lt;/strong&gt;. In this case the function will be read and executed only when used:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//sayHello();  if called here, like before, ERROR! &lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// no error because it is used after the definition&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;functions-in-es6&quot;&gt;Functions in ES6&lt;/h2&gt;

&lt;p&gt;Now we can have a quick look to new kind of functions introduced in ES6. Here is the first example:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
   &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Michele'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;what happened? we have stripped out the &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt; keyword, put an arrow (&lt;code class=&quot;highlighter-rouge&quot;&gt;=&amp;gt;&lt;/code&gt;) between the arguments and the body of the function, and that’s it! More expressive and fun to use.&lt;/p&gt;

&lt;h2 id=&quot;functions-in-es6-in-js-objects&quot;&gt;Functions, in ES6, in JS Objects&lt;/h2&gt;

&lt;p&gt;There is just one thing to note: &lt;strong&gt;the ES6 version of the function does not bind &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;&lt;/strong&gt;. What the heck does this mean?!&lt;/p&gt;

&lt;p&gt;Have a look at this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Michele'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'m ${this.name}`);
  },
  sayHiAlt () {
    console.log(`Hi. I'&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;Hi. I'm undefined&quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayHiAlt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;Hi. I'm Michele&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What’s happening? Let’s dip in.&lt;/p&gt;

&lt;h3 id=&quot;what-is-hi-im-thisname&quot;&gt;what is &lt;code class=&quot;highlighter-rouge&quot;&gt;Hi. I'm ${this.name}&lt;/code&gt;?&lt;/h3&gt;

&lt;p&gt;This is a template string in Javascript. this translates in &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Hi. I\'m &quot; + this.name&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;why-the-first-sayhi-returns-undefined&quot;&gt;Why the first &lt;code class=&quot;highlighter-rouge&quot;&gt;sayHi&lt;/code&gt; returns undefined?&lt;/h3&gt;

&lt;p&gt;because &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; is not bound to the context!&lt;/p&gt;

&lt;h3 id=&quot;what-is-happening-at-the-last-function-sayhialt-&quot;&gt;What is happening at the last function, &lt;code class=&quot;highlighter-rouge&quot;&gt;sayHiAlt&lt;/code&gt; ?!&lt;/h3&gt;

&lt;p&gt;This is ES6 at all of it’s power. First, we are assigning a function to a variable, like we saw in the third example of this article; then, we are using another ES6 to assign the function to a property with the same name.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://babeljs.io/repl/&quot;&gt;babel online REPL&lt;/a&gt; (a place where you can past ES6 code and see it in ES5), the previous snippet becomes this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s1&quot;&gt;'use strict'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Michele'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hi. I\'m '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sayHiAlt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sayHiAlt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hi. I\'m '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;what-should-i-use&quot;&gt;What should I use?&lt;/h2&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;() =&amp;gt; {}&lt;/code&gt; always, because it’s simpler; usually you don’t need &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; to work.&lt;/p&gt;

&lt;p&gt;But if you need &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;, … you know what to do.&lt;/p&gt;

&lt;p&gt;After writing &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; article, I can finally say: ES6 doesn’t care about &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;, but you should.&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/02/10/hey-javascript-function-take-this.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>hey javascript function, take this!</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" hey javascript function, take this! ">
                          <figcaption>hey javascript function, take this!</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-02-10 10:05:22 CET">Fri, 10 Feb 2017 10:05:22 +0100</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>In this article I’m going to do a quick recap of ES5 and ES6 functions, explaining what happens to <code class="highlighter-rouge">this</code>.</p>

<p><img src="/images/this.jpg" alt="" />\</p>

<h2 id="functions-as-you-may-already-know-plain-old-classic-es5">Functions as you may already know: plain-old-classic ES5</h2>

<p>As you know, in javascript you can define a function in many ways. The standard, 20-years-old way of declaring a function is this:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">sayHello</span><span class="p">()</span> <span class="p">{</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"hello!"</span><span class="p">)</span> 
<span class="p">}</span>
</code></pre>
</div>

<p>This kind of functions will be “hoisted”, this means that the function will be read before any other code, and used when called. So you can also write this with no error:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="c1">// no error: this is executed later</span>
<span class="nx">sayHello</span><span class="p">();</span> 

<span class="c1">//this is read and hoisted first </span>
<span class="kd">function</span> <span class="nx">sayHello</span><span class="p">()</span> <span class="p">{</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"hello!"</span><span class="p">)</span> 
<span class="p">}</span>
</code></pre>
</div>

<p>If you find this behaviour too strange (at first glance, it is!), you can <strong>assign a function to a variable</strong>. In this case the function will be read and executed only when used:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="c1">//sayHello();  if called here, like before, ERROR! </span>

<span class="kd">var</span> <span class="nx">sayHello</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Hello!"</span><span class="p">)</span> 
<span class="p">}</span>

<span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// no error because it is used after the definition</span>
</code></pre>
</div>

<h2 id="functions-in-es6">Functions in ES6</h2>

<p>Now we can have a quick look to new kind of functions introduced in ES6. Here is the first example:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">sayHello</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> 
   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Hello, "</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">sayHello</span><span class="p">(</span><span class="s1">'Michele'</span><span class="p">);</span>
</code></pre>
</div>

<p>what happened? we have stripped out the <code class="highlighter-rouge">function</code> keyword, put an arrow (<code class="highlighter-rouge">=&gt;</code>) between the arguments and the body of the function, and that’s it! More expressive and fun to use.</p>

<h2 id="functions-in-es6-in-js-objects">Functions, in ES6, in JS Objects</h2>

<p>There is just one thing to note: <strong>the ES6 version of the function does not bind <code class="highlighter-rouge">this</code></strong>. What the heck does this mean?!</p>

<p>Have a look at this:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="s1">'Michele'</span><span class="p">,</span>
  <span class="na">sayHi</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">Hi</span><span class="p">.</span> <span class="nx">I</span><span class="s1">'m ${this.name}`);
  },
  sayHiAlt () {
    console.log(`Hi. I'</span><span class="nx">m</span> <span class="nx">$</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">user</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">();</span> <span class="c1">// "Hi. I'm undefined"</span>
<span class="nx">user</span><span class="p">.</span><span class="nx">sayHiAlt</span><span class="p">();</span> <span class="c1">// "Hi. I'm Michele"</span>
</code></pre>
</div>

<p>What’s happening? Let’s dip in.</p>

<h3 id="what-is-hi-im-thisname">what is <code class="highlighter-rouge">Hi. I'm ${this.name}</code>?</h3>

<p>This is a template string in Javascript. this translates in <code class="highlighter-rouge">"Hi. I\'m " + this.name</code>.</p>

<h3 id="why-the-first-sayhi-returns-undefined">Why the first <code class="highlighter-rouge">sayHi</code> returns undefined?</h3>

<p>because <code class="highlighter-rouge">this</code> is not bound to the context!</p>

<h3 id="what-is-happening-at-the-last-function-sayhialt-">What is happening at the last function, <code class="highlighter-rouge">sayHiAlt</code> ?!</h3>

<p>This is ES6 at all of it’s power. First, we are assigning a function to a variable, like we saw in the third example of this article; then, we are using another ES6 to assign the function to a property with the same name.</p>

<p>Thanks to <a href="https://babeljs.io/repl/">babel online REPL</a> (a place where you can past ES6 code and see it in ES5), the previous snippet becomes this:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="s1">'Michele'</span><span class="p">,</span>
    <span class="na">sayHi</span><span class="p">:</span> <span class="kd">function</span> <span class="nx">sayHi</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Hi. I\'m '</span> <span class="o">+</span> <span class="kc">undefined</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="na">sayHiAlt</span><span class="p">:</span> <span class="kd">function</span> <span class="nx">sayHiAlt</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Hi. I\'m '</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre>
</div>

<h2 id="what-should-i-use">What should I use?</h2>

<p>Use <code class="highlighter-rouge">() =&gt; {}</code> always, because it’s simpler; usually you don’t need <code class="highlighter-rouge">this</code> to work.</p>

<p>But if you need <code class="highlighter-rouge">this</code>, … you know what to do.</p>

<p>After writing <code class="highlighter-rouge">this</code> article, I can finally say: ES6 doesn’t care about <code class="highlighter-rouge">this</code>, but you should.</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>Debug a NodeJS application from command line - it's super easy!</title>
        <link>https://michelenasti.com/2017/02/08/debug-a-nodejs-application-from-command-line-it-s-super-easy.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/02/08/debug-a-nodejs-application-from-command-line-it-s-super-easy.html</guid>
        <pubDate>Wed, 08 Feb 2017 12:17:15 +0100</pubDate>
        <author></author>
        
          <description>&lt;p&gt;If you want to seriously develop a nodejs application, you can’t continue to put &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log()&lt;/code&gt; statements everywhere. It’s just a pain! That’s why every modern language has debug support via various tools.&lt;/p&gt;

&lt;p&gt;In NodeJS debugging can be also done via command line - it’s not &lt;em&gt;point n’ click&lt;/em&gt;, but it’s still easy and straightforward.&lt;/p&gt;

&lt;p&gt;I want tell lies to you, &lt;em&gt;I debug my applications in a IDE&lt;/em&gt; :) But if I’m debugging something over &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt;, this tool comes in hand.&lt;/p&gt;

&lt;h2 id=&quot;an-example-file-to-play-with&quot;&gt;An example file to play with&lt;/h2&gt;

&lt;p&gt;Save this file as &lt;code class=&quot;highlighter-rouge&quot;&gt;book.js&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'NodeJS for dummies'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ISBN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1234567'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cooking with Trump'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'recipes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;debug&quot;&gt;debug!&lt;/h2&gt;

&lt;p&gt;To run this file you can launch &lt;code class=&quot;highlighter-rouge&quot;&gt;node book.js&lt;/code&gt;; however, in case you want to &lt;strong&gt;debug&lt;/strong&gt; you just add an option:&lt;/p&gt;

&lt;div class=&quot;language-terminal highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; debug book.js 
&lt;/span&gt;
&amp;lt; Debugger listening on 127.0.0.1:5858
connecting to 127.0.0.1:5858 ... ok
break in book.js:1
&amp;gt; 1 let book = {
  2   title: 'NodeJS for dummies',
  3   ISBN: '1234567'
debug&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s skip the first two lines, they are just diplayed for nerds.&lt;/p&gt;

&lt;p&gt;Nodejs has blocked the execution at line 1 of the file, as you can see from the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; mark.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It’s best to say now that when NodeJS blocks at a line, the line is &lt;strong&gt;NOT&lt;/strong&gt; executed. So, in the example, we are &lt;em&gt;before&lt;/em&gt; the first istruction is ever executed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To continue to the next line, press &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;(next) and hit Enter:&lt;/p&gt;

&lt;div class=&quot;language-terminal highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;debug&amp;gt; n
break in book.js:6
  4 };
  5
&amp;gt; 6 book.title = 'cooking with Trump';
  7 book.category = 'recipes'
  8
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now the first line has been executed (the creation of the &lt;code class=&quot;highlighter-rouge&quot;&gt;book&lt;/code&gt; object); node has now stopped to the next executable instruction.&lt;/p&gt;

&lt;p&gt;In this easy example, going from one instruction to another using &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; might be interesting, but complex applications can contain thousands of lines of code, so jumping with &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; is not a great idea. Exit from debug for now.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To exit from the debugger you can type &lt;code class=&quot;highlighter-rouge&quot;&gt;quit&lt;/code&gt; or press &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+C&lt;/code&gt; twice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We might want to stop at a specific point, for example before setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;category&lt;/code&gt; attribute to the book:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cooking with Trump'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;debugger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'recipes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;if we want to jump directly to the place where the &lt;code class=&quot;highlighter-rouge&quot;&gt;debugger&lt;/code&gt; instruction is, you can just hit &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; (continue):&lt;/p&gt;

&lt;div class=&quot;language-terminal highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;debug&amp;gt; c
break in book.js:7
  5
  6 book.title = 'cooking with Trump'
&amp;gt; 7 debugger;
  8 book.category = 'recipes'
  9
debug&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you can see the debugger has now stopped at line 7, where the &lt;code class=&quot;highlighter-rouge&quot;&gt;debugger&lt;/code&gt; instruction was. &lt;strong&gt;It’s important to say that &lt;code class=&quot;highlighter-rouge&quot;&gt;debugger&lt;/code&gt; instruction is ignored when running the application normally&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ok, now we know how to stop in a nodejs application, but how can we inspect the value of objects?&lt;/p&gt;

&lt;p&gt;just hit &lt;code class=&quot;highlighter-rouge&quot;&gt;repl&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-terminal highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;debug&amp;gt; repl
Press Ctrl + C to leave debug repl
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we are in a Javascript console, like the one we have in a browser. we can execute expressions like &lt;code class=&quot;highlighter-rouge&quot;&gt;var a = 1+3&lt;/code&gt;; the interesting thing is that we have &lt;strong&gt;access to variables defined until the break point&lt;/strong&gt;: infact we can inspect our &lt;code class=&quot;highlighter-rouge&quot;&gt;book&lt;/code&gt; variable and see that …&lt;/p&gt;

&lt;div class=&quot;language-terminal highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; book
{ title: 'cooking with Trump', ISBN: '1234567' }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;…&lt;code class=&quot;highlighter-rouge&quot;&gt;category&lt;/code&gt; attribute is not defined, since it will be executed later, at line 8.&lt;/p&gt;

&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;repl&lt;/code&gt; you can also modify the value of objects, and this is great if you are in a loop and want to go directly to the value that you want, or to simulate complex cases.&lt;/p&gt;

&lt;p&gt;To exit from &lt;code class=&quot;highlighter-rouge&quot;&gt;repl&lt;/code&gt; just hit &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+C&lt;/code&gt; to return to &lt;code class=&quot;highlighter-rouge&quot;&gt;debug&amp;gt;&lt;/code&gt; prompt.&lt;/p&gt;

&lt;h2 id=&quot;now-you-can-debug-like-a-boss&quot;&gt;Now you can debug like a boss&lt;/h2&gt;

&lt;p&gt;Show this to your friends, they’ll respect you more after this.&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/02/08/debug-a-nodejs-application-from-command-line-it-s-super-easy.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>Debug a NodeJS application from command line - it's super easy!</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" Debug a NodeJS application from command line - it's super easy! ">
                          <figcaption>Debug a NodeJS application from command line - it's super easy!</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-02-08 12:17:15 CET">Wed, 08 Feb 2017 12:17:15 +0100</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>If you want to seriously develop a nodejs application, you can’t continue to put <code class="highlighter-rouge">console.log()</code> statements everywhere. It’s just a pain! That’s why every modern language has debug support via various tools.</p>

<p>In NodeJS debugging can be also done via command line - it’s not <em>point n’ click</em>, but it’s still easy and straightforward.</p>

<p>I want tell lies to you, <em>I debug my applications in a IDE</em> :) But if I’m debugging something over <code class="highlighter-rouge">ssh</code>, this tool comes in hand.</p>

<h2 id="an-example-file-to-play-with">An example file to play with</h2>

<p>Save this file as <code class="highlighter-rouge">book.js</code> :</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">book</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">title</span><span class="p">:</span> <span class="s1">'NodeJS for dummies'</span><span class="p">,</span>
  <span class="na">ISBN</span><span class="p">:</span> <span class="s1">'1234567'</span>
<span class="p">};</span>

<span class="nx">book</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="s1">'cooking with Trump'</span><span class="p">;</span>
<span class="nx">book</span><span class="p">.</span><span class="nx">category</span> <span class="o">=</span> <span class="s1">'recipes'</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">book</span><span class="p">);</span>
</code></pre>
</div>

<h2 id="debug">debug!</h2>

<p>To run this file you can launch <code class="highlighter-rouge">node book.js</code>; however, in case you want to <strong>debug</strong> you just add an option:</p>

<div class="language-terminal highlighter-rouge"><pre class="highlight"><code><span class="w">$ </span><span class="nc">node</span><span class="kv"> debug book.js 
</span>
&lt; Debugger listening on 127.0.0.1:5858
connecting to 127.0.0.1:5858 ... ok
break in book.js:1
&gt; 1 let book = {
  2   title: 'NodeJS for dummies',
  3   ISBN: '1234567'
debug&gt;
</code></pre>
</div>

<p>Let’s skip the first two lines, they are just diplayed for nerds.</p>

<p>Nodejs has blocked the execution at line 1 of the file, as you can see from the <code class="highlighter-rouge">&gt;</code> mark.</p>

<blockquote>
  <p>It’s best to say now that when NodeJS blocks at a line, the line is <strong>NOT</strong> executed. So, in the example, we are <em>before</em> the first istruction is ever executed.</p>
</blockquote>

<p>To continue to the next line, press <code class="highlighter-rouge">n</code>(next) and hit Enter:</p>

<div class="language-terminal highlighter-rouge"><pre class="highlight"><code>debug&gt; n
break in book.js:6
  4 };
  5
&gt; 6 book.title = 'cooking with Trump';
  7 book.category = 'recipes'
  8
</code></pre>
</div>

<p>Now the first line has been executed (the creation of the <code class="highlighter-rouge">book</code> object); node has now stopped to the next executable instruction.</p>

<p>In this easy example, going from one instruction to another using <code class="highlighter-rouge">n</code> might be interesting, but complex applications can contain thousands of lines of code, so jumping with <code class="highlighter-rouge">n</code> is not a great idea. Exit from debug for now.</p>

<blockquote>
  <p>To exit from the debugger you can type <code class="highlighter-rouge">quit</code> or press <code class="highlighter-rouge">Ctrl+C</code> twice.</p>
</blockquote>

<p>We might want to stop at a specific point, for example before setting the <code class="highlighter-rouge">category</code> attribute to the book:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">...</span>
<span class="nx">book</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="s1">'cooking with Trump'</span><span class="p">;</span>
<span class="kr">debugger</span><span class="p">;</span> 
<span class="nx">book</span><span class="p">.</span><span class="nx">category</span> <span class="o">=</span> <span class="s1">'recipes'</span><span class="p">;</span>
<span class="p">...</span>
</code></pre>
</div>

<p>if we want to jump directly to the place where the <code class="highlighter-rouge">debugger</code> instruction is, you can just hit <code class="highlighter-rouge">c</code> (continue):</p>

<div class="language-terminal highlighter-rouge"><pre class="highlight"><code>debug&gt; c
break in book.js:7
  5
  6 book.title = 'cooking with Trump'
&gt; 7 debugger;
  8 book.category = 'recipes'
  9
debug&gt;
</code></pre>
</div>

<p>As you can see the debugger has now stopped at line 7, where the <code class="highlighter-rouge">debugger</code> instruction was. <strong>It’s important to say that <code class="highlighter-rouge">debugger</code> instruction is ignored when running the application normally</strong>.</p>

<p>Ok, now we know how to stop in a nodejs application, but how can we inspect the value of objects?</p>

<p>just hit <code class="highlighter-rouge">repl</code>:</p>

<div class="language-terminal highlighter-rouge"><pre class="highlight"><code>debug&gt; repl
Press Ctrl + C to leave debug repl
&gt;
</code></pre>
</div>

<p>Now we are in a Javascript console, like the one we have in a browser. we can execute expressions like <code class="highlighter-rouge">var a = 1+3</code>; the interesting thing is that we have <strong>access to variables defined until the break point</strong>: infact we can inspect our <code class="highlighter-rouge">book</code> variable and see that …</p>

<div class="language-terminal highlighter-rouge"><pre class="highlight"><code>&gt; book
{ title: 'cooking with Trump', ISBN: '1234567' }
</code></pre>
</div>

<p>…<code class="highlighter-rouge">category</code> attribute is not defined, since it will be executed later, at line 8.</p>

<p>Using <code class="highlighter-rouge">repl</code> you can also modify the value of objects, and this is great if you are in a loop and want to go directly to the value that you want, or to simulate complex cases.</p>

<p>To exit from <code class="highlighter-rouge">repl</code> just hit <code class="highlighter-rouge">Ctrl+C</code> to return to <code class="highlighter-rouge">debug&gt;</code> prompt.</p>

<h2 id="now-you-can-debug-like-a-boss">Now you can debug like a boss</h2>

<p>Show this to your friends, they’ll respect you more after this.</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>Discesa in Inferno e risalita in Paradiso: le 24 ore da incubo di Gitlab</title>
        <link>https://michelenasti.com/2017/02/07/discesa-in-inferno-e-risalita-in-paradiso-le-24-ore-da-incubo-di-gitlab.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/02/07/discesa-in-inferno-e-risalita-in-paradiso-le-24-ore-da-incubo-di-gitlab.html</guid>
        <pubDate>Tue, 07 Feb 2017 11:33:49 +0100</pubDate>
        <author></author>
        
          <description>&lt;p&gt;&lt;strong&gt;Il 1 febbraio 2017&lt;/strong&gt; è accaduto ciò che nessun’azienda al mondo si augura: un database admin, durante un’operazione di manutenzione di una macchina, lancia il comando sbagliato sul cluster sbagliato e cancella tutto il database di produzione, circa 300 gb di dati andati in fumo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/gitlab_logo.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://about.gitlab.com&quot;&gt;&lt;strong&gt;Gitlab&lt;/strong&gt;&lt;/a&gt; è una startup americana di hosting di codice via git. In questo settore le più note sono &lt;strong&gt;Github&lt;/strong&gt; e &lt;strong&gt;Bitbucket&lt;/strong&gt;, giusto per darvi un’idea dei competitor.&lt;/p&gt;

&lt;p&gt;Gitlab era principalmente nota perché ospitava un’intera piattaforma di continuous integration al suo interno integrata con docker, cosa che gli altri competitor più affermati invece delegano a servizi esterni (a pagamento).&lt;/p&gt;

&lt;h3 id=&quot;poco-male-abbiamo-i-backup-abbiamo-i-backup-vero&quot;&gt;Poco male, abbiamo i Backup… Abbiamo i backup, vero?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Gitlab va offline deliberatamente&lt;/strong&gt;, finché non riescono a ripristinare il database. Pensate un attimo alla vostra azienda che chiude per un giorno o due a causa di un incidente di questo tipo: clienti paganti furiosi, il web che legge e scrive di te, migliaia di post indignati e social arrabbiati.&lt;/p&gt;

&lt;p&gt;Contemporaneamente, &lt;strong&gt;una buona fetta di programmatori nel mondo inizia a provare compassione.&lt;/strong&gt; Io stesso, autore di questo articolo, ho per errore cancellato una volta tutto il database di test (di test, per fortuna!) della mia azienda. Ma almeno avevamo un backup.&lt;/p&gt;

&lt;p&gt;Torniamo a Gitlab: scatta la ricerca dei backup. Secondo le loro procedure interne, &lt;strong&gt;Gitlab ha almeno 5 backup differenti, ma uno dopo l’altro si scopre che non funzionano&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I backup regolari sembrano non essere più in funzione: fallivano silenziosamente da mesi, e nessuno se ne era mai accorto.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Il dump del database non funziona a causa di un mismatch tra il tipo del db e l’eseguibile che lo leggeva/eseguiva.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;gli snapshot del disco sono abilitati per i file comuni, ma non per i dischi del db.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Neanche il backup su S3 stava funzionando&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;a causa di alcuni script automatici che rimuovono i vecchi backup, non c’era più nulla di utilizzabile da poter ripristinare&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fortunatamente, &lt;strong&gt;lo stesso admin che ha lanciato il comando per errore aveva fatto uno snapshot a mano del db sulla sua macchina locale. &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;L’ultimo backup corrispondeva a 6 ore fa, e su una macchina non direttamente connessa al cluster di server; &lt;strong&gt;il ripristino del backup è avvenuto lentamente con una perdita di tutti i dati delle ultime sei ore. &lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;come-trasformare-un-disastro-in-unoperazione-mediatica&quot;&gt;Come trasformare un disastro in un’operazione mediatica&lt;/h3&gt;

&lt;p&gt;E’ a questo punto che in Gitlab si rendono conto di avere un’occasione da sfruttare: stanno ricevendo un’incredibile esposizione mediatica.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;La prima cosa che fanno è mettere su un &lt;a href=&quot;https://docs.google.com/document/d/1GCK53YDcBWQveod9kfzW-VCxIABGiryG7_z_6jHdVik/pub&quot;&gt;google docs&lt;/a&gt;&lt;/strong&gt; condiviso in cui spiegano l’accaduto, i tentativi, le scoperte.&lt;/p&gt;

&lt;p&gt;La seconda cosa che mi ha sorpreso è il &lt;strong&gt;live streaming su youtube&lt;/strong&gt; (era &lt;a href=&quot;https://www.youtube.com/watch?v=63wCG86ih94&quot;&gt;qui&lt;/a&gt;, ora non funziona più) dei dipendenti di gitlab che mostravano live tutte le operazioni messe in pratica per ripristinare il database. Tramite la chat i dipendenti di gitlab parlavano con gli spettatori, e rispondevano alle loro domande. A video c’erano le loro facce e il terminale che mostrava l’output di comandi impronunciabili.&lt;/p&gt;

&lt;p&gt;La domanda più gettonata è stata questa:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Q: Who did it, will they be fired?&lt;br /&gt;
&lt;span style=&quot;letter-spacing: 0.01em; font-style: normal;&quot;&gt;&lt;strong&gt;A: Someone made a mistake, they won’t be fired.&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(Traduzione: &lt;em&gt;Verrà licenziato quello che ha cancellato il db?&lt;/em&gt; &lt;strong&gt;No, non sarà licenziato&lt;/strong&gt;.)&lt;/p&gt;

&lt;h3 id=&quot;e-ora&quot;&gt;E ora?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Gitlab è di nuovo in funzione&lt;/strong&gt;, il ripristino è stato lentamente completato e tutta questa vicenda ha generato un grande “&lt;em&gt;abbraccione&lt;/em&gt;” da parte della community di sviluppatori di tutto il mondo.&lt;/p&gt;

&lt;p&gt;Questo è quel genere di disastri che &lt;strong&gt;non dovrebbero MAI accadere&lt;/strong&gt; e per cui &lt;strong&gt;conviene sempre avere più di un backup e testarlo regolarmente&lt;/strong&gt;. E voi avete un piano di disaster recovery?&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/02/07/discesa-in-inferno-e-risalita-in-paradiso-le-24-ore-da-incubo-di-gitlab.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>Discesa in Inferno e risalita in Paradiso: le 24 ore da incubo di Gitlab</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" Discesa in Inferno e risalita in Paradiso: le 24 ore da incubo di Gitlab ">
                          <figcaption>Discesa in Inferno e risalita in Paradiso: le 24 ore da incubo di Gitlab</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-02-07 11:33:49 CET">Tue, 07 Feb 2017 11:33:49 +0100</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p><strong>Il 1 febbraio 2017</strong> è accaduto ciò che nessun’azienda al mondo si augura: un database admin, durante un’operazione di manutenzione di una macchina, lancia il comando sbagliato sul cluster sbagliato e cancella tutto il database di produzione, circa 300 gb di dati andati in fumo.</p>

<p><img src="/images/gitlab_logo.svg" alt="" /></p>

<p><a href="https://about.gitlab.com"><strong>Gitlab</strong></a> è una startup americana di hosting di codice via git. In questo settore le più note sono <strong>Github</strong> e <strong>Bitbucket</strong>, giusto per darvi un’idea dei competitor.</p>

<p>Gitlab era principalmente nota perché ospitava un’intera piattaforma di continuous integration al suo interno integrata con docker, cosa che gli altri competitor più affermati invece delegano a servizi esterni (a pagamento).</p>

<h3 id="poco-male-abbiamo-i-backup-abbiamo-i-backup-vero">Poco male, abbiamo i Backup… Abbiamo i backup, vero?</h3>

<p><strong>Gitlab va offline deliberatamente</strong>, finché non riescono a ripristinare il database. Pensate un attimo alla vostra azienda che chiude per un giorno o due a causa di un incidente di questo tipo: clienti paganti furiosi, il web che legge e scrive di te, migliaia di post indignati e social arrabbiati.</p>

<p>Contemporaneamente, <strong>una buona fetta di programmatori nel mondo inizia a provare compassione.</strong> Io stesso, autore di questo articolo, ho per errore cancellato una volta tutto il database di test (di test, per fortuna!) della mia azienda. Ma almeno avevamo un backup.</p>

<p>Torniamo a Gitlab: scatta la ricerca dei backup. Secondo le loro procedure interne, <strong>Gitlab ha almeno 5 backup differenti, ma uno dopo l’altro si scopre che non funzionano</strong>.</p>

<ul>
  <li>
    <p>I backup regolari sembrano non essere più in funzione: fallivano silenziosamente da mesi, e nessuno se ne era mai accorto.</p>
  </li>
  <li>
    <p>Il dump del database non funziona a causa di un mismatch tra il tipo del db e l’eseguibile che lo leggeva/eseguiva.</p>
  </li>
  <li>
    <p>gli snapshot del disco sono abilitati per i file comuni, ma non per i dischi del db.</p>
  </li>
  <li>
    <p>Neanche il backup su S3 stava funzionando</p>
  </li>
  <li>
    <p>a causa di alcuni script automatici che rimuovono i vecchi backup, non c’era più nulla di utilizzabile da poter ripristinare</p>
  </li>
</ul>

<p>Fortunatamente, <strong>lo stesso admin che ha lanciato il comando per errore aveva fatto uno snapshot a mano del db sulla sua macchina locale. </strong></p>

<p>L’ultimo backup corrispondeva a 6 ore fa, e su una macchina non direttamente connessa al cluster di server; <strong>il ripristino del backup è avvenuto lentamente con una perdita di tutti i dati delle ultime sei ore. </strong></p>

<h3 id="come-trasformare-un-disastro-in-unoperazione-mediatica">Come trasformare un disastro in un’operazione mediatica</h3>

<p>E’ a questo punto che in Gitlab si rendono conto di avere un’occasione da sfruttare: stanno ricevendo un’incredibile esposizione mediatica.</p>

<p><strong>La prima cosa che fanno è mettere su un <a href="https://docs.google.com/document/d/1GCK53YDcBWQveod9kfzW-VCxIABGiryG7_z_6jHdVik/pub">google docs</a></strong> condiviso in cui spiegano l’accaduto, i tentativi, le scoperte.</p>

<p>La seconda cosa che mi ha sorpreso è il <strong>live streaming su youtube</strong> (era <a href="https://www.youtube.com/watch?v=63wCG86ih94">qui</a>, ora non funziona più) dei dipendenti di gitlab che mostravano live tutte le operazioni messe in pratica per ripristinare il database. Tramite la chat i dipendenti di gitlab parlavano con gli spettatori, e rispondevano alle loro domande. A video c’erano le loro facce e il terminale che mostrava l’output di comandi impronunciabili.</p>

<p>La domanda più gettonata è stata questa:</p>

<blockquote>
  <p>Q: Who did it, will they be fired?<br />
<span style="letter-spacing: 0.01em; font-style: normal;"><strong>A: Someone made a mistake, they won’t be fired.</strong></span></p>
</blockquote>

<p>(Traduzione: <em>Verrà licenziato quello che ha cancellato il db?</em> <strong>No, non sarà licenziato</strong>.)</p>

<h3 id="e-ora">E ora?</h3>

<p><strong>Gitlab è di nuovo in funzione</strong>, il ripristino è stato lentamente completato e tutta questa vicenda ha generato un grande “<em>abbraccione</em>” da parte della community di sviluppatori di tutto il mondo.</p>

<p>Questo è quel genere di disastri che <strong>non dovrebbero MAI accadere</strong> e per cui <strong>conviene sempre avere più di un backup e testarlo regolarmente</strong>. E voi avete un piano di disaster recovery?</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
  </channel>
</rss>