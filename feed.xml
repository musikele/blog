<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>I'm a full stack Developer with an eye for the web.</description>
    <link>https://michelenasti.com/</link>
    <atom:link href="https://michelenasti.com/feed.xml" rel="self" type="application/rss+xml" />
    <updated>2017-04-08T13:27:45+02:00</updated>
    <id>https://michelenasti.com</id>
    <author>
      <name></name>
    </author>
    
      <item>
        <title>Fantastic Unit Tests in Javascript with Mocks</title>
        <link>https://michelenasti.com/2017/04/07/fantastic-unit-tests-in-javascript-with-mocks.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/04/07/fantastic-unit-tests-in-javascript-with-mocks.html</guid>
        <pubDate>Fri, 07 Apr 2017 09:49:00 +0200</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Let’s start with the example. We have two files, one that is the main one called &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; that exports just one method, called &lt;code class=&quot;highlighter-rouge&quot;&gt;handleSignup()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// file app.js
const db = require('./db.js');

module.exports.handleSignup = (email, password) =&amp;gt; {
  // ...
  // save the user to the database
  db.saveUser({ email, password });
  // ...
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;, at some point, calls the &lt;code class=&quot;highlighter-rouge&quot;&gt;db.saveUser()&lt;/code&gt; function. Let’s see the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; module:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// file db.js
module.exports.saveUser = user =&amp;gt; {
  console.log('Saving the user...', user);
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Nothing very special, it’s just a demo. Let’s go with the important question.&lt;/p&gt;

&lt;h2 id=&quot;how-do-we-unit-test-appjs&quot;&gt;How do we unit-test app.js?&lt;/h2&gt;

&lt;p&gt;For those not used to &lt;strong&gt;unit testing&lt;/strong&gt;, it &lt;strong&gt;is a way of testing classes atomically&lt;/strong&gt;. This means that app.js may depend on other classes, but we will not test these.&lt;/p&gt;

&lt;p&gt;Let me be more specific. the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; module could be really calling a database, this means that if the database connection is not working, the test would fail. OR, if the test is &lt;em&gt;really&lt;/em&gt; saving a user, next time we launch the test it could be failing because the user is already in the db.&lt;/p&gt;

&lt;p&gt;To handle all these scenarios, we will &lt;strong&gt;mock&lt;/strong&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; module. We will provide a fake implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; that will reply as we will, every time. This way, &lt;em&gt;we will be testing only app.js code&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;but-what-if-db-module-has-a-bug&quot;&gt;But… what if db module has a bug?&lt;/h2&gt;

&lt;p&gt;You &lt;strong&gt;MUST&lt;/strong&gt; test the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; module, too! However, it’s not a good practice to test the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; module by testing the &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;If you don’t test the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; module, and all of a sudden your test has a bug, how can you say where the bug is? Imagine this in a layer of 10-15 modules… you get the complexity.&lt;/p&gt;

&lt;p&gt;However, let me point out that &lt;strong&gt;unit testing alone is not the solution to all of your problems&lt;/strong&gt;. Unit testing can test that a single class will perform as specified, but another kind of testing (I call it “integration testing”) should be responsible to check that everything is wired correctly.&lt;/p&gt;

&lt;p&gt;Here is a famous gif about this concept:&lt;img src=&quot;/images/unit-testing-1.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-before-showing-the-code-let-me-introduce-to-you-rewire&quot;&gt;1. Before showing the code, let me introduce to you: rewire()&lt;/h2&gt;

&lt;p&gt;To test &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; we need &lt;a href=&quot;https://www.npmjs.com/package/rewire&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rewire&lt;/code&gt;&lt;/a&gt;, a nodejs module.&lt;/p&gt;

&lt;p&gt;To install:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;npm&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; i --save-dev rewire 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rewire()&lt;/code&gt; works like the &lt;code class=&quot;highlighter-rouge&quot;&gt;require()&lt;/code&gt; function, this mean that you &lt;em&gt;could&lt;/em&gt; use rewire for your applications, even if it does not make any sense. It is indeed very useful in tests.&lt;/p&gt;

&lt;p&gt;When you &lt;code class=&quot;highlighter-rouge&quot;&gt;rewire&lt;/code&gt; a module, the module is imported &lt;em&gt;but&lt;/em&gt; some new methods are added: these are &lt;code class=&quot;highlighter-rouge&quot;&gt;__get__()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;__set__()&lt;/code&gt;. Whith these two methods you can retrive any local variable instantiated locally.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rewire&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'rewire'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rewire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//like require but...&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__get__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'db'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// will return the db object! &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;rewire-has-a-problem-with-const&quot;&gt;Rewire has a problem with const&lt;/h3&gt;

&lt;p&gt;You might be tempted to do this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rewire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;saveUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__set__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'db'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//this will not work in this case!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; is declared as a &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;rewire&lt;/code&gt; cannot do the magic: &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; variables in javascript are not reassignable.&lt;/p&gt;

&lt;p&gt;However, even if the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; object is not reassignable, we can still modify its internals, as long they are declared as &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;. That’s &lt;strong&gt;why we will mock single functions and not the whole object&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;2-before-showing-the-code-let-me-introduce-to-you-expectcreatespy&quot;&gt;2. Before showing the code, let me introduce to you: expect.createSpy()&lt;/h2&gt;

&lt;p&gt;I have already talked about the &lt;a href=&quot;https://michelenasti.com/2017/03/27/become-a-test-expert-in-nodejs-with-these-tricks.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt;&lt;/a&gt; assertion library.&lt;/p&gt;

&lt;p&gt;The good thing is, &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt; has also a way to create mocks - that they call spies&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What is a &lt;em&gt;spy&lt;/em&gt;? it’s a function that can substitute the real implementation. It can be “trained” to return the value you want, to simulate errors, throw exceptions, etc.&lt;/p&gt;

&lt;p&gt;With spies, you can also check that the function has been called, with the right parameters.&lt;/p&gt;

&lt;h2 id=&quot;tldr---here-is-the-code&quot;&gt;TL;DR - Here is the CODE&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//file app.test.js &lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'expect'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rewire&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'rewire'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rewire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (1) &lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'App'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//mock&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__get__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'db'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// (2) &lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;saveUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createSpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (3) &lt;/span&gt;
 
  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'should call saveUser with user object'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'michele@example.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'123abc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleSignup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// (4) &lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;saveUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHaveBeenCalledWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; 
      &lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;   
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You should find familiar what happens at (1): we are importing the app module with &lt;code class=&quot;highlighter-rouge&quot;&gt;rewire&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;then, we are (2) using the &lt;code class=&quot;highlighter-rouge&quot;&gt;__get__()&lt;/code&gt; function to retrieve the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; object from the module. At (3) we are replacing the function &lt;code class=&quot;highlighter-rouge&quot;&gt;saveUser()&lt;/code&gt; with a spy, created by us.&lt;/p&gt;

&lt;p&gt;The test is created as always; we prepare some input parameters and pass them to &lt;code class=&quot;highlighter-rouge&quot;&gt;app.handleSignup()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At (4) we can check that the spy has been called for real with the function &lt;code class=&quot;highlighter-rouge&quot;&gt;toHaveBeenCalledWith&lt;/code&gt; and we can check also that the parameters are the same!&lt;/p&gt;

&lt;h2 id=&quot;theres-more&quot;&gt;There’s more…&lt;/h2&gt;
&lt;p&gt;But that’s enough for now! Testing is something I really like, because it can tell you instantly if you’re doing something wrong. The overall quality of a project is greatly improved when you test and know how to test.&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/04/07/fantastic-unit-tests-in-javascript-with-mocks.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>Fantastic Unit Tests in Javascript with Mocks</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" Fantastic Unit Tests in Javascript with Mocks ">
                          <figcaption>Fantastic Unit Tests in Javascript with Mocks</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-04-07 09:49:00 CEST">Fri, 07 Apr 2017 09:49:00 +0200</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Let’s start with the example. We have two files, one that is the main one called <code class="highlighter-rouge">app.js</code> that exports just one method, called <code class="highlighter-rouge">handleSignup()</code>:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>// file app.js
const db = require('./db.js');

module.exports.handleSignup = (email, password) =&gt; {
  // ...
  // save the user to the database
  db.saveUser({ email, password });
  // ...
};
</code></pre>
</div>

<p>This <code class="highlighter-rouge">app.js</code>, at some point, calls the <code class="highlighter-rouge">db.saveUser()</code> function. Let’s see the <code class="highlighter-rouge">db</code> module:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>// file db.js
module.exports.saveUser = user =&gt; {
  console.log('Saving the user...', user);
};
</code></pre>
</div>

<p>Nothing very special, it’s just a demo. Let’s go with the important question.</p>

<h2 id="how-do-we-unit-test-appjs">How do we unit-test app.js?</h2>

<p>For those not used to <strong>unit testing</strong>, it <strong>is a way of testing classes atomically</strong>. This means that app.js may depend on other classes, but we will not test these.</p>

<p>Let me be more specific. the <code class="highlighter-rouge">db</code> module could be really calling a database, this means that if the database connection is not working, the test would fail. OR, if the test is <em>really</em> saving a user, next time we launch the test it could be failing because the user is already in the db.</p>

<p>To handle all these scenarios, we will <strong>mock</strong> the <code class="highlighter-rouge">db</code> module. We will provide a fake implementation of <code class="highlighter-rouge">db</code> that will reply as we will, every time. This way, <em>we will be testing only app.js code</em>.</p>

<h2 id="but-what-if-db-module-has-a-bug">But… what if db module has a bug?</h2>

<p>You <strong>MUST</strong> test the <code class="highlighter-rouge">db</code> module, too! However, it’s not a good practice to test the <code class="highlighter-rouge">db</code> module by testing the <code class="highlighter-rouge">app</code> module.</p>

<p>If you don’t test the <code class="highlighter-rouge">db</code> module, and all of a sudden your test has a bug, how can you say where the bug is? Imagine this in a layer of 10-15 modules… you get the complexity.</p>

<p>However, let me point out that <strong>unit testing alone is not the solution to all of your problems</strong>. Unit testing can test that a single class will perform as specified, but another kind of testing (I call it “integration testing”) should be responsible to check that everything is wired correctly.</p>

<p>Here is a famous gif about this concept:<img src="/images/unit-testing-1.gif" alt="" /></p>

<h2 id="1-before-showing-the-code-let-me-introduce-to-you-rewire">1. Before showing the code, let me introduce to you: rewire()</h2>

<p>To test <code class="highlighter-rouge">app.js</code> we need <a href="https://www.npmjs.com/package/rewire"><code class="highlighter-rouge">rewire</code></a>, a nodejs module.</p>

<p>To install:</p>

<div class="language-console highlighter-rouge"><pre class="highlight"><code><span class="w">$ </span><span class="nc">npm</span><span class="kv"> i --save-dev rewire 
</span></code></pre>
</div>

<p><code class="highlighter-rouge">rewire()</code> works like the <code class="highlighter-rouge">require()</code> function, this mean that you <em>could</em> use rewire for your applications, even if it does not make any sense. It is indeed very useful in tests.</p>

<p>When you <code class="highlighter-rouge">rewire</code> a module, the module is imported <em>but</em> some new methods are added: these are <code class="highlighter-rouge">__get__()</code> and <code class="highlighter-rouge">__set__()</code>. Whith these two methods you can retrive any local variable instantiated locally.</p>

<p>Example:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kr">const</span> <span class="nx">rewire</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'rewire'</span><span class="p">);</span> 

<span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">rewire</span><span class="p">(</span><span class="s1">'app'</span><span class="p">);</span> <span class="c1">//like require but...</span>

<span class="kr">const</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">__get__</span><span class="p">(</span><span class="s1">'db'</span><span class="p">);</span> <span class="c1">// will return the db object! </span>
</code></pre>
</div>

<h3 id="rewire-has-a-problem-with-const">Rewire has a problem with const</h3>

<p>You might be tempted to do this:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">...</span>
<span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">rewire</span><span class="p">(</span><span class="s1">'app'</span><span class="p">);</span>

<span class="kr">const</span> <span class="nx">db</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="na">saveUser</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{...}</span>
<span class="p">}</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">__set__</span><span class="p">(</span><span class="s1">'db'</span><span class="p">,</span> <span class="nx">db</span><span class="p">);</span> <span class="c1">//this will not work in this case!</span>
</code></pre>
</div>

<p>Since <code class="highlighter-rouge">db</code> is declared as a <code class="highlighter-rouge">const</code> in <code class="highlighter-rouge">app</code>, <code class="highlighter-rouge">rewire</code> cannot do the magic: <code class="highlighter-rouge">const</code> variables in javascript are not reassignable.</p>

<p>However, even if the <code class="highlighter-rouge">db</code> object is not reassignable, we can still modify its internals, as long they are declared as <code class="highlighter-rouge">let</code> and <code class="highlighter-rouge">var</code>. That’s <strong>why we will mock single functions and not the whole object</strong>.</p>

<h2 id="2-before-showing-the-code-let-me-introduce-to-you-expectcreatespy">2. Before showing the code, let me introduce to you: expect.createSpy()</h2>

<p>I have already talked about the <a href="https://michelenasti.com/2017/03/27/become-a-test-expert-in-nodejs-with-these-tricks.html"><code class="highlighter-rouge">expect</code></a> assertion library.</p>

<p>The good thing is, <strong><code class="highlighter-rouge">expect</code> has also a way to create mocks - that they call spies</strong>.</p>

<p>What is a <em>spy</em>? it’s a function that can substitute the real implementation. It can be “trained” to return the value you want, to simulate errors, throw exceptions, etc.</p>

<p>With spies, you can also check that the function has been called, with the right parameters.</p>

<h2 id="tldr---here-is-the-code">TL;DR - Here is the CODE</h2>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="c1">//file app.test.js </span>
<span class="kr">const</span> <span class="nx">expect</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'expect'</span><span class="p">);</span>
<span class="kr">const</span> <span class="nx">rewire</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'rewire'</span><span class="p">);</span>

<span class="kd">let</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">rewire</span><span class="p">(</span><span class="s1">'./app'</span><span class="p">);</span> <span class="c1">// (1) </span>

<span class="nx">describe</span><span class="p">(</span><span class="s1">'App'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">//mock</span>
  <span class="kd">let</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">__get__</span><span class="p">(</span><span class="s1">'db'</span><span class="p">);</span>       <span class="c1">// (2) </span>
  <span class="nx">db</span><span class="p">.</span><span class="nx">saveUser</span> <span class="o">=</span> <span class="nx">expect</span><span class="p">.</span><span class="nx">createSpy</span><span class="p">();</span> <span class="c1">// (3) </span>
 
  <span class="nx">it</span><span class="p">(</span><span class="s1">'should call saveUser with user object'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">email</span> <span class="o">=</span> <span class="s1">'michele@example.com'</span><span class="p">;</span>
    <span class="kd">let</span> <span class="nx">password</span> <span class="o">=</span> <span class="s1">'123abc'</span><span class="p">;</span>

    <span class="nx">app</span><span class="p">.</span><span class="nx">handleSignup</span><span class="p">(</span><span class="nx">email</span><span class="p">,</span> <span class="nx">password</span><span class="p">);</span>

    <span class="c1">// (4) </span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">db</span><span class="p">.</span><span class="nx">saveUser</span><span class="p">).</span><span class="nx">toHaveBeenCalledWith</span><span class="p">({</span> 
      <span class="nx">email</span><span class="p">,</span>
      <span class="nx">password</span>
    <span class="p">});</span>   
  <span class="p">});</span>
<span class="p">});</span>

</code></pre>
</div>

<p>You should find familiar what happens at (1): we are importing the app module with <code class="highlighter-rouge">rewire</code>.</p>

<p>then, we are (2) using the <code class="highlighter-rouge">__get__()</code> function to retrieve the <code class="highlighter-rouge">db</code> object from the module. At (3) we are replacing the function <code class="highlighter-rouge">saveUser()</code> with a spy, created by us.</p>

<p>The test is created as always; we prepare some input parameters and pass them to <code class="highlighter-rouge">app.handleSignup()</code>.</p>

<p>At (4) we can check that the spy has been called for real with the function <code class="highlighter-rouge">toHaveBeenCalledWith</code> and we can check also that the parameters are the same!</p>

<h2 id="theres-more">There’s more…</h2>
<p>But that’s enough for now! Testing is something I really like, because it can tell you instantly if you’re doing something wrong. The overall quality of a project is greatly improved when you test and know how to test.</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>Become a test expert in NodeJS with these tricks</title>
        <link>https://michelenasti.com/2017/03/27/become-a-test-expert-in-nodejs-with-these-tricks.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/03/27/become-a-test-expert-in-nodejs-with-these-tricks.html</guid>
        <pubDate>Mon, 27 Mar 2017 12:55:00 +0200</pubDate>
        <author></author>
        
          <description>&lt;p&gt;After reading my first guide to 
&lt;a href=&quot;https://michelenasti.com/2017/03/23/node-js-testing-easy-with-mocha.html&quot;&gt;testing NodeJS with Mocha&lt;/a&gt; you might have grasped the fundamental concepts of NodeJS testing. However, &lt;strong&gt;real word code is usually tested with some other expedients&lt;/strong&gt; that you might know to be a better tester (and coder).&lt;/p&gt;

&lt;h2 id=&quot;using-an-assertion-library&quot;&gt;Using an assertion library&lt;/h2&gt;

&lt;p&gt;In my previous article I wrote how to check the test result: to set a test as failing, you throw a &lt;code class=&quot;highlighter-rouge&quot;&gt;new Error()&lt;/code&gt; object with the message to show.&lt;/p&gt;

&lt;p&gt;This is the naive approach; the default is to use an assertion library. These libraries will expose an API that is clearer and simpler to manage, and will let you test more conditions with less code. Under the hood, they will launch the &lt;code class=&quot;highlighter-rouge&quot;&gt;new Error()&lt;/code&gt; if the conditions are not respected.&lt;/p&gt;

&lt;p&gt;Let’s see one of these libraries. One of the most famous libraries is called 
&lt;a href=&quot;https://github.com/mjackson/expect&quot;&gt;&lt;code&gt;expect&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you use expect, you write assertions similarly to how you would say them, e.g. &quot;I expect this value to be equal to 3&quot; or &quot;I expect this array to contain 3&quot;. When you write assertions in this way, you don't need to remember the order of actual and expected arguments to functions like assert.equal, which helps you write better tests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s see an example. Here is the test for a &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; function, and the test is contained in file &lt;code class=&quot;highlighter-rouge&quot;&gt;utils.test.js&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//utils.test.js
const expect = require('expect');

const utils = require('./utils');

it('should add two numbers', () =&amp;gt; {
  let res = utils.add(33, 11);

  expect(res).toBe(44).toBeA('number');
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Easier to write, and to reason about. with &lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt; you can also check if objects have properties, etc. Have a look on their website to see all aviable methods.&lt;/p&gt;

&lt;h2 id=&quot;testing-async-code&quot;&gt;Testing async code&lt;/h2&gt;

&lt;p&gt;If you’re using NodeJS, or Javascript, you’re also probably using async functions. No matter if it’s in the form of promises or callbacks, stuff in JS happens async, and we must deal with it.&lt;/p&gt;

&lt;p&gt;Let’s prepare an example async function:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//utils.js
module.exports.asyncAdd = (a,b, callback) =&amp;gt; {
  setTimeout(() =&amp;gt; {
    callback(a+b);
  }, 1000);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;How do we test it? The first approach we might think would be to write the test like before:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//utils.test.js
it('should add two numbers', () =&amp;gt; {
  let res = utils.asyncAdd(33, 11, (res) =&amp;gt; {
  
    // will this work? 
    expect(res).toBe(44).toBeA('number'); 
  });
});

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you launch this example, &lt;em&gt;the test will pass, but for the &lt;strong&gt;wrong reason&lt;/strong&gt;&lt;/em&gt;. Infact, Mocha will not wait the result callback an will end the test instantly. Try to break the test or the function… Mocha will say that everything is ok. That’s not good.&lt;/p&gt;

&lt;p&gt;How can we fix this? Mocha has a super-simple solution, just add a &lt;code class=&quot;highlighter-rouge&quot;&gt;done&lt;/code&gt; argument to the test callback. When &lt;code class=&quot;highlighter-rouge&quot;&gt;done&lt;/code&gt; is present, Mocha will not end the test before you call the &lt;code class=&quot;highlighter-rouge&quot;&gt;done()&lt;/code&gt; function. Let’s try:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//utils.test.js
it('should add two numbers', (done) =&amp;gt; {
  let res = utils.asyncAdd(33, 11, (res) =&amp;gt; {
  
    expect(res).toBe(44).toBeA('number'); 
    done();
  });
});

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, if you try to break the test or the function, you’ll see that Mocha will fail. Exactely what we want.&lt;/p&gt;

&lt;h2 id=&quot;testing-an-express-application&quot;&gt;Testing an Express application&lt;/h2&gt;

&lt;p&gt;It’s very difficult for the random developer to write a NodeJS app without using &lt;a href=&quot;https://expressjs.com/it/&quot;&gt;Express&lt;/a&gt;, a framework for web applicatons that allows you to write REST endpoints easily.&lt;/p&gt;

&lt;p&gt;How do I test an express application?&lt;/p&gt;

&lt;p&gt;the creators of Express have come in help by creating another library called &lt;a href=&quot;https://github.com/visionmedia/supertest&quot;&gt;supertest&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt; HTTP assertions made easy via superagent.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s write a simple http application with Express:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//file server.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'express'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Page not found'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hello baby'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (1)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This simple express app will return a &lt;code class=&quot;highlighter-rouge&quot;&gt;404&lt;/code&gt; error with a json payload, everytime you navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:3000/&lt;/code&gt;. Why? Because there’s nothing to see, obviously! :p&lt;/p&gt;

&lt;p&gt;The only point worth of noting is that we simply export the app, as every other node module. Adding this line at (1) does not break anything, and makes testing possible.&lt;/p&gt;

&lt;p&gt;To test this app, let’s write the test using &lt;em&gt;supertest&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//server.test.js&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'supertest'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'expect'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./server'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'should return hello world response'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// (1)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// (2)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//supertest expect!!&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// (3)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// (4)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//expect library! &lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toInclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Page not found'&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// (5)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s interesting. At (1) we are importing the express app and using &lt;code class=&quot;highlighter-rouge&quot;&gt;supertest&lt;/code&gt; to wrap it. Then we perform a &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt; request over &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; (2) and start expecting things about the result. Unfortunately, supertest has another &lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt; method that is not related to the one in the &lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt; library.&lt;/p&gt;

&lt;p&gt;By the way, with supertest we can make assumptions about the status code (3), and if we want to assert something about the body of the request, we can do like in (4): when using a callback we can do everything over the &lt;code class=&quot;highlighter-rouge&quot;&gt;res&lt;/code&gt; variable, and infact we are using the &lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt; library to see if the body includes the &lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Since this Mocha test is async, we need a way to tell mocha that the test has ended. In (5) we see that supertest is already aware of mocha and will stop the test by passing the &lt;code class=&quot;highlighter-rouge&quot;&gt;done&lt;/code&gt; function to &lt;code class=&quot;highlighter-rouge&quot;&gt;end()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;For a novice, the problem of testing Node apps is that there are many libraries the same thing. For an expert, this becomes an advantage: you can choose the best for your purposes (but you must know them in advance).&lt;/p&gt;

&lt;p&gt;By the way, testing is important. Test everything is testable. Otherwise, maintaining javascript code can only be a mess.&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/03/27/become-a-test-expert-in-nodejs-with-these-tricks.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>Become a test expert in NodeJS with these tricks</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" Become a test expert in NodeJS with these tricks ">
                          <figcaption>Become a test expert in NodeJS with these tricks</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-03-27 12:55:00 CEST">Mon, 27 Mar 2017 12:55:00 +0200</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>After reading my first guide to 
<a href="https://michelenasti.com/2017/03/23/node-js-testing-easy-with-mocha.html">testing NodeJS with Mocha</a> you might have grasped the fundamental concepts of NodeJS testing. However, <strong>real word code is usually tested with some other expedients</strong> that you might know to be a better tester (and coder).</p>

<h2 id="using-an-assertion-library">Using an assertion library</h2>

<p>In my previous article I wrote how to check the test result: to set a test as failing, you throw a <code class="highlighter-rouge">new Error()</code> object with the message to show.</p>

<p>This is the naive approach; the default is to use an assertion library. These libraries will expose an API that is clearer and simpler to manage, and will let you test more conditions with less code. Under the hood, they will launch the <code class="highlighter-rouge">new Error()</code> if the conditions are not respected.</p>

<p>Let’s see one of these libraries. One of the most famous libraries is called 
<a href="https://github.com/mjackson/expect"><code>expect</code></a>:</p>
<blockquote>
<p>When you use expect, you write assertions similarly to how you would say them, e.g. "I expect this value to be equal to 3" or "I expect this array to contain 3". When you write assertions in this way, you don't need to remember the order of actual and expected arguments to functions like assert.equal, which helps you write better tests.</p>
</blockquote>

<p>Let’s see an example. Here is the test for a <code class="highlighter-rouge">add</code> function, and the test is contained in file <code class="highlighter-rouge">utils.test.js</code>:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>//utils.test.js
const expect = require('expect');

const utils = require('./utils');

it('should add two numbers', () =&gt; {
  let res = utils.add(33, 11);

  expect(res).toBe(44).toBeA('number');
});
</code></pre>
</div>

<p>Easier to write, and to reason about. with <code class="highlighter-rouge">expect</code> you can also check if objects have properties, etc. Have a look on their website to see all aviable methods.</p>

<h2 id="testing-async-code">Testing async code</h2>

<p>If you’re using NodeJS, or Javascript, you’re also probably using async functions. No matter if it’s in the form of promises or callbacks, stuff in JS happens async, and we must deal with it.</p>

<p>Let’s prepare an example async function:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>//utils.js
module.exports.asyncAdd = (a,b, callback) =&gt; {
  setTimeout(() =&gt; {
    callback(a+b);
  }, 1000);
}

</code></pre>
</div>

<p>How do we test it? The first approach we might think would be to write the test like before:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>//utils.test.js
it('should add two numbers', () =&gt; {
  let res = utils.asyncAdd(33, 11, (res) =&gt; {
  
    // will this work? 
    expect(res).toBe(44).toBeA('number'); 
  });
});

</code></pre>
</div>

<p>If you launch this example, <em>the test will pass, but for the <strong>wrong reason</strong></em>. Infact, Mocha will not wait the result callback an will end the test instantly. Try to break the test or the function… Mocha will say that everything is ok. That’s not good.</p>

<p>How can we fix this? Mocha has a super-simple solution, just add a <code class="highlighter-rouge">done</code> argument to the test callback. When <code class="highlighter-rouge">done</code> is present, Mocha will not end the test before you call the <code class="highlighter-rouge">done()</code> function. Let’s try:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>//utils.test.js
it('should add two numbers', (done) =&gt; {
  let res = utils.asyncAdd(33, 11, (res) =&gt; {
  
    expect(res).toBe(44).toBeA('number'); 
    done();
  });
});

</code></pre>
</div>

<p>Now, if you try to break the test or the function, you’ll see that Mocha will fail. Exactely what we want.</p>

<h2 id="testing-an-express-application">Testing an Express application</h2>

<p>It’s very difficult for the random developer to write a NodeJS app without using <a href="https://expressjs.com/it/">Express</a>, a framework for web applicatons that allows you to write REST endpoints easily.</p>

<p>How do I test an express application?</p>

<p>the creators of Express have come in help by creating another library called <a href="https://github.com/visionmedia/supertest">supertest</a>:</p>

<blockquote>
  <p> HTTP assertions made easy via superagent.</p>
</blockquote>

<p>Let’s write a simple http application with Express:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="c1">//file server.js</span>
<span class="kr">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'express'</span><span class="p">);</span>

<span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'/'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">404</span><span class="p">).</span><span class="nx">send</span><span class="p">({</span>
    <span class="na">error</span><span class="p">:</span> <span class="s1">'Page not found'</span><span class="p">,</span>
    <span class="na">name</span><span class="p">:</span> <span class="s1">'hello baby'</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">app</span> <span class="o">=</span> <span class="nx">app</span><span class="p">;</span> <span class="c1">// (1)</span>
</code></pre>
</div>

<p>This simple express app will return a <code class="highlighter-rouge">404</code> error with a json payload, everytime you navigate to <code class="highlighter-rouge">http://localhost:3000/</code>. Why? Because there’s nothing to see, obviously! :p</p>

<p>The only point worth of noting is that we simply export the app, as every other node module. Adding this line at (1) does not break anything, and makes testing possible.</p>

<p>To test this app, let’s write the test using <em>supertest</em>:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="c1">//server.test.js</span>

<span class="kr">const</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'supertest'</span><span class="p">);</span>
<span class="kr">const</span> <span class="nx">expect</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'expect'</span><span class="p">);</span>

<span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./server'</span><span class="p">);</span>

<span class="nx">it</span><span class="p">(</span><span class="s1">'should return hello world response'</span><span class="p">,</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">request</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>          <span class="c1">// (1)</span>
    <span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'/'</span><span class="p">)</span>           <span class="c1">// (2)</span>
    <span class="c1">//supertest expect!!</span>
    <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>        <span class="c1">// (3)</span>
    <span class="p">.</span><span class="nx">expect</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>  <span class="c1">// (4)</span>
      <span class="c1">//expect library! </span>
      <span class="nx">expect</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">toInclude</span><span class="p">({</span>
        <span class="na">error</span><span class="p">:</span> <span class="s1">'Page not found'</span>
      <span class="p">})</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">done</span><span class="p">);</span>         <span class="c1">// (5)</span>
<span class="p">});</span>
</code></pre>
</div>

<p>That’s interesting. At (1) we are importing the express app and using <code class="highlighter-rouge">supertest</code> to wrap it. Then we perform a <code class="highlighter-rouge">get</code> request over <code class="highlighter-rouge">/</code> (2) and start expecting things about the result. Unfortunately, supertest has another <code class="highlighter-rouge">expect</code> method that is not related to the one in the <code class="highlighter-rouge">expect</code> library.</p>

<p>By the way, with supertest we can make assumptions about the status code (3), and if we want to assert something about the body of the request, we can do like in (4): when using a callback we can do everything over the <code class="highlighter-rouge">res</code> variable, and infact we are using the <code class="highlighter-rouge">expect</code> library to see if the body includes the <code class="highlighter-rouge">error</code> property.</p>

<p>Since this Mocha test is async, we need a way to tell mocha that the test has ended. In (5) we see that supertest is already aware of mocha and will stop the test by passing the <code class="highlighter-rouge">done</code> function to <code class="highlighter-rouge">end()</code>.</p>

<h2 id="conclusions">Conclusions</h2>

<p>For a novice, the problem of testing Node apps is that there are many libraries the same thing. For an expert, this becomes an advantage: you can choose the best for your purposes (but you must know them in advance).</p>

<p>By the way, testing is important. Test everything is testable. Otherwise, maintaining javascript code can only be a mess.</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>Easy testing of NodeJS applications with Mocha</title>
        <link>https://michelenasti.com/2017/03/23/node-js-testing-easy-with-mocha.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/03/23/node-js-testing-easy-with-mocha.html</guid>
        <pubDate>Thu, 23 Mar 2017 18:13:00 +0100</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Testing in Javascript has become an immensely popular argument, but still there’s a lot of people that has not clear how to do it effectively. &lt;a href=&quot;/2016/08/my-very-personal-javascript-fatigue/&quot;&gt;I was one of these&lt;/a&gt;. There are many troubles that a young developer has to overcome in order to master Javascript testing. In this article, I’m going to explain Javascript testing with Mocha, a powerful library.&lt;/p&gt;

&lt;h2 id=&quot;why-testing-in-javascript&quot;&gt;Why testing in Javascript&lt;/h2&gt;

&lt;p&gt;An easy example. You write a function that takes only one argument, and use it extensively. After some days, you modify this function to take two arguments.&lt;/p&gt;

&lt;p&gt;Obviously you try to find every place where this function is called and add the missing parameter. Since the scripting nature of the language, how can you tell that this modification did not break anything? How to discover rapidly what to fix? Are users our only testers?&lt;/p&gt;

&lt;h2 id=&quot;setup-the-example&quot;&gt;Setup the example&lt;/h2&gt;

&lt;p&gt;Let’s write a simple Node test file. Let’s call it &lt;code class=&quot;highlighter-rouge&quot;&gt;utils.js&lt;/code&gt;, a file where we put all the functions that do not fit in a specific module.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module.exports.add = (a,b) =&amp;amp;gt;  a + b;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s it! Let’s test this function. Is our sum function really doing its job?&lt;/p&gt;

&lt;h2 id=&quot;setup-the-test&quot;&gt;Setup the test&lt;/h2&gt;

&lt;p&gt;First, let’s install 
&lt;a href=&quot;https://mochajs.org&quot;&gt;&lt;strong&gt;Mocha&lt;/strong&gt;&lt;/a&gt;. This is easy as launching&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install --save-dev mocha 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s modify our &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; (you did run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt;, didn’t you?) to add a new task:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;scripts&quot;: {
    ... 
    &quot;test&quot;: &quot;mocha **/*.test.js&quot;
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Mocha will be installed as a &lt;em&gt;development dependency&lt;/em&gt;, this means that it is not necessary to run our code. Some deployment systems (like Heroku) will not download these dev dependencies.&lt;/p&gt;

&lt;p&gt;As you can see, the &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; command will execute all files in every directory ending with &lt;code class=&quot;highlighter-rouge&quot;&gt;.test.js&lt;/code&gt;. This is incredibly fast.&lt;/p&gt;

&lt;p&gt;Let’s create in the very same directory where we put &lt;code class=&quot;highlighter-rouge&quot;&gt;utils.js&lt;/code&gt;, another file called &lt;code class=&quot;highlighter-rouge&quot;&gt;utils.test.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is the test code:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const utils = require('./utils'); //(1)

it('should add two numbers', () =&amp;amp;gt; {   //(2)
  let res = utils.add(33,11);
  if (res !== 44) {
     throw new Error(`Expected: 44, but got ${res}`); //(3)
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And now you can simply run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm test&lt;/code&gt;. you should see an out like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm test

&amp;amp;gt; node-tests@1.0.0 test /Users/michelenasti/Doc
uments/node-tests
&amp;amp;gt; mocha **/*.test.js



  ✓ should add two numbers

  1 passing (13ms)

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;whats-going-on&quot;&gt;What’s going on&lt;/h2&gt;

&lt;p&gt;Our tests are run directly by Mocha, that’s why we don’t import the library in this function.&lt;/p&gt;

&lt;p&gt;Mocha provides us a function called &lt;code class=&quot;highlighter-rouge&quot;&gt;it()&lt;/code&gt;. You might notice this function at (1). It takes two parameters: a description of the test, and a function with the code to execute.&lt;/p&gt;

&lt;p&gt;In the JS community tests are usually written in a &lt;em&gt;Behaviour Driven Development&lt;/em&gt; paradygm, this is a complex notion, for now let’s just say that test description starts with “&lt;em&gt;should …&lt;/em&gt;”. I’ll write more in the future :)&lt;/p&gt;

&lt;p&gt;The second argument passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;it()&lt;/code&gt; is a function with the actual test code. Here we call the function under test, take the result and check the correctness.&lt;/p&gt;

&lt;p&gt;How Mocha decides if a test has passed or not? If no errors are thrown in our test code, then the test is marked as passed. On the other side, if an &lt;code class=&quot;highlighter-rouge&quot;&gt;Error()&lt;/code&gt; object is thrown, the test will stop and the message of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Error&lt;/code&gt; is printed to the terminal.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise for you: modify &lt;code class=&quot;highlighter-rouge&quot;&gt;utils.js&lt;/code&gt; to let the test fail :)&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;do-js-developers-throw-errors-to-test-their-functions&quot;&gt;Do JS developers throw errors to test their functions?&lt;/h2&gt;

&lt;p&gt;No, in reality JS developers NEVER throw Errors. Usually in JS we use some other libraries to &lt;em&gt;assert&lt;/em&gt; some properties on the result, using functions that are more expressive. We will talk about this aspect in another post. However, I think that seeing how tests work without assertion libraries is &lt;em&gt;fundamental&lt;/em&gt; to use such libraries.&lt;/p&gt;

&lt;h2 id=&quot;last-but-not-least&quot;&gt;Last but not least&lt;/h2&gt;

&lt;p&gt;Do you want your test to run automatically everytime you change some file? Of course you can, mixing some code coming from a previous post (&lt;a href=&quot;https://michelenasti.com/2017/01/31/develop-faster-in-nodejs-with-nodemon.html&quot;&gt;nodemon&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; add the script &lt;code class=&quot;highlighter-rouge&quot;&gt;test-watch&lt;/code&gt;…&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mocha **/*.test.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&quot;test-watch&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;nodemon --exec \&quot;npm test\&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Happy testing!&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/03/23/node-js-testing-easy-with-mocha.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>Easy testing of NodeJS applications with Mocha</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" Easy testing of NodeJS applications with Mocha ">
                          <figcaption>Easy testing of NodeJS applications with Mocha</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-03-23 18:13:00 CET">Thu, 23 Mar 2017 18:13:00 +0100</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Testing in Javascript has become an immensely popular argument, but still there’s a lot of people that has not clear how to do it effectively. <a href="/2016/08/my-very-personal-javascript-fatigue/">I was one of these</a>. There are many troubles that a young developer has to overcome in order to master Javascript testing. In this article, I’m going to explain Javascript testing with Mocha, a powerful library.</p>

<h2 id="why-testing-in-javascript">Why testing in Javascript</h2>

<p>An easy example. You write a function that takes only one argument, and use it extensively. After some days, you modify this function to take two arguments.</p>

<p>Obviously you try to find every place where this function is called and add the missing parameter. Since the scripting nature of the language, how can you tell that this modification did not break anything? How to discover rapidly what to fix? Are users our only testers?</p>

<h2 id="setup-the-example">Setup the example</h2>

<p>Let’s write a simple Node test file. Let’s call it <code class="highlighter-rouge">utils.js</code>, a file where we put all the functions that do not fit in a specific module.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>module.exports.add = (a,b) =&amp;gt;  a + b;
</code></pre>
</div>

<p>That’s it! Let’s test this function. Is our sum function really doing its job?</p>

<h2 id="setup-the-test">Setup the test</h2>

<p>First, let’s install 
<a href="https://mochajs.org"><strong>Mocha</strong></a>. This is easy as launching</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ npm install --save-dev mocha 
</code></pre>
</div>

<p>Let’s modify our <code class="highlighter-rouge">package.json</code> (you did run <code class="highlighter-rouge">npm init</code>, didn’t you?) to add a new task:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>"scripts": {
    ... 
    "test": "mocha **/*.test.js"
  },
</code></pre>
</div>

<p>Mocha will be installed as a <em>development dependency</em>, this means that it is not necessary to run our code. Some deployment systems (like Heroku) will not download these dev dependencies.</p>

<p>As you can see, the <code class="highlighter-rouge">test</code> command will execute all files in every directory ending with <code class="highlighter-rouge">.test.js</code>. This is incredibly fast.</p>

<p>Let’s create in the very same directory where we put <code class="highlighter-rouge">utils.js</code>, another file called <code class="highlighter-rouge">utils.test.js</code>.</p>

<p>Here is the test code:</p>
<div class="highlighter-rouge"><pre class="highlight"><code>const utils = require('./utils'); //(1)

it('should add two numbers', () =&amp;gt; {   //(2)
  let res = utils.add(33,11);
  if (res !== 44) {
     throw new Error(`Expected: 44, but got ${res}`); //(3)
  }
});
</code></pre>
</div>

<p>And now you can simply run <code class="highlighter-rouge">npm test</code>. you should see an out like this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ npm test

&amp;gt; node-tests@1.0.0 test /Users/michelenasti/Doc
uments/node-tests
&amp;gt; mocha **/*.test.js



  ✓ should add two numbers

  1 passing (13ms)

</code></pre>
</div>

<h2 id="whats-going-on">What’s going on</h2>

<p>Our tests are run directly by Mocha, that’s why we don’t import the library in this function.</p>

<p>Mocha provides us a function called <code class="highlighter-rouge">it()</code>. You might notice this function at (1). It takes two parameters: a description of the test, and a function with the code to execute.</p>

<p>In the JS community tests are usually written in a <em>Behaviour Driven Development</em> paradygm, this is a complex notion, for now let’s just say that test description starts with “<em>should …</em>”. I’ll write more in the future :)</p>

<p>The second argument passed to <code class="highlighter-rouge">it()</code> is a function with the actual test code. Here we call the function under test, take the result and check the correctness.</p>

<p>How Mocha decides if a test has passed or not? If no errors are thrown in our test code, then the test is marked as passed. On the other side, if an <code class="highlighter-rouge">Error()</code> object is thrown, the test will stop and the message of the <code class="highlighter-rouge">Error</code> is printed to the terminal.</p>

<p><em>Exercise for you: modify <code class="highlighter-rouge">utils.js</code> to let the test fail :)</em></p>

<h2 id="do-js-developers-throw-errors-to-test-their-functions">Do JS developers throw errors to test their functions?</h2>

<p>No, in reality JS developers NEVER throw Errors. Usually in JS we use some other libraries to <em>assert</em> some properties on the result, using functions that are more expressive. We will talk about this aspect in another post. However, I think that seeing how tests work without assertion libraries is <em>fundamental</em> to use such libraries.</p>

<h2 id="last-but-not-least">Last but not least</h2>

<p>Do you want your test to run automatically everytime you change some file? Of course you can, mixing some code coming from a previous post (<a href="https://michelenasti.com/2017/01/31/develop-faster-in-nodejs-with-nodemon.html">nodemon</a>).</p>

<p>In <code class="highlighter-rouge">package.json</code> add the script <code class="highlighter-rouge">test-watch</code>…</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="s2">"scripts"</span><span class="err">:</span> <span class="p">{</span>
   <span class="s2">"test"</span><span class="err">:</span> <span class="s2">"mocha **/*.test.js"</span><span class="p">,</span>
   <span class="s2">"test-watch"</span><span class="err">:</span> <span class="s2">"nodemon --exec \"npm test\""</span>
  <span class="p">},</span>
</code></pre>
</div>

<p>Happy testing!</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>L'Inglese tra italiani, a lavoro, è una scelta sbagliata</title>
        <link>https://michelenasti.com/2017/03/20/l-inglese-tra-italiani-a-lavoro-e-una-scelta-sbagliata.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/03/20/l-inglese-tra-italiani-a-lavoro-e-una-scelta-sbagliata.html</guid>
        <pubDate>Mon, 20 Mar 2017 10:56:01 +0100</pubDate>
        <author></author>
        
          <description>&lt;p&gt;C’è un trend che ogni tanto ritorna, ossia quello di usare l’inglese come lingua ufficiale durante l’orario di lavoro. Con colleghi italiani. In un ufficio italiano.&lt;/p&gt;

&lt;p&gt;La prima volta che ho sentito di questa pratica era durante la mia prima esperienza lavorativa; realizzando un software per un’azienda inglese, una grande parte delle specifiche arrivavano in quella lingua (giustamente!) e i nostri Business Analyst dovevano interfacciarsi continuamente con loro per documentare il software. Da qui, la scelta del team di analisti di parlare solo in inglese, tra di loro, per un giorno a settimana.&lt;/p&gt;

&lt;p&gt;Ora che lavoro da remoto, e interazione “sincrona” con i colleghi è molto scarsa, per uno specifico progetto è stato concordato di comunicare (in chat!) solo ed esclusivamente in inglese.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pexels-photo-119689%20(1).jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;it’s time for a cup of tea!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Chi vi scrive ha un inglese decente, complice il papà professore di Inglese che si è sbattuto per insegnarglielo fin da piccolo. Ovvio che non sono madrelingua ma non faccio pena, anzi mi sento tranquillamente a mio agio a parlare il mio fantastico &lt;em&gt;English&lt;/em&gt; con accento napoletano.&lt;/p&gt;

&lt;p&gt;Ebbene, &lt;strong&gt;trovo questa idea di sforzarsi a parlare inglese, tra italiani, una cagata pazzesca.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;i-tipi-di-comunicazione&quot;&gt;I tipi di comunicazione&lt;/h2&gt;

&lt;p&gt;Faccio solo un rapido e semplice excursus sul tipo di comunicazioni possibili in un ambiente di lavoro:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Comunicazione Sincrona&lt;/strong&gt; - è quel tipo di comunicazione che prevede due o più persone impegnate nello stesso momento. Esempi: la classica chiacchierata face-2-face, la telefonata, una videocall (skype...) etc. Qui è importante l'immediatezza e la chiarezza dei concetti espressi.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Comunicazione Asincrona&lt;/strong&gt; - Le comunicazioni che non prevedono una risposta immediata tra gli interlocutori. Tra questi tipi di comunicazione ci sono chat, mail, blog post, commenti a un wiki, documentazione, documenti word... Qui invece è desiderabile ottenere una comunicazione non ambigua e chiara anche a distanza di mesi.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aspettarsi una risposta istantanea a una chat è da stupidi, così come vi sembrerebbe piuttosto strano se un interlocutore fisico (con cui state conversando al distributore) smetta di rispondervi all’improvviso.&lt;/p&gt;

&lt;p&gt;Bene, avete appena completato il primo corso base di comunicazione aziendale :)&lt;/p&gt;

&lt;h2 id=&quot;perché-parlare-in-inglese-tra-italiani-è-una-cagata-pazzesca&quot;&gt;Perché parlare in inglese tra italiani è una cagata pazzesca&lt;/h2&gt;

&lt;p&gt;Ho sentito molti motivi per cui le aziende vogliono introdurre l’inglese aggressivo tra i propri dipendenti. Smontiamoli uno ad uno.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&quot;Così possiamo attrarre talenti stranieri&quot;.&lt;/strong&gt;&amp;nbsp;Cazzata. I talenti stranieri non vengono perché in Italia si parla inglese, anzi si aspettano che con loro parliate in inglese (che li avete chiamati a fare?). Per attrarre talenti stranieri servono &lt;strong&gt;idee sfidanti&lt;/strong&gt;, &lt;strong&gt;stipendi alti&lt;/strong&gt;, e un&amp;nbsp;&lt;strong&gt;ecosistema dinamico.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&quot;Così i dipendenti migliorano l'inglese&quot;.&lt;/strong&gt; Mi dispiace davvero che qualcuno pensi che, se due persone che non conoscono l'inglese iniziano improvvisamente a parlarlo (sotto tortura), poi lo imparano. Anche questa è una &lt;em&gt;cazzata&lt;/em&gt;. Se volete imparare l'inglese esiste una sola strada: un bel corso di lingue in cui si parla molto (e in cui la grammatica non è trascurata).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&quot;Così ci sentiamo più internazionali&quot;&lt;/strong&gt;. Equivale a misurarsi il pene col righello senza mai confrontare le misure con gli altri. L'unica metrica che dovrebbe interessarvi è il FATTURATO.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;Aggiungo, per completezza, che sul luogo di lavoro è importante che la comunicazione sia &lt;strong&gt;efficace, semplice e chiara&lt;/strong&gt;. &lt;em&gt;Ogni sovrastruttura, impedimento, legaccio, costrizione finirà col logorare il vostro lavoro.&lt;/em&gt; Io ad esempio non sopporto quando devo parlare con qualcuno e mi si risponde “mandami una mail che sono SEMPRE impegnato” (non riesci neanche a trovare 10 minuti per me?). Anche questo è un esempio di costrizione che non migliora il problem solving. &lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;lestremo-opposto-only-italian-please&quot;&gt;L’estremo opposto: only Italian, please&lt;/h2&gt;

&lt;p&gt;Siccome sono un programmatore (e se siete su questa pagina dovreste averlo intuito) posso già dirvi che il 99% dei libri su cui ho studiato, gli articoli on line che ho letto (e scritto) , le guide tecniche e i siti delle aziende più importanti sono in inglese.&lt;/p&gt;

&lt;p&gt;Questo vuol dire sostanzialmente due cose:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;La documentazione dei vostri software e dei vostri processi di business non può essere in italiano&lt;/strong&gt;. Anche se oggi siete tutti italiani sul progetto, un bel giorno potreste trovarvi ad assumere degli stranieri, o delocalizzare lo sviluppo in qualche paese asiatico, e l’unico modo che avete per comunicare con loro sarà l’inglese. Siate future-proof e usate l’inglese come fa il resto del mondo.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Il vostro codice sorgente deve essere in inglese.&lt;/strong&gt; Il motivo è lo stesso del punto precedente, con l’aggravante che &lt;code class=&quot;highlighter-rouge&quot;&gt;checkIfCodiceFiscaleIsValid()&lt;/code&gt; non si può sentire.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E’ importante dunque che chi voglia lavorare in questo mondo debba per lo meno saper leggere e scrivere un Inglese decente.&lt;/p&gt;

&lt;h2 id=&quot;quando-è-giusto-parlare-inglese-o-qualsiasi-altra-lingua-straniera&quot;&gt;Quando è giusto parlare inglese (o qualsiasi altra lingua straniera)&lt;/h2&gt;

&lt;p&gt;Quando nella vostra conversazione sincrona uno dei partecipanti non capisce l’italiano. A quel punto si sceglie una lingua compresa da tutti e la si usa.&lt;/p&gt;

&lt;h2 id=&quot;implicazioni-filosofiche-di-questa-scelta&quot;&gt;Implicazioni filosofiche di questa scelta&lt;/h2&gt;

&lt;p&gt;Siamo costretti a restare confinati nella nostra italianità? Non avremo mai accesso ai “talenti stranieri”?&lt;/p&gt;

&lt;p&gt;Se la tua azienda è una s.r.l., non puoi certo definirla L.T.D. :)&lt;/p&gt;

&lt;p&gt;Un altra conseguenza è che non è la lingua che si parla a rendere &lt;em&gt;grande&lt;/em&gt; un workplace.&lt;/p&gt;

&lt;p&gt;Infine: meglio un ottimo performer con un inglese zoppicante, o un  inglese madrelingua che lavora così così?&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/03/20/l-inglese-tra-italiani-a-lavoro-e-una-scelta-sbagliata.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>L'Inglese tra italiani, a lavoro, è una scelta sbagliata</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" L'Inglese tra italiani, a lavoro, è una scelta sbagliata ">
                          <figcaption>L'Inglese tra italiani, a lavoro, è una scelta sbagliata</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-03-20 10:56:01 CET">Mon, 20 Mar 2017 10:56:01 +0100</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>C’è un trend che ogni tanto ritorna, ossia quello di usare l’inglese come lingua ufficiale durante l’orario di lavoro. Con colleghi italiani. In un ufficio italiano.</p>

<p>La prima volta che ho sentito di questa pratica era durante la mia prima esperienza lavorativa; realizzando un software per un’azienda inglese, una grande parte delle specifiche arrivavano in quella lingua (giustamente!) e i nostri Business Analyst dovevano interfacciarsi continuamente con loro per documentare il software. Da qui, la scelta del team di analisti di parlare solo in inglese, tra di loro, per un giorno a settimana.</p>

<p>Ora che lavoro da remoto, e interazione “sincrona” con i colleghi è molto scarsa, per uno specifico progetto è stato concordato di comunicare (in chat!) solo ed esclusivamente in inglese.</p>

<p><img src="/images/pexels-photo-119689%20(1).jpeg" alt="" /></p>

<p><em>it’s time for a cup of tea!</em></p>

<p>Chi vi scrive ha un inglese decente, complice il papà professore di Inglese che si è sbattuto per insegnarglielo fin da piccolo. Ovvio che non sono madrelingua ma non faccio pena, anzi mi sento tranquillamente a mio agio a parlare il mio fantastico <em>English</em> con accento napoletano.</p>

<p>Ebbene, <strong>trovo questa idea di sforzarsi a parlare inglese, tra italiani, una cagata pazzesca.</strong></p>

<h2 id="i-tipi-di-comunicazione">I tipi di comunicazione</h2>

<p>Faccio solo un rapido e semplice excursus sul tipo di comunicazioni possibili in un ambiente di lavoro:</p>
<ul>
  <li>
    <p><strong>Comunicazione Sincrona</strong> - è quel tipo di comunicazione che prevede due o più persone impegnate nello stesso momento. Esempi: la classica chiacchierata face-2-face, la telefonata, una videocall (skype...) etc. Qui è importante l'immediatezza e la chiarezza dei concetti espressi.</p>
  </li>
  <li>
    <p><strong>Comunicazione Asincrona</strong> - Le comunicazioni che non prevedono una risposta immediata tra gli interlocutori. Tra questi tipi di comunicazione ci sono chat, mail, blog post, commenti a un wiki, documentazione, documenti word... Qui invece è desiderabile ottenere una comunicazione non ambigua e chiara anche a distanza di mesi.</p>
  </li>
</ul>

<p>Aspettarsi una risposta istantanea a una chat è da stupidi, così come vi sembrerebbe piuttosto strano se un interlocutore fisico (con cui state conversando al distributore) smetta di rispondervi all’improvviso.</p>

<p>Bene, avete appena completato il primo corso base di comunicazione aziendale :)</p>

<h2 id="perché-parlare-in-inglese-tra-italiani-è-una-cagata-pazzesca">Perché parlare in inglese tra italiani è una cagata pazzesca</h2>

<p>Ho sentito molti motivi per cui le aziende vogliono introdurre l’inglese aggressivo tra i propri dipendenti. Smontiamoli uno ad uno.</p>
<ul>
  <li>
    <p><strong>"Così possiamo attrarre talenti stranieri".</strong>&nbsp;Cazzata. I talenti stranieri non vengono perché in Italia si parla inglese, anzi si aspettano che con loro parliate in inglese (che li avete chiamati a fare?). Per attrarre talenti stranieri servono <strong>idee sfidanti</strong>, <strong>stipendi alti</strong>, e un&nbsp;<strong>ecosistema dinamico.</strong></p>
  </li>
  <li>
    <p><strong>"Così i dipendenti migliorano l'inglese".</strong> Mi dispiace davvero che qualcuno pensi che, se due persone che non conoscono l'inglese iniziano improvvisamente a parlarlo (sotto tortura), poi lo imparano. Anche questa è una <em>cazzata</em>. Se volete imparare l'inglese esiste una sola strada: un bel corso di lingue in cui si parla molto (e in cui la grammatica non è trascurata).</p>
  </li>
  <li>
    <p><strong>"Così ci sentiamo più internazionali"</strong>. Equivale a misurarsi il pene col righello senza mai confrontare le misure con gli altri. L'unica metrica che dovrebbe interessarvi è il FATTURATO.</p>
  </li>
</ul>

<p><span style="font-size: 18px;">Aggiungo, per completezza, che sul luogo di lavoro è importante che la comunicazione sia <strong>efficace, semplice e chiara</strong>. <em>Ogni sovrastruttura, impedimento, legaccio, costrizione finirà col logorare il vostro lavoro.</em> Io ad esempio non sopporto quando devo parlare con qualcuno e mi si risponde “mandami una mail che sono SEMPRE impegnato” (non riesci neanche a trovare 10 minuti per me?). Anche questo è un esempio di costrizione che non migliora il problem solving. </span></p>

<h2 id="lestremo-opposto-only-italian-please">L’estremo opposto: only Italian, please</h2>

<p>Siccome sono un programmatore (e se siete su questa pagina dovreste averlo intuito) posso già dirvi che il 99% dei libri su cui ho studiato, gli articoli on line che ho letto (e scritto) , le guide tecniche e i siti delle aziende più importanti sono in inglese.</p>

<p>Questo vuol dire sostanzialmente due cose:</p>
<ul>
  <li><strong>La documentazione dei vostri software e dei vostri processi di business non può essere in italiano</strong>. Anche se oggi siete tutti italiani sul progetto, un bel giorno potreste trovarvi ad assumere degli stranieri, o delocalizzare lo sviluppo in qualche paese asiatico, e l’unico modo che avete per comunicare con loro sarà l’inglese. Siate future-proof e usate l’inglese come fa il resto del mondo.</li>
  <li><strong>Il vostro codice sorgente deve essere in inglese.</strong> Il motivo è lo stesso del punto precedente, con l’aggravante che <code class="highlighter-rouge">checkIfCodiceFiscaleIsValid()</code> non si può sentire.</li>
</ul>

<p>E’ importante dunque che chi voglia lavorare in questo mondo debba per lo meno saper leggere e scrivere un Inglese decente.</p>

<h2 id="quando-è-giusto-parlare-inglese-o-qualsiasi-altra-lingua-straniera">Quando è giusto parlare inglese (o qualsiasi altra lingua straniera)</h2>

<p>Quando nella vostra conversazione sincrona uno dei partecipanti non capisce l’italiano. A quel punto si sceglie una lingua compresa da tutti e la si usa.</p>

<h2 id="implicazioni-filosofiche-di-questa-scelta">Implicazioni filosofiche di questa scelta</h2>

<p>Siamo costretti a restare confinati nella nostra italianità? Non avremo mai accesso ai “talenti stranieri”?</p>

<p>Se la tua azienda è una s.r.l., non puoi certo definirla L.T.D. :)</p>

<p>Un altra conseguenza è che non è la lingua che si parla a rendere <em>grande</em> un workplace.</p>

<p>Infine: meglio un ottimo performer con un inglese zoppicante, o un  inglese madrelingua che lavora così così?</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>Deploy a NodeJS app on Heroku in less than 1 minute</title>
        <link>https://michelenasti.com/2017/03/18/deploy-a-nodejs-app-on-heroku-in-less-than-1-minute.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/03/18/deploy-a-nodejs-app-on-heroku-in-less-than-1-minute.html</guid>
        <pubDate>Sat, 18 Mar 2017 14:18:53 +0100</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Actually, the time you need to deploy an app depends on how fast you are to copy &amp;amp; paste.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;Your code must be hosted in a git repository.&lt;/p&gt;

&lt;h2 id=&quot;steps-to-set-up-the-environment-the-first-time&quot;&gt;Steps to set up the environment the first time&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Sign up (or log in) to
  &lt;a href=&quot;http://heroku.com&quot;&gt;heroku.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;download
  &lt;a href=&quot;https://devcenter.heroku.com/articles/heroku-cli&quot;&gt;heroku’s command for the console&lt;/a&gt; (select the right version for your operating system).&lt;/li&gt;
  &lt;li&gt;be sure the command is installed: &lt;code class=&quot;highlighter-rouge&quot;&gt;heroku -v&lt;/code&gt; (you should see some output)&lt;/li&gt;
  &lt;li&gt;launch &lt;code class=&quot;highlighter-rouge&quot;&gt;heroku login&lt;/code&gt;and log in with your email and password.&lt;/li&gt;
  &lt;li&gt;Upload ssh keys to heroku: &lt;code class=&quot;highlighter-rouge&quot;&gt;heroku keys:add&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh -v git@heroku.com&lt;/code&gt;: even if the command seems to fail, check that the long output contains the row
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;debug1: Authentication succeeded (publickey).
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;Generally it is one of the last 5-6 rows. If this log is present, everything is set up correctly.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;steps-to-set-up-the-environment-with-the-nodejs-app&quot;&gt;Steps to set up the environment with the NodeJs app&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Set the host port of your application as an environment variable:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const port = process.env.PORT || 3000 ;  
... 
app.listen(port);
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;set the &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt; script, in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;scripts&quot;: {
   &quot;start&quot;: &quot;node server.js&quot;,
   ...
   }

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Check that the app runs correctly: &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;launch &lt;code class=&quot;highlighter-rouge&quot;&gt;heroku create&lt;/code&gt;: will create a new remote for your repository named &lt;code class=&quot;highlighter-rouge&quot;&gt;heroku&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push heroku&lt;/code&gt; : will push your code to heroku&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;heroku open&lt;/code&gt;: will open your webapp in the browser&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For every modification you do to your code, just commit and &lt;code class=&quot;highlighter-rouge&quot;&gt;git push heroku&lt;/code&gt;!&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/03/18/deploy-a-nodejs-app-on-heroku-in-less-than-1-minute.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>Deploy a NodeJS app on Heroku in less than 1 minute</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" Deploy a NodeJS app on Heroku in less than 1 minute ">
                          <figcaption>Deploy a NodeJS app on Heroku in less than 1 minute</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-03-18 14:18:53 CET">Sat, 18 Mar 2017 14:18:53 +0100</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Actually, the time you need to deploy an app depends on how fast you are to copy &amp; paste.</p>

<h2 id="prerequisites">Prerequisites</h2>
<p>Your code must be hosted in a git repository.</p>

<h2 id="steps-to-set-up-the-environment-the-first-time">Steps to set up the environment the first time</h2>
<ol>
  <li>Sign up (or log in) to
  <a href="http://heroku.com">heroku.com</a></li>
  <li>download
  <a href="https://devcenter.heroku.com/articles/heroku-cli">heroku’s command for the console</a> (select the right version for your operating system).</li>
  <li>be sure the command is installed: <code class="highlighter-rouge">heroku -v</code> (you should see some output)</li>
  <li>launch <code class="highlighter-rouge">heroku login</code>and log in with your email and password.</li>
  <li>Upload ssh keys to heroku: <code class="highlighter-rouge">heroku keys:add</code></li>
  <li><code class="highlighter-rouge">ssh -v git@heroku.com</code>: even if the command seems to fail, check that the long output contains the row
    <div class="highlighter-rouge"><pre class="highlight"><code>debug1: Authentication succeeded (publickey).
</code></pre>
    </div>
    <p>Generally it is one of the last 5-6 rows. If this log is present, everything is set up correctly.</p>
  </li>
</ol>

<h2 id="steps-to-set-up-the-environment-with-the-nodejs-app">Steps to set up the environment with the NodeJs app</h2>
<ul>
  <li>Set the host port of your application as an environment variable:
    <div class="highlighter-rouge"><pre class="highlight"><code>const port = process.env.PORT || 3000 ;  
... 
app.listen(port);
</code></pre>
    </div>
  </li>
  <li>set the <code class="highlighter-rouge">npm start</code> script, in <code class="highlighter-rouge">package.json</code>:</li>
</ul>

<div class="highlighter-rouge"><pre class="highlight"><code>"scripts": {
   "start": "node server.js",
   ...
   }

</code></pre>
</div>

<ul>
  <li>Check that the app runs correctly: <code class="highlighter-rouge">npm start</code></li>
  <li>launch <code class="highlighter-rouge">heroku create</code>: will create a new remote for your repository named <code class="highlighter-rouge">heroku</code></li>
  <li><code class="highlighter-rouge">git push heroku</code> : will push your code to heroku</li>
  <li><code class="highlighter-rouge">heroku open</code>: will open your webapp in the browser</li>
</ul>

<p>For every modification you do to your code, just commit and <code class="highlighter-rouge">git push heroku</code>!</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>Two easy ways perform GET requests in NodeJS </title>
        <link>https://michelenasti.com/2017/03/14/two-easy-ways-perform-get-requests-in-nodejs.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/03/14/two-easy-ways-perform-get-requests-in-nodejs.html</guid>
        <pubDate>Tue, 14 Mar 2017 00:07:41 +0100</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Today I want to talk about something that we all need during our programming life: requesting data from a remote server. We will do this using callbacks and promises, to show both the approaches.&lt;/p&gt;

&lt;p&gt;We will see this specifically for NodeJS because it’s so simple that I couldn’t even imagine.&lt;/p&gt;

&lt;p&gt;In this article I’m going to talk about two super-popular libraries that do the same thing, but expose their API to the developer differently. Let’s see what they do and how to use them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/callbacks.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-simple-use-case-google-maps-api&quot;&gt;a simple use case: Google maps API&lt;/h2&gt;

&lt;p&gt;Just as an example, we will write a simple program that takes a textual address (for example&lt;code class=&quot;highlighter-rouge&quot;&gt;Piazza della Concordia, Salerno&lt;/code&gt;) and return latitude and longitude.&lt;/p&gt;

&lt;p&gt;The URL is this: &lt;a href=&quot;https://maps.googleapis.com/maps/api/geocode/json?address=piazza della concordia, salerno&quot;&gt;https://maps.googleapis.com/maps/api/geocode/json?address=piazza della concordia, salerno&lt;/a&gt;.  Clicking on this link you can see the response in json format.&lt;/p&gt;

&lt;p&gt;Our mission is to retrive latitude and longitude, so&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;results[0].geometry.location.lat
results[0].geometry.location.lng
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;request-the-name-says-it-all&quot;&gt;Request: the name says it all&lt;/h2&gt;

&lt;p&gt;The first library I’m going to talk is simply called &lt;a href=&quot;https://www.npmjs.com/package/request&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt;&lt;/a&gt;. Install as always:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;npm&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install request --save
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the NPM description:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Request is designed to be the simplest way possible to make http calls. It supports HTTPS and follows redirects by default.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is a NodeJS function that uses &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt; to perform the call&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encodedAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;encodeURIComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//server unreachable&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Unable to connect to Google Servers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// no results &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ZERO_RESULTS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Unable to find that address'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'OK'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formatted_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;latitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;longitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lng&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;encodeURIComponent()&lt;/code&gt; is a function that converts strings with special characters (like spaces, or quotes..) to a string that can be passed over a URI.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt; is just a function that takes an URI, some options, and will give the result in a &lt;strong&gt;callback&lt;/strong&gt;. Since we are following Node standard approach to callbacks, where the first argument is the error object, the return callback contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; as first argument.&lt;/p&gt;

&lt;h2 id=&quot;axios-a-promise-based-equivalent&quot;&gt;Axios: a Promise based equivalent&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://michelenasti.com/2017/03/12/js-promises-description-pros-cons-of-this-es6-construct.html&quot;&gt;In my last article we talked about promises&lt;/a&gt;, so we would like to see these in action, right? We have two options, the first is to wrap &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt; in a promise (easy, but more code); the second is to &lt;strong&gt;use a library already built with promises in mind&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The one I use, and that is super popular, is called &lt;strong&gt;&lt;a href=&quot;https://www.npmjs.com/package/axios&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Axios&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;: Here’s the description&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Promise based HTTP client for the browser and node.js&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To install:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;npm&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install axios
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here is the snippet for the axios request:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encodedAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;encodeURIComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geocodeUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geocodeUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// throw error on no results&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ZERO_RESULTS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Unable to find that address'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// return new promise with data (for chaining)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;latitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;longitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;formatted_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formatted_address&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// show data&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;latitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formatted_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;latitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;latitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;latitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;longitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//error handling &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The approach here is different. &lt;code class=&quot;highlighter-rouge&quot;&gt;axios.get()&lt;/code&gt; returns a Promise, that we chain with a call to the &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Once we have the data, in the form of &lt;code class=&quot;highlighter-rouge&quot;&gt;response.data&lt;/code&gt;, we can extrapolate the fields we need.&lt;/p&gt;

&lt;p&gt;I could just print the data in the first &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; block, but to be more coherent with my design guidelines (&lt;em&gt;every function does just one thing&lt;/em&gt;) I wanted to separate the two operations so the first block will just retrieve the data, then returns another Promise (&lt;code class=&quot;highlighter-rouge&quot;&gt;return Promise.resolve({..})&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The next &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; block will only display the data retrieved.&lt;/p&gt;

&lt;h2 id=&quot;which-approach-do-you-prefer&quot;&gt;Which approach do you prefer?&lt;/h2&gt;

&lt;p&gt;This depends on you! &lt;strong&gt;I prefer promises&lt;/strong&gt;, because I find them more natural, but being a Node coder means you can choose and decide what’s best for you. Both are well tested libraries with well known patterns, so you only have to choose the one you love.&lt;/p&gt;

&lt;p&gt;Cheers from &lt;code class=&quot;highlighter-rouge&quot;&gt;40.7802306&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;14.7010686&lt;/code&gt; !&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/03/14/two-easy-ways-perform-get-requests-in-nodejs.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>Two easy ways perform GET requests in NodeJS </h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" Two easy ways perform GET requests in NodeJS  ">
                          <figcaption>Two easy ways perform GET requests in NodeJS </figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-03-14 00:07:41 CET">Tue, 14 Mar 2017 00:07:41 +0100</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Today I want to talk about something that we all need during our programming life: requesting data from a remote server. We will do this using callbacks and promises, to show both the approaches.</p>

<p>We will see this specifically for NodeJS because it’s so simple that I couldn’t even imagine.</p>

<p>In this article I’m going to talk about two super-popular libraries that do the same thing, but expose their API to the developer differently. Let’s see what they do and how to use them.</p>

<p><img src="/images/callbacks.png" alt="" /></p>

<h2 id="a-simple-use-case-google-maps-api">a simple use case: Google maps API</h2>

<p>Just as an example, we will write a simple program that takes a textual address (for example<code class="highlighter-rouge">Piazza della Concordia, Salerno</code>) and return latitude and longitude.</p>

<p>The URL is this: <a href="https://maps.googleapis.com/maps/api/geocode/json?address=piazza della concordia, salerno">https://maps.googleapis.com/maps/api/geocode/json?address=piazza della concordia, salerno</a>.  Clicking on this link you can see the response in json format.</p>

<p>Our mission is to retrive latitude and longitude, so</p>

<div class="highlighter-rouge"><pre class="highlight"><code>results[0].geometry.location.lat
results[0].geometry.location.lng
</code></pre>
</div>

<h2 id="request-the-name-says-it-all">Request: the name says it all</h2>

<p>The first library I’m going to talk is simply called <a href="https://www.npmjs.com/package/request"><code class="highlighter-rouge">request</code></a>. Install as always:</p>

<div class="language-console highlighter-rouge"><pre class="highlight"><code><span class="w">$ </span><span class="nc">npm</span><span class="kv"> install request --save
</span></code></pre>
</div>

<p>From the NPM description:</p>

<blockquote>
  <p>Request is designed to be the simplest way possible to make http calls. It supports HTTPS and follows redirects by default.</p>
</blockquote>

<p>Here is a NodeJS function that uses <code class="highlighter-rouge">request</code> to perform the call</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">encodedAddress</span> <span class="o">=</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">address</span><span class="p">);</span>

  <span class="nx">request</span><span class="p">({</span>
    <span class="na">url</span><span class="p">:</span> <span class="err">`</span><span class="na">https</span><span class="p">:</span><span class="c1">//maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,</span>
    <span class="na">json</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">},</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>

    <span class="c1">//server unreachable</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> 
      <span class="nx">callback</span><span class="p">(</span><span class="s1">'Unable to connect to Google Servers'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// no results </span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">body</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="s1">'ZERO_RESULTS'</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">callback</span><span class="p">(</span><span class="s1">'Unable to find that address'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">body</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="s1">'OK'</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">callback</span><span class="p">(</span><span class="kc">undefined</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">address</span><span class="p">:</span> <span class="nx">body</span><span class="p">.</span><span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">formatted_address</span><span class="p">,</span>
        <span class="na">latitude</span><span class="p">:</span> <span class="nx">body</span><span class="p">.</span><span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">lat</span><span class="p">,</span>
        <span class="na">longitude</span><span class="p">:</span> <span class="nx">body</span><span class="p">.</span><span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">lng</span>
      <span class="p">});</span>
    <span class="p">}</span>

  <span class="p">});</span>
</code></pre>
</div>

<p><code class="highlighter-rouge">encodeURIComponent()</code> is a function that converts strings with special characters (like spaces, or quotes..) to a string that can be passed over a URI.</p>

<p><code class="highlighter-rouge">request</code> is just a function that takes an URI, some options, and will give the result in a <strong>callback</strong>. Since we are following Node standard approach to callbacks, where the first argument is the error object, the return callback contains a <code class="highlighter-rouge">undefined</code> as first argument.</p>

<h2 id="axios-a-promise-based-equivalent">Axios: a Promise based equivalent</h2>

<p><a href="https://michelenasti.com/2017/03/12/js-promises-description-pros-cons-of-this-es6-construct.html">In my last article we talked about promises</a>, so we would like to see these in action, right? We have two options, the first is to wrap <code class="highlighter-rouge">request</code> in a promise (easy, but more code); the second is to <strong>use a library already built with promises in mind</strong>.</p>

<p>The one I use, and that is super popular, is called <strong><a href="https://www.npmjs.com/package/axios"><code class="highlighter-rouge">Axios</code></a></strong>: Here’s the description</p>

<blockquote>
  <p>Promise based HTTP client for the browser and node.js</p>
</blockquote>

<p>To install:</p>

<div class="language-console highlighter-rouge"><pre class="highlight"><code><span class="w">$ </span><span class="nc">npm</span><span class="kv"> install axios
</span></code></pre>
</div>

<p>Here is the snippet for the axios request:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">encodedAddress</span> <span class="o">=</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">address</span><span class="p">);</span>

<span class="kd">let</span> <span class="nx">geocodeUrl</span> <span class="o">=</span> <span class="err">`</span><span class="nx">https</span><span class="err">:</span><span class="c1">//maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`;</span>

<span class="nx">axios</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">geocodeUrl</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// throw error on no results</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="s1">'ZERO_RESULTS'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">'Unable to find that address'</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="c1">// return new promise with data (for chaining)</span>
  <span class="k">return</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">({</span>
    <span class="na">latitude</span><span class="p">:</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">lat</span><span class="p">,</span>
    <span class="na">longitude</span><span class="p">:</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">lng</span><span class="p">,</span>
    <span class="na">formatted_address</span><span class="p">:</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">formatted_address</span>
  <span class="p">});</span>

  <span class="c1">// show data</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="na">latitude</span><span class="p">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">response</span><span class="p">.</span><span class="nx">formatted_address</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="na">latitude</span><span class="p">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">response</span><span class="p">.</span><span class="nx">latitude</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="na">latitude</span><span class="p">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">response</span><span class="p">.</span><span class="nx">longitude</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>

  <span class="c1">//error handling </span>
<span class="p">}).</span><span class="k">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
<span class="p">});</span> 
</code></pre>
</div>

<p>The approach here is different. <code class="highlighter-rouge">axios.get()</code> returns a Promise, that we chain with a call to the <code class="highlighter-rouge">then()</code> method.</p>

<p>Once we have the data, in the form of <code class="highlighter-rouge">response.data</code>, we can extrapolate the fields we need.</p>

<p>I could just print the data in the first <code class="highlighter-rouge">then()</code> block, but to be more coherent with my design guidelines (<em>every function does just one thing</em>) I wanted to separate the two operations so the first block will just retrieve the data, then returns another Promise (<code class="highlighter-rouge">return Promise.resolve({..})</code>).</p>

<p>The next <code class="highlighter-rouge">then()</code> block will only display the data retrieved.</p>

<h2 id="which-approach-do-you-prefer">Which approach do you prefer?</h2>

<p>This depends on you! <strong>I prefer promises</strong>, because I find them more natural, but being a Node coder means you can choose and decide what’s best for you. Both are well tested libraries with well known patterns, so you only have to choose the one you love.</p>

<p>Cheers from <code class="highlighter-rouge">40.7802306</code>, <code class="highlighter-rouge">14.7010686</code> !</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>JS Promises: description, pros, cons of this ES6 construct</title>
        <link>https://michelenasti.com/2017/03/12/js-promises-description-pros-cons-of-this-es6-construct.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/03/12/js-promises-description-pros-cons-of-this-es6-construct.html</guid>
        <pubDate>Sun, 12 Mar 2017 14:06:29 +0100</pubDate>
        <author></author>
        
          <description>&lt;p&gt;I hope that you have done some kind of exploration with Javascript, NodeJS and asynchronous constructs right now.&lt;/p&gt;

&lt;p&gt;To recap: when you wait for an async operation to handle the result, for example in NodeJS when we read a file, we do this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'filename.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
   &lt;span class=&quot;c1&quot;&gt;//now you can use the data object &lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is the standard, classic way of handling asynchronicity in NodeJS and Javascript.&lt;/p&gt;

&lt;p&gt;In the last few years a new approach has come to rise, first from outside libraries, then as part of ES6 language: &lt;strong&gt;Promises&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/promise.jpg&quot; alt=&quot;&quot; style=&quot;float: none;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Not me in the photo. This is the Italian way to promise. I love his way of looking guilty. &lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;i-promise-that-i-will-give-you-the-result&quot;&gt;I promise that I will give you the result&lt;/h2&gt;

&lt;p&gt;I don’t want to talk about the history of promises, because like everything in JS Promises have a complex story coming from many libraries doing the same thing, with different syntaxes and patterns.&lt;/p&gt;

&lt;p&gt;However ES6 has standardized this, and now we have a fantastic &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt; object. Let’s see how to use it.&lt;/p&gt;

&lt;p&gt;The following snippet will create a Promise that waits 2,5 seconds and then sends a message &lt;code class=&quot;highlighter-rouge&quot;&gt;Hey. it worked&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;somePromise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//1&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// only one can be called and only once &lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hey. it worked'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                      &lt;span class=&quot;c1&quot;&gt;//2&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//reject('Unable to fulfill promise');          //3&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; 

&lt;span class=&quot;nx&quot;&gt;somePromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;                                   &lt;span class=&quot;c1&quot;&gt;//4&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Success: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Error: '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;My definition of promises: &lt;strong&gt;a &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt; is a wrapper object that you use to encapsulate a function that might return a value in the future&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We declare a promise as showed in (1): &lt;code class=&quot;highlighter-rouge&quot;&gt;new Promise()&lt;/code&gt; with a function inside.&lt;/p&gt;

&lt;p&gt;This function takes two arguments that are two other functions, usually called &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt;. So the full specification is &lt;code class=&quot;highlighter-rouge&quot;&gt;let somePromise = new Promise((resolve, reject) =&amp;gt; {...});&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;How do you use these two parameters? &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt; (2) is a function used to return a value, when the function ends normally (e.g. reading a file, you get the content of the file and return to the caller); &lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt; (3) is used when you encounter a problem (e.g. you couldn’t read the file).&lt;/p&gt;

&lt;p&gt;There are some bonds on using Promises:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;you cannot call both &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt;in your code. As soon as one of the two functions gets called, the promise stops.&lt;/li&gt;
  &lt;li&gt;if you don’t call any of the two functions, the promise will hang.&lt;/li&gt;
  &lt;li&gt;you can only pass &lt;strong&gt;one&lt;/strong&gt; parameter to &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt;. If you have more stuff to pass, wrap everything in an object.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, now we have defined a promise. How do we use it? An example is shown in (4): we just call the promise and then use the &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; method to use the response.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; can take two functions as arguments:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the first callback is called when the promise ends correctly, with the value contained in &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;the second callback is the &lt;em&gt;error handler&lt;/em&gt;, so you might want to use it when you want to get data from the &lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chaining-promises&quot;&gt;Chaining promises&lt;/h2&gt;

&lt;p&gt;This approach is nice, but the true power comes when you can &lt;code class=&quot;highlighter-rouge&quot;&gt;chain&lt;/code&gt; many promises one after another.&lt;/p&gt;

&lt;p&gt;The following code shows a function &lt;code class=&quot;highlighter-rouge&quot;&gt;asyncAdd&lt;/code&gt; that adds two numbers after 1,5 seconds. I bet your calculator is faster. It does however some checks on the type of &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;, to be sure they are numbers.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;asyncAdd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'number'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'number'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Arguments must be numbers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;asyncAdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                         &lt;span class=&quot;c1&quot;&gt;// (1)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;// (2)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;asyncAdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'33'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// (3)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;// (4)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Should be 45:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// (5)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Quiz&lt;/strong&gt;: what does this code print? (Answer below)&lt;/p&gt;

&lt;p&gt;In (1) we are evaluating the first sum. &lt;strong&gt;Then&lt;/strong&gt; (2) (&lt;em&gt;Look how it is semantically fantastic to express this concept in plain english!!!&lt;/em&gt;) we write the result to console, and return another operation (3): we add the result to the number ‘33’ (&lt;strong&gt;note! it is a string!&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Since we are returning a function that returns a promise, we can chain the two promises with another &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We didn’t write the second &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; callback, because we have used the &lt;code class=&quot;highlighter-rouge&quot;&gt;.catch()&lt;/code&gt; method. We will explain this in a second.&lt;/p&gt;

&lt;p&gt;In the second &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; (4) we would print the result of the total sum.&lt;/p&gt;

&lt;p&gt;Lastly, in (5) we have the &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt; block. In the previous paragraph we were saying that you can handle errors inside every &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;, but if you chain many &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; together and the first one fails, the others are still executed. Usually you don’t want this, because the next &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; depends on the result of the previous.&lt;/p&gt;

&lt;p&gt;So, if you just want to stop an operation at the first error encountered, you can use a single &lt;code class=&quot;highlighter-rouge&quot;&gt;catch()&lt;/code&gt; block at the end: whatever promise will fail, be it the first or the last, the &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt; block will be called to handle the failure. So easy to reason about.&lt;/p&gt;

&lt;p&gt;(Sorry, no answer for the quiz… run it and see!)&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;A promise is a new construct that, after some practice, becomes a powerful tool for your async constructs.&lt;/p&gt;

&lt;p&gt;The advantages are that you don’t have to write anymore nested callbacks with a lot of indented code, that is often complex to reason about, and to handle errors.&lt;/p&gt;

&lt;p&gt;The disadvantage is that there is much more than what I wrote in this article, about promises, that covers every possible edge case that naturally occours when you work with async code. However, what you read here should cover 80% of your needs.&lt;/p&gt;

&lt;p&gt;You can transform every callback in a promise; many NodeJS core developers don’t like promises at all, and use only callbacks. Popular libraries in NPM use one way or the other to deliver results, so you might be forced to use one or the other approach based on this.&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/03/12/js-promises-description-pros-cons-of-this-es6-construct.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>JS Promises: description, pros, cons of this ES6 construct</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" JS Promises: description, pros, cons of this ES6 construct ">
                          <figcaption>JS Promises: description, pros, cons of this ES6 construct</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-03-12 14:06:29 CET">Sun, 12 Mar 2017 14:06:29 +0100</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>I hope that you have done some kind of exploration with Javascript, NodeJS and asynchronous constructs right now.</p>

<p>To recap: when you wait for an async operation to handle the result, for example in NodeJS when we read a file, we do this:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kr">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'fs'</span><span class="p">);</span>
<span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s1">'filename.txt'</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
   <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span> 
   <span class="c1">//now you can use the data object </span>
   <span class="p">...</span>
<span class="p">});</span>
</code></pre>
</div>

<p>This is the standard, classic way of handling asynchronicity in NodeJS and Javascript.</p>

<p>In the last few years a new approach has come to rise, first from outside libraries, then as part of ES6 language: <strong>Promises</strong>.</p>

<p><img src="/images/promise.jpg" alt="" style="float: none;" /></p>

<p><em>Not me in the photo. This is the Italian way to promise. I love his way of looking guilty. </em></p>

<h2 id="i-promise-that-i-will-give-you-the-result">I promise that I will give you the result</h2>

<p>I don’t want to talk about the history of promises, because like everything in JS Promises have a complex story coming from many libraries doing the same thing, with different syntaxes and patterns.</p>

<p>However ES6 has standardized this, and now we have a fantastic <code class="highlighter-rouge">Promise</code> object. Let’s see how to use it.</p>

<p>The following snippet will create a Promise that waits 2,5 seconds and then sends a message <code class="highlighter-rouge">Hey. it worked</code>:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">somePromise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">//1</span>
  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// only one can be called and only once </span>
    <span class="nx">resolve</span><span class="p">(</span><span class="s1">'Hey. it worked'</span><span class="p">);</span>                      <span class="c1">//2</span>
    <span class="c1">//reject('Unable to fulfill promise');          //3</span>
  <span class="p">},</span> <span class="mi">2500</span><span class="p">);</span>
<span class="p">});</span> 

<span class="nx">somePromise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span>                                   <span class="c1">//4</span>
  <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Success: '</span> <span class="o">+</span> <span class="nx">message</span><span class="p">);</span>
  <span class="p">},</span> 
  <span class="p">(</span><span class="nx">errorMessage</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Error: '</span><span class="p">,</span> <span class="nx">errorMessage</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">);</span>
</code></pre>
</div>

<p>My definition of promises: <strong>a <code class="highlighter-rouge">Promise</code> is a wrapper object that you use to encapsulate a function that might return a value in the future</strong>.</p>

<p>We declare a promise as showed in (1): <code class="highlighter-rouge">new Promise()</code> with a function inside.</p>

<p>This function takes two arguments that are two other functions, usually called <code class="highlighter-rouge">resolve</code> and <code class="highlighter-rouge">reject</code>. So the full specification is <code class="highlighter-rouge">let somePromise = new Promise((resolve, reject) =&gt; {...});</code>.</p>

<p>How do you use these two parameters? <code class="highlighter-rouge">resolve</code> (2) is a function used to return a value, when the function ends normally (e.g. reading a file, you get the content of the file and return to the caller); <code class="highlighter-rouge">reject</code> (3) is used when you encounter a problem (e.g. you couldn’t read the file).</p>

<p>There are some bonds on using Promises:</p>

<ul>
  <li>you cannot call both <code class="highlighter-rouge">resolve</code> or <code class="highlighter-rouge">reject</code>in your code. As soon as one of the two functions gets called, the promise stops.</li>
  <li>if you don’t call any of the two functions, the promise will hang.</li>
  <li>you can only pass <strong>one</strong> parameter to <code class="highlighter-rouge">resolve</code> or <code class="highlighter-rouge">reject</code>. If you have more stuff to pass, wrap everything in an object.</li>
</ul>

<p>Ok, now we have defined a promise. How do we use it? An example is shown in (4): we just call the promise and then use the <code class="highlighter-rouge">then</code> method to use the response.</p>

<p><code class="highlighter-rouge">then</code> can take two functions as arguments:</p>

<ul>
  <li>the first callback is called when the promise ends correctly, with the value contained in <code class="highlighter-rouge">resolve</code></li>
  <li>the second callback is the <em>error handler</em>, so you might want to use it when you want to get data from the <code class="highlighter-rouge">reject</code> function.</li>
</ul>

<h2 id="chaining-promises">Chaining promises</h2>

<p>This approach is nice, but the true power comes when you can <code class="highlighter-rouge">chain</code> many promises one after another.</p>

<p>The following code shows a function <code class="highlighter-rouge">asyncAdd</code> that adds two numbers after 1,5 seconds. I bet your calculator is faster. It does however some checks on the type of <code class="highlighter-rouge">a</code> and <code class="highlighter-rouge">b</code>, to be sure they are numbers.</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">asyncAdd</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span> <span class="o">===</span> <span class="s1">'number'</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">b</span> <span class="o">===</span> <span class="s1">'number'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">resolve</span><span class="p">(</span><span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">reject</span><span class="p">(</span><span class="s1">'Arguments must be numbers'</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">},</span> <span class="mi">1500</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="nx">asyncAdd</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>                         <span class="c1">// (1)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>                  <span class="c1">// (2)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">asyncAdd</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="s1">'33'</span><span class="p">);</span>     <span class="c1">// (3)</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>                     <span class="c1">// (4)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Should be 45:'</span><span class="p">,</span> <span class="nx">res</span><span class="p">);</span> 
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">errorMessage</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>           <span class="c1">// (5)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">errorMessage</span><span class="p">);</span>
  <span class="p">})</span>
</code></pre>
</div>

<p><strong>Quiz</strong>: what does this code print? (Answer below)</p>

<p>In (1) we are evaluating the first sum. <strong>Then</strong> (2) (<em>Look how it is semantically fantastic to express this concept in plain english!!!</em>) we write the result to console, and return another operation (3): we add the result to the number ‘33’ (<strong>note! it is a string!</strong>).</p>

<p>Since we are returning a function that returns a promise, we can chain the two promises with another <code class="highlighter-rouge">then()</code>.</p>

<p>We didn’t write the second <code class="highlighter-rouge">then</code> callback, because we have used the <code class="highlighter-rouge">.catch()</code> method. We will explain this in a second.</p>

<p>In the second <code class="highlighter-rouge">then()</code> (4) we would print the result of the total sum.</p>

<p>Lastly, in (5) we have the <code class="highlighter-rouge">catch</code> block. In the previous paragraph we were saying that you can handle errors inside every <code class="highlighter-rouge">then</code>, but if you chain many <code class="highlighter-rouge">then</code> together and the first one fails, the others are still executed. Usually you don’t want this, because the next <code class="highlighter-rouge">then</code> depends on the result of the previous.</p>

<p>So, if you just want to stop an operation at the first error encountered, you can use a single <code class="highlighter-rouge">catch()</code> block at the end: whatever promise will fail, be it the first or the last, the <code class="highlighter-rouge">catch</code> block will be called to handle the failure. So easy to reason about.</p>

<p>(Sorry, no answer for the quiz… run it and see!)</p>

<h2 id="conclusions">Conclusions</h2>

<p>A promise is a new construct that, after some practice, becomes a powerful tool for your async constructs.</p>

<p>The advantages are that you don’t have to write anymore nested callbacks with a lot of indented code, that is often complex to reason about, and to handle errors.</p>

<p>The disadvantage is that there is much more than what I wrote in this article, about promises, that covers every possible edge case that naturally occours when you work with async code. However, what you read here should cover 80% of your needs.</p>

<p>You can transform every callback in a promise; many NodeJS core developers don’t like promises at all, and use only callbacks. Popular libraries in NPM use one way or the other to deliver results, so you might be forced to use one or the other approach based on this.</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title> Quando l'azienda non paga gli stipendi</title>
        <link>https://michelenasti.com/2017/02/28/quando-l-azienda-non-paga-gli-stipendi.html</link>
        <guid isPermaLink="true">https://michelenasti.com/2017/02/28/quando-l-azienda-non-paga-gli-stipendi.html</guid>
        <pubDate>Tue, 28 Feb 2017 11:36:03 +0100</pubDate>
        <author></author>
        
          <description>&lt;p&gt;Qualche anno fa &lt;strong&gt;l’azienda per cui lavoravo ha attraversato un periodo di crisi e lo stipendio arrivava a singhiozzo&lt;/strong&gt; (o peggio, non arrivava proprio). Lo ricordo come uno dei periodi più brutti della mia vita.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Per rispetto agli ex colleghi ancora coinvolti in questa vicenda, non voglio citare il nome dell’azienda che attualmente è in liquidazione; sappiate che ci sono persone che non hanno avuto la fortuna di trovare un altro lavoro, e altri che aspettano ancora i soldi dovuti.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;i-fatti&quot;&gt;I fatti&lt;/h2&gt;

&lt;p&gt;Sono stato assunto da un’azienda di consulenza e, come tutti i consulenti, sono stato mandato a lavorare presso un’altra azienda “madre”. &lt;strong&gt;Per i primi 3-4 mesi il lavoro è stato fantastico&lt;/strong&gt;, ricordo soprattutto la spensieratezza di conoscere i nuovi colleghi e i progetti su cui dovevo lavorare.&lt;/p&gt;

&lt;p&gt;Dopo i primi mesi, tuttavia, arrivarono &lt;strong&gt;le prime comunicazioni che lo stipendio sarebbe stato pagato in ritardo&lt;/strong&gt; - prima 5 giorni, poi 10 giorni, poi 20 giorni… si fece dicembre e arrivò la comunicazione definitiva, &lt;strong&gt;“non sappiamo quando avremo modo di pagare la tredicesima e la mensilità”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I miei giorni lavorativi scorrevano apparentemente normali&lt;/strong&gt;, andavo a lavoro tutti i giorni e cercavo di dare il massimo come faccio sempre; &lt;strong&gt;era anche difficile parlare di queste cose con i colleghi e con i capi&lt;/strong&gt;, perché tutti gli altri erano dipendenti dell’azienda madre quindi avevo pochi colleghi diretti. L’unica persona con cui potevo sfogarmi era mia moglie (quindi immaginatevi il clima a casa).&lt;/p&gt;

&lt;h2 id=&quot;i-tentativi-di-cambiare-la-mia-situazione&quot;&gt;I tentativi di cambiare la mia situazione&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;La prima cosa che ho provato a fare è di trovare un altro lavoro, e in effetti l’ho anche trovato.&lt;/strong&gt; Ho firmato una lettera di assunzione con un’altra azienda, e ho comunicato le dimissioni nei termini (45 giorni! caspita quanto ci vuole a licenziarsi quando manca l’ossigeno), &lt;strong&gt;ma cinque giorni prima delle dimissioni effettive mi chiama per ritrattare&lt;/strong&gt;: &lt;em&gt;“Michele, aspettavamo soldi dalla regione che non sono arrivati. Se puoi, se puoi resta dove sei.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Mi è caduto il mondo addosso. &lt;strong&gt;Dopo aver trovato una via d’uscita, scopro che era un vicolo cieco&lt;/strong&gt; e devo tornare indietro e rifare tutto da capo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Con la testa bassa vado dal responsabile del progetto&lt;/strong&gt; a cui lavoravo &lt;strong&gt;e gli chiedo se è disposto a riprendermi&lt;/strong&gt;, ovviamente valutandomi per il mio lavoro e senza alcuna presunzione di essere “perdonato”. Voi cosa avreste fatto? &lt;strong&gt;Beh lui si è sbracciato per tenermi a lavoro&lt;/strong&gt;, e a tre giorni dalle dimissioni ufficiali (con quintali di carte già spedite a INPS, consulenti del lavoro, etc) abbiamo ritirato tutto.&lt;/p&gt;

&lt;p&gt;Contemporaneamente, la mia azienda di consulenza (quella che mi pagava lo stipendio) giurava e spergiurava di aver risolto i problemi finanziari, e quindi c’era da stare tranquilli. Ovviamente non era affatto così.&lt;/p&gt;

&lt;p&gt;Dopo altri 3-4 mesi di pagamenti a singhiozzo, ritorno dal mio responsabile sul progetto - quello che mi aveva “ripreso” a seguito del casino delle dimissioni ritirate - e gli spiego per la prima volta come stanno le cose davvero. &lt;strong&gt;Gli dico che non ce la faccio più, che mi sembra di essere un cretino e che non so come gestire la situazione&lt;/strong&gt;. A questo punto l’azienda “madre” mi aiuta a trovare un’altra società satellite dando di nuovo le dimissioni a 45 giorni con la determinazione che stavolta, anche a costo di rimanere senza lavoro, non avrei voluto avere più niente a che fare con un’azienda che non paga.&lt;/p&gt;

&lt;p&gt;Me ne sono andato con un credito di 4500 €, e ad oggi restano solo 450€ ancora da avere (che forse non rivedrò mai più). Altri miei ex colleghi aspettano cifre più alte, dell’ordine di 10.000€ (TFR e arretrati). &lt;/p&gt;

&lt;h2 id=&quot;come-ci-si-sente&quot;&gt;Come ci si sente&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;La sensazione che ho avuto nei periodi più bui era che la colpa fosse mia&lt;/strong&gt;. Ricordo in particolare il periodo di Natale, quando non potevo comprare nemmeno un regalino a mia moglie perché avevo 4,5€ sul conto! L’inconscio mi faceva apparire che non era l’azienda ad essere nel torto, &lt;strong&gt;ero io a non aver fatto la cosa giusta (quale, poi?!) al momento giusto.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;E’ stata dura prendere qualsiasi decisione perché avevo sempre la sensazione di perderci qualcosa, ma non saprei dirvi cosa.&lt;/strong&gt; E non vi parlo nemmeno della sensazione di irriconoscenza che ho avuto verso l’azienda “madre” del progetto, che mi hanno aiutato quando hanno potuto, e che ho provato a mollare un paio di volte. Insomma, una situazione psicologica debole.&lt;/p&gt;

&lt;h2 id=&quot;cosa-si-può-fare-per-evitare-tutto-questo&quot;&gt;Cosa si può fare per evitare tutto questo&lt;/h2&gt;

&lt;p&gt;A mente fredda è facile parlare, ma ci sono alcuni suggerimenti che posso darvi.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Al primo accenno di stipendio pagato in ritardo o non pagato affatto, &lt;strong&gt;cercate un’alternativa&lt;/strong&gt;. L’ideale è rassegnare le dimissioni “normali” così non perdete mensilità, TFR, e quanto altro. Non credete a chi vi dice che tutto si aggiusterà, a meno che non abbiate accesso a conti e contratti e possiate dire con tranquillità che le cose stiano davvero a posto.&lt;/li&gt;
  &lt;li&gt;Se avete un buon gruzzolo messo da parte e potete permettervi uno-due mesi senza stipendio (che, pur restando in azienda, accadrà), e se siete a almeno 3 mensilità arretrate, &lt;strong&gt;vi conviene licenziarvi IMMEDIATAMENTE per giusta causa e fare domanda di disoccupazione all’INPS.&lt;/strong&gt; In rete si trovano &lt;a href=&quot;http://www.guidafisco.it/mancato-pagamento-stipendio-dimissioni-870&quot;&gt;molti articoli a riguardo&lt;/a&gt;. E’ importante sapere che se vi licenziate “normalmente” non avete diritto a niente, ma il mancato stipendio è considerabile come &lt;em&gt;giusta causa&lt;/em&gt;, purché dopo iniziate una causa civile contro il datore di lavoro per riavere i soldi indietro (altra condizione affinché l’INPS eroghi la disoccupazione).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Restare in azienda e sperare di essere licenziati è una pessima idea.&lt;/strong&gt; Psicologicamente subirete tutto voi ed è estenuante. Anzi, non è nemmeno una tattica: è come stare su una barca in pieno oceano col mare in tempesta - o con la calma piatta: state bene finché avete viveri. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Io spero che non vi accada mai nulla di tutto ciò, ma se vi è accaduto e volete provare a spiegare come vi siete sentiti e cosa avete fatto per uscirne, questo blog è a vostra disposizione. &lt;strong&gt;Non fate nomi di aziende perché io modero tutto e i commenti offensivi o diffamatori saranno immediatamente cancellati.&lt;/strong&gt; Grazie per la comprensione.&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/2017/02/28/quando-l-azienda-non-paga-gli-stipendi.html">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1> Quando l'azienda non paga gli stipendi</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt="  Quando l'azienda non paga gli stipendi ">
                          <figcaption> Quando l'azienda non paga gli stipendi</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-02-28 11:36:03 CET">Tue, 28 Feb 2017 11:36:03 +0100</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>Qualche anno fa <strong>l’azienda per cui lavoravo ha attraversato un periodo di crisi e lo stipendio arrivava a singhiozzo</strong> (o peggio, non arrivava proprio). Lo ricordo come uno dei periodi più brutti della mia vita.</p>

<blockquote>
  <p>Per rispetto agli ex colleghi ancora coinvolti in questa vicenda, non voglio citare il nome dell’azienda che attualmente è in liquidazione; sappiate che ci sono persone che non hanno avuto la fortuna di trovare un altro lavoro, e altri che aspettano ancora i soldi dovuti.</p>
</blockquote>

<h2 id="i-fatti">I fatti</h2>

<p>Sono stato assunto da un’azienda di consulenza e, come tutti i consulenti, sono stato mandato a lavorare presso un’altra azienda “madre”. <strong>Per i primi 3-4 mesi il lavoro è stato fantastico</strong>, ricordo soprattutto la spensieratezza di conoscere i nuovi colleghi e i progetti su cui dovevo lavorare.</p>

<p>Dopo i primi mesi, tuttavia, arrivarono <strong>le prime comunicazioni che lo stipendio sarebbe stato pagato in ritardo</strong> - prima 5 giorni, poi 10 giorni, poi 20 giorni… si fece dicembre e arrivò la comunicazione definitiva, <strong>“non sappiamo quando avremo modo di pagare la tredicesima e la mensilità”</strong>.</p>

<p><strong>I miei giorni lavorativi scorrevano apparentemente normali</strong>, andavo a lavoro tutti i giorni e cercavo di dare il massimo come faccio sempre; <strong>era anche difficile parlare di queste cose con i colleghi e con i capi</strong>, perché tutti gli altri erano dipendenti dell’azienda madre quindi avevo pochi colleghi diretti. L’unica persona con cui potevo sfogarmi era mia moglie (quindi immaginatevi il clima a casa).</p>

<h2 id="i-tentativi-di-cambiare-la-mia-situazione">I tentativi di cambiare la mia situazione</h2>

<p><strong>La prima cosa che ho provato a fare è di trovare un altro lavoro, e in effetti l’ho anche trovato.</strong> Ho firmato una lettera di assunzione con un’altra azienda, e ho comunicato le dimissioni nei termini (45 giorni! caspita quanto ci vuole a licenziarsi quando manca l’ossigeno), <strong>ma cinque giorni prima delle dimissioni effettive mi chiama per ritrattare</strong>: <em>“Michele, aspettavamo soldi dalla regione che non sono arrivati. Se puoi, se puoi resta dove sei.”</em></p>

<p>Mi è caduto il mondo addosso. <strong>Dopo aver trovato una via d’uscita, scopro che era un vicolo cieco</strong> e devo tornare indietro e rifare tutto da capo.</p>

<p><strong>Con la testa bassa vado dal responsabile del progetto</strong> a cui lavoravo <strong>e gli chiedo se è disposto a riprendermi</strong>, ovviamente valutandomi per il mio lavoro e senza alcuna presunzione di essere “perdonato”. Voi cosa avreste fatto? <strong>Beh lui si è sbracciato per tenermi a lavoro</strong>, e a tre giorni dalle dimissioni ufficiali (con quintali di carte già spedite a INPS, consulenti del lavoro, etc) abbiamo ritirato tutto.</p>

<p>Contemporaneamente, la mia azienda di consulenza (quella che mi pagava lo stipendio) giurava e spergiurava di aver risolto i problemi finanziari, e quindi c’era da stare tranquilli. Ovviamente non era affatto così.</p>

<p>Dopo altri 3-4 mesi di pagamenti a singhiozzo, ritorno dal mio responsabile sul progetto - quello che mi aveva “ripreso” a seguito del casino delle dimissioni ritirate - e gli spiego per la prima volta come stanno le cose davvero. <strong>Gli dico che non ce la faccio più, che mi sembra di essere un cretino e che non so come gestire la situazione</strong>. A questo punto l’azienda “madre” mi aiuta a trovare un’altra società satellite dando di nuovo le dimissioni a 45 giorni con la determinazione che stavolta, anche a costo di rimanere senza lavoro, non avrei voluto avere più niente a che fare con un’azienda che non paga.</p>

<p>Me ne sono andato con un credito di 4500 €, e ad oggi restano solo 450€ ancora da avere (che forse non rivedrò mai più). Altri miei ex colleghi aspettano cifre più alte, dell’ordine di 10.000€ (TFR e arretrati). </p>

<h2 id="come-ci-si-sente">Come ci si sente</h2>

<p><strong>La sensazione che ho avuto nei periodi più bui era che la colpa fosse mia</strong>. Ricordo in particolare il periodo di Natale, quando non potevo comprare nemmeno un regalino a mia moglie perché avevo 4,5€ sul conto! L’inconscio mi faceva apparire che non era l’azienda ad essere nel torto, <strong>ero io a non aver fatto la cosa giusta (quale, poi?!) al momento giusto.</strong></p>

<p><strong>E’ stata dura prendere qualsiasi decisione perché avevo sempre la sensazione di perderci qualcosa, ma non saprei dirvi cosa.</strong> E non vi parlo nemmeno della sensazione di irriconoscenza che ho avuto verso l’azienda “madre” del progetto, che mi hanno aiutato quando hanno potuto, e che ho provato a mollare un paio di volte. Insomma, una situazione psicologica debole.</p>

<h2 id="cosa-si-può-fare-per-evitare-tutto-questo">Cosa si può fare per evitare tutto questo</h2>

<p>A mente fredda è facile parlare, ma ci sono alcuni suggerimenti che posso darvi.</p>

<ol>
  <li>Al primo accenno di stipendio pagato in ritardo o non pagato affatto, <strong>cercate un’alternativa</strong>. L’ideale è rassegnare le dimissioni “normali” così non perdete mensilità, TFR, e quanto altro. Non credete a chi vi dice che tutto si aggiusterà, a meno che non abbiate accesso a conti e contratti e possiate dire con tranquillità che le cose stiano davvero a posto.</li>
  <li>Se avete un buon gruzzolo messo da parte e potete permettervi uno-due mesi senza stipendio (che, pur restando in azienda, accadrà), e se siete a almeno 3 mensilità arretrate, <strong>vi conviene licenziarvi IMMEDIATAMENTE per giusta causa e fare domanda di disoccupazione all’INPS.</strong> In rete si trovano <a href="http://www.guidafisco.it/mancato-pagamento-stipendio-dimissioni-870">molti articoli a riguardo</a>. E’ importante sapere che se vi licenziate “normalmente” non avete diritto a niente, ma il mancato stipendio è considerabile come <em>giusta causa</em>, purché dopo iniziate una causa civile contro il datore di lavoro per riavere i soldi indietro (altra condizione affinché l’INPS eroghi la disoccupazione).</li>
  <li><strong>Restare in azienda e sperare di essere licenziati è una pessima idea.</strong> Psicologicamente subirete tutto voi ed è estenuante. Anzi, non è nemmeno una tattica: è come stare su una barca in pieno oceano col mare in tempesta - o con la calma piatta: state bene finché avete viveri. </li>
</ol>

<p>Io spero che non vi accada mai nulla di tutto ciò, ma se vi è accaduto e volete provare a spiegare come vi siete sentiti e cosa avete fatto per uscirne, questo blog è a vostra disposizione. <strong>Non fate nomi di aziende perché io modero tutto e i commenti offensivi o diffamatori saranno immediatamente cancellati.</strong> Grazie per la comprensione.</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>The Javascript Event Loop for dummies</title>
        <link>https://michelenasti.com/the-javascript-event-loop-for-dummies/</link>
        <guid isPermaLink="true">https://michelenasti.com/the-javascript-event-loop-for-dummies/</guid>
        <pubDate>Sat, 25 Feb 2017 11:29:00 +0100</pubDate>
        <author></author>
        
          <description>&lt;p&gt;What does it mean that Javascript has no threads?! What is the event loop and how it is related? How can JS be even considered a modern programming language?! Let’s find out the surprising truth about this stuff.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/o_weighted_hula_hoop-1.jpg&quot; alt=&quot;An event loop. The dancer is not included.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;quiz-whats-going-on&quot;&gt;Quiz: what’s going on?&lt;/h2&gt;

&lt;p&gt;Let’s consider this small javascript program. What will be printed?&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Starting app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//first block &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'First setTimeout'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//second block &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Second setTimeout'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Finishing app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In case you don’t know: &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; is a javascript global function used to fire an action (the first argument) when the delay (second argument) is elapsed.&lt;/p&gt;

&lt;p&gt;So the first &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout()&lt;/code&gt; block will wait two seconds and then will write &lt;code class=&quot;highlighter-rouge&quot;&gt;First setTimeout&lt;/code&gt; on console.&lt;/p&gt;

&lt;p&gt;The second block will wait 0 milliseconds (… it doesn’t wait at all!) and then write &lt;code class=&quot;highlighter-rouge&quot;&gt;Second setTimeout&lt;/code&gt; to the console).&lt;/p&gt;

&lt;p&gt;Back to the quiz… what is the expected outcome?&lt;/p&gt;

&lt;table&gt;

&lt;thead&gt;

&lt;tr&gt;

&lt;th&gt;#1&lt;/th&gt;

&lt;th&gt;#2&lt;/th&gt;

&lt;th&gt;#3&lt;/th&gt;

&lt;th&gt;#4&lt;/th&gt;

&lt;/tr&gt;

&lt;/thead&gt;

&lt;tbody&gt;

&lt;tr&gt;

&lt;td&gt;Starting App  
First setTimeout  
Second setTimeout  
Finishing app&lt;/td&gt;

&lt;td&gt;Starting App  
Second setTimeout  
Finishing app  
First setTimeout&lt;/td&gt;

&lt;td&gt;Starting App  
Finishing app  
Second setTimeout  
First setTimeout&lt;/td&gt;

&lt;td&gt;Starting App  
Second setTimeout  
First setTimeout  
Finishing app&lt;/td&gt;

&lt;/tr&gt;

&lt;/tbody&gt;

&lt;/table&gt;

&lt;p&gt;What’s your choice? Don’t scroll down and think a little bit…&lt;/p&gt;

&lt;p&gt;Hey, you could just paste this code in your browser’s console to discover that … the right answer is &lt;strong&gt;#3&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This behaviour may seem surprising but is perfectly legit.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;h2 id=&quot;what-is-really-happening-under-the-hood&quot;&gt;what is really happening under the hood&lt;/h2&gt;

&lt;p&gt;Let’s start with a Dogma: &lt;strong&gt;in Javascript there is just one thread&lt;/strong&gt;. (&lt;em&gt;This is not correct anymore, because in the last years a new technology called &lt;code class=&quot;highlighter-rouge&quot;&gt;Service Workers&lt;/code&gt; has become available; but it is not important for now.&lt;/em&gt;) Everything is always executed in the same thread, even events that happen asynchronously.&lt;/p&gt;

&lt;p&gt;So what happens when an asynchronous event happen, like the &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; is a good example of an asynchronous event. Expanding the reasoning, this can be a reading of a file, or receiving a packet over the network. The philosophy doesn’t change.&lt;/p&gt;

&lt;p&gt;Bearing this in mind, let’s return to the basis.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The first &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log()&lt;/code&gt; is printed: &lt;code class=&quot;highlighter-rouge&quot;&gt;Starting app&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The first block is evaluated:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//first block &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'First setTimeout'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This code says: &lt;em&gt;after 2000 milliseconds, trigger the function specified as first argument&lt;/em&gt;. Since &lt;code class=&quot;highlighter-rouge&quot;&gt;() =&amp;gt; { ... }&lt;/code&gt; is a function, this is put in a &lt;strong&gt;callback queue&lt;/strong&gt; ready to get fired when the conditions occur.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The second block is evaluated:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//second block &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Second setTimeout'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Another explanation. This code says: &lt;em&gt;after zero milliseconds, fire the function specified as first argument&lt;/em&gt;. One would expect to be fired instantly, but this does not happen: The function is put in a &lt;strong&gt;callback queue&lt;/strong&gt;, and when NodeJS believes the conditions are respected, the function is fired.&lt;/p&gt;

&lt;p&gt;Node cannot fire the function NOW because there’s other javascript code being executed in the stack: it’s the &lt;em&gt;main program&lt;/em&gt;, the one that starts with the first &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log()&lt;/code&gt;. Think of this as a being wrapped inside a function; nodeJS is evaluating &lt;strong&gt;this&lt;/strong&gt; function and cannot evaluate others.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The last &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log()&lt;/code&gt; is evaluated and &lt;code class=&quot;highlighter-rouge&quot;&gt;Finishing app&lt;/code&gt; is written to console.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;NodeJS controls the call queue and decides what to fire. There are two functions in the call queue. It’s NodeJS’s responsibility to select the right one: since the second &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; had a higher priority, it will be fired first: you’ll then see &lt;code class=&quot;highlighter-rouge&quot;&gt;Second setTimeout&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Node will pop the previous function from the stack and will check again the callback queue. This time it will select the first block &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; callback, and will print &lt;code class=&quot;highlighter-rouge&quot;&gt;First setTimeout&lt;/code&gt;. Then, Node will pop this last function from the stack, and when it realizes that nothing more can be executed, the program will end.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-happens-when-you-read-data-from-a-file-or-receive-a-response-from-the-network&quot;&gt;What happens when you read data from a file or receive a response from the network?&lt;/h3&gt;

&lt;p&gt;The behavior is the same! Node will put your callback function in the callback queue, and it will be called as soon as possible.&lt;/p&gt;

&lt;h3 id=&quot;the-advantages-of-this&quot;&gt;The advantages of this&lt;/h3&gt;

&lt;p&gt;The main advantage is that &lt;strong&gt;the CPU will not stop when waiting for an I/O event&lt;/strong&gt;: it will just put the callback in the queue, and Node will execute the next available function. This means that one single CPU can handle more traffic and a greater number of concurrent connections; it is not limited by the number of threads a server can handle (because there is just one thread).&lt;/p&gt;

&lt;h3 id=&quot;the-disadvantage&quot;&gt;The disadvantage&lt;/h3&gt;

&lt;p&gt;The first disadvantage is that &lt;strong&gt;programming with async in mind and with callbacks is profoundly different&lt;/strong&gt; from the past: it is more difficult to reason about and to debug, at start. However, once you truly understand the philosophy and the way it works, you’ll never want to come back again.&lt;/p&gt;

&lt;h2 id=&quot;so-what-you-suggest&quot;&gt;So? What you suggest?&lt;/h2&gt;

&lt;p&gt;Node.js is a great idea made simple: a complex use case solved smartly. &lt;strong&gt;Learning Node will help you become a better programmer&lt;/strong&gt;, and this applies even if you work with other languages.&lt;/p&gt;

&lt;p&gt;I can only suggest you to google *NodeJS vs XXX performance”, change XXX with whatever you want… You’ll find that &lt;a href=&quot;https://dzone.com/articles/performance-comparison-between&quot;&gt;an interpreted language, with no tweaks, is faster than well-established platforms&lt;/a&gt; (Caution: old article! but the main points still hold) with years of optimization.&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/the-javascript-event-loop-for-dummies/">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>The Javascript Event Loop for dummies</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" The Javascript Event Loop for dummies ">
                          <figcaption>The Javascript Event Loop for dummies</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-02-25 11:29:00 CET">Sat, 25 Feb 2017 11:29:00 +0100</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>What does it mean that Javascript has no threads?! What is the event loop and how it is related? How can JS be even considered a modern programming language?! Let’s find out the surprising truth about this stuff.</p>

<p><img src="/images/o_weighted_hula_hoop-1.jpg" alt="An event loop. The dancer is not included." /></p>

<h2 id="quiz-whats-going-on">Quiz: what’s going on?</h2>

<p>Let’s consider this small javascript program. What will be printed?</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Starting app'</span><span class="p">);</span>

<span class="c1">//first block </span>
<span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'First setTimeout'</span><span class="p">);</span>
<span class="p">},</span> <span class="mi">2000</span><span class="p">);</span>

<span class="c1">//second block </span>
<span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Second setTimeout'</span><span class="p">);</span>
<span class="p">},</span> <span class="mi">0</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Finishing app'</span><span class="p">);</span>
</code></pre>
</div>

<p>In case you don’t know: <code class="highlighter-rouge">setTimeout</code> is a javascript global function used to fire an action (the first argument) when the delay (second argument) is elapsed.</p>

<p>So the first <code class="highlighter-rouge">setTimeout()</code> block will wait two seconds and then will write <code class="highlighter-rouge">First setTimeout</code> on console.</p>

<p>The second block will wait 0 milliseconds (… it doesn’t wait at all!) and then write <code class="highlighter-rouge">Second setTimeout</code> to the console).</p>

<p>Back to the quiz… what is the expected outcome?</p>

<table>

<thead>

<tr>

<th>#1</th>

<th>#2</th>

<th>#3</th>

<th>#4</th>

</tr>

</thead>

<tbody>

<tr>

<td>Starting App  
First setTimeout  
Second setTimeout  
Finishing app</td>

<td>Starting App  
Second setTimeout  
Finishing app  
First setTimeout</td>

<td>Starting App  
Finishing app  
Second setTimeout  
First setTimeout</td>

<td>Starting App  
Second setTimeout  
First setTimeout  
Finishing app</td>

</tr>

</tbody>

</table>

<p>What’s your choice? Don’t scroll down and think a little bit…</p>

<p>Hey, you could just paste this code in your browser’s console to discover that … the right answer is <strong>#3</strong>.</p>

<p>This behaviour may seem surprising but is perfectly legit.</p>

<p>Why?</p>

<h2 id="what-is-really-happening-under-the-hood">what is really happening under the hood</h2>

<p>Let’s start with a Dogma: <strong>in Javascript there is just one thread</strong>. (<em>This is not correct anymore, because in the last years a new technology called <code class="highlighter-rouge">Service Workers</code> has become available; but it is not important for now.</em>) Everything is always executed in the same thread, even events that happen asynchronously.</p>

<p>So what happens when an asynchronous event happen, like the <code class="highlighter-rouge">setTimeout</code>?</p>

<p><code class="highlighter-rouge">setTimeout</code> is a good example of an asynchronous event. Expanding the reasoning, this can be a reading of a file, or receiving a packet over the network. The philosophy doesn’t change.</p>

<p>Bearing this in mind, let’s return to the basis.</p>

<ul>
  <li>
    <p>The first <code class="highlighter-rouge">console.log()</code> is printed: <code class="highlighter-rouge">Starting app</code></p>
  </li>
  <li>
    <p>The first block is evaluated:</p>
  </li>
</ul>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="c1">//first block </span>
<span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'First setTimeout'</span><span class="p">);</span>
<span class="p">},</span> <span class="mi">2000</span><span class="p">);</span>
</code></pre>
</div>

<p>This code says: <em>after 2000 milliseconds, trigger the function specified as first argument</em>. Since <code class="highlighter-rouge">() =&gt; { ... }</code> is a function, this is put in a <strong>callback queue</strong> ready to get fired when the conditions occur.</p>

<ul>
  <li>The second block is evaluated:</li>
</ul>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="c1">//second block </span>
<span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Second setTimeout'</span><span class="p">);</span>
<span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
</code></pre>
</div>

<p>Another explanation. This code says: <em>after zero milliseconds, fire the function specified as first argument</em>. One would expect to be fired instantly, but this does not happen: The function is put in a <strong>callback queue</strong>, and when NodeJS believes the conditions are respected, the function is fired.</p>

<p>Node cannot fire the function NOW because there’s other javascript code being executed in the stack: it’s the <em>main program</em>, the one that starts with the first <code class="highlighter-rouge">console.log()</code>. Think of this as a being wrapped inside a function; nodeJS is evaluating <strong>this</strong> function and cannot evaluate others.</p>

<ul>
  <li>
    <p>The last <code class="highlighter-rouge">console.log()</code> is evaluated and <code class="highlighter-rouge">Finishing app</code> is written to console.</p>
  </li>
  <li>
    <p>NodeJS controls the call queue and decides what to fire. There are two functions in the call queue. It’s NodeJS’s responsibility to select the right one: since the second <code class="highlighter-rouge">setTimeout</code> had a higher priority, it will be fired first: you’ll then see <code class="highlighter-rouge">Second setTimeout</code>.</p>
  </li>
  <li>
    <p>Node will pop the previous function from the stack and will check again the callback queue. This time it will select the first block <code class="highlighter-rouge">setTimeout</code> callback, and will print <code class="highlighter-rouge">First setTimeout</code>. Then, Node will pop this last function from the stack, and when it realizes that nothing more can be executed, the program will end.</p>
  </li>
</ul>

<h3 id="what-happens-when-you-read-data-from-a-file-or-receive-a-response-from-the-network">What happens when you read data from a file or receive a response from the network?</h3>

<p>The behavior is the same! Node will put your callback function in the callback queue, and it will be called as soon as possible.</p>

<h3 id="the-advantages-of-this">The advantages of this</h3>

<p>The main advantage is that <strong>the CPU will not stop when waiting for an I/O event</strong>: it will just put the callback in the queue, and Node will execute the next available function. This means that one single CPU can handle more traffic and a greater number of concurrent connections; it is not limited by the number of threads a server can handle (because there is just one thread).</p>

<h3 id="the-disadvantage">The disadvantage</h3>

<p>The first disadvantage is that <strong>programming with async in mind and with callbacks is profoundly different</strong> from the past: it is more difficult to reason about and to debug, at start. However, once you truly understand the philosophy and the way it works, you’ll never want to come back again.</p>

<h2 id="so-what-you-suggest">So? What you suggest?</h2>

<p>Node.js is a great idea made simple: a complex use case solved smartly. <strong>Learning Node will help you become a better programmer</strong>, and this applies even if you work with other languages.</p>

<p>I can only suggest you to google *NodeJS vs XXX performance”, change XXX with whatever you want… You’ll find that <a href="https://dzone.com/articles/performance-comparison-between">an interpreted language, with no tweaks, is faster than well-established platforms</a> (Caution: old article! but the main points still hold) with years of optimization.</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
      <item>
        <title>I libri motivazionali funzionano?</title>
        <link>https://michelenasti.com/libri-motivazionali/</link>
        <guid isPermaLink="true">https://michelenasti.com/libri-motivazionali/</guid>
        <pubDate>Wed, 15 Feb 2017 01:00:00 +0100</pubDate>
        <author></author>
        
          <description>&lt;p&gt;In una discussione con alcuni miei amici abbiamo iniziato a parlare di libri che stavamo leggendo in questo periodo, e ne è nato un discorso sui libri &lt;em&gt;motivazionali&lt;/em&gt; (quei libri che ti insegnano a essere una persona migliore).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enrico&lt;/strong&gt; sta leggendo &lt;a href=&quot;http://amzn.to/2mKm1Ti&quot;&gt;&lt;strong&gt;Miracle Morning&lt;/strong&gt;, &lt;em&gt;trasforma la tua vita un mattino alla volta prima delle 8:00&lt;/em&gt;&lt;/a&gt;. E’ uno dei libri che ho nella lista quindi sono estremamente curioso.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/miracle-morning.jpg&quot; alt=&quot;miracle morning&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tuttavia, io ho una “politica” per cui non compro un nuovo libro se prima non ho finito il precedente, e sto ancora leggendo &lt;a href=&quot;http://amzn.to/2mK757I&quot;&gt;&lt;strong&gt;Chi ha e chi non ha&lt;/strong&gt;, &lt;em&gt;Storie di disuguaglianze&lt;/em&gt;&lt;/a&gt; libro a tratti pesantuccio e a tratti molto leggero che parla di disuguaglianza economica (non sociale).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/chi-ha-chi-non-ha.jpg&quot; alt=&quot;Chi ha e chi non ha&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tra i capitoli si parla, ad esempio, di:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;come si fa a misurare se una nazione è composta da ricchi o poveri;&lt;/li&gt;
  &lt;li&gt;chi è stato l’uomo più ricco della storia;&lt;/li&gt;
  &lt;li&gt;come interpretare le migrazioni di massa dei nostri giorni;&lt;/li&gt;
  &lt;li&gt;perchè solo 8 club di calcio dopo il 2001 sono diventati ricchissimi e gli altri annaspano;&lt;/li&gt;
  &lt;li&gt;Stati Uniti e Argentina sono partiti dalla stessa condizione economica, nel 1800. come mai ora sono così diverse? cosa è successo?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Da qui in poi il mio articolo assume un tono più colloquiale, anche per rappresentare meglio le cose che ci siamo detti.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michele (non io)&lt;/strong&gt; - ho una domanda per voi. Leggendo tanto e provando a correggere alcune abitudini, non vi capita di non riuscirci? Ovvero di riuscirci solo all’inizio quando ci s’impone di cambiare qualcosa, ma poi appena cambia una virgola nella routine le cose lette vengono abbandonate. La domanda è quante volte le metodologie lette poi le avete davvero applicate nella vita quotidiana.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Io&lt;/strong&gt; - A me questo capita con lo sport… specialmente quello che faccio da solo. Avevo preso la bellissima abitudine di andare a correre alle 19 tutte le sere … un’oretta di corsa. Poi una volta è venuto a piovere, un’altro giorno c’era un servizio da fare, poi un’altra cosa… e alla fine mi sono demotivato.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enrico&lt;/strong&gt; - In effetti a ripensarci forse non ci sono mai riuscito semplicemente leggendo, anzi non ricordo proprio di aver mai ottenuto risultato. Di sicuro mi è capitato di cambiare abitudini nella mia vita ma ci sono riuscito quasi inconsciamente, perché ero fortemente motivato a raggiungere un obiettivo. L’ho fatto senza pianificare niente, semplicemente sono cambiato in base ad un desiderio e ad un’esigenza, quindi in maniera naturale. La cosa complicata, dove i libri possono aiutarti, è pianificare e forzare il cambiamento, ossia possono ispirarti in qualche modo e rafforzare qualcosa che stavi già pensando.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Io&lt;/strong&gt; - Un libro che è riuscito a cambiare qualcosa è stato &lt;a href=&quot;http://amzn.to/2mJYCkP&quot;&gt;&lt;strong&gt;è facile smettere di fumare se sai come farlo&lt;/strong&gt;&lt;/a&gt;: avevo provato a smettere di fumare altre volte prima, ad esempio diminuendo le sigarette o smettendo di punto in bianco, e poi sono sempre tornato a fumare. Con il libro invece ho fumato fino all’ultima pagina, l’ho finito e mi sono chiesto: “mah?!” dopodiché non ho mai più fumato.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/smettere-fumare.jpg&quot; alt=&quot;E' facile smettere di fumare se sai come farlo&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ho fumato per un periodo circa 10 anni fa. Troppo tardi per arrabbiarsi ora, mamma :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Michele&lt;/strong&gt; - Waaa sta cosa di quel libro mi ha sempre intrigato, perchè non sei il primo che me lo dice. E’ incredibile.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Io&lt;/strong&gt; - In quel caso penso che mi abbia dato delle motivazioni psicologiche profonde che mi hanno fatto decidere di non prendere mai più una sigaretta. Quasi a dire “sono un cretino se fumo ancora”. Ma ammetto che ero fortemente determinato a smettere già di mio.
Altri amici a cui ho passato il libro e che non erano davvero intenzionati a smettere mi hanno detto tutti la stessa cosa: arrivati a metà libro si sono accorti che se avessero continuato avrebbero smesso davvero, … e hanno smesso di leggere.
In generale comunque non vado molto dietro a questi libri motivazionali. Ho sempre paura che raccontino fuffa. Però se anche per 1 settimana mi fanno diventare una persona migliore, un tentativo bisogna farlo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enrico&lt;/strong&gt; - Ad esempio, avevo iniziato a svegliarmi prima perché mi rendevo conto la mattina passava troppo velocemente e non riuscivo a fare tutte le cose che volevo. Poi sono capitato su questo libro che ha confermato alcune intuizioni che avevo, mi ha spiegato anche un possibile metodo da adottare per poter ottenere di più. Ora lo adatterò un po’ alle mie esigenze, però diciamo che ti dà una possibile strada da percorrere e ti suggerisce alcune riflessioni alle quali può darsi saresti arrivato da solo, ma anche no.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michele&lt;/strong&gt; - E’ logico che se è un argomento che già stai approfondendo, il risultato viene massimizzato. Quindi il concetto è tutto lì, questi libri aiutano quando sei pronto a recepirne l’insegnamento o le idee che ti propongono.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enrico&lt;/strong&gt; - Si, sono strapieni di fuffa, nel ho letti abbastanza da capire come prendermi solo i punti salienti. Questi libri sono fatti per abbracciare un pubblico ampio e persuadere le menti di persone che vanno dalla casalinga di 60 anni al ragazzino di 16 anni.
E’ normale che ti devono indorare la pillola in mille modi, ripeterti i concetti in mille salse fino a convincerti che quello che dicono è giusto; anche in questo, ad esempio, alcuni capitoli sono proprio l’identica copia di un altro, riformulato con esempi o strutturando il pensiero in ordine inverso. Alla fine si leggono velocemente proprio per questo :) 
Vi posso dare un’altra informazione: il libro più bello che ho letto è &lt;a href=&quot;https://michelenasti.com/2016/03/5-motivi-cui-rework-ti-cambiera-la-vita/&quot;&gt;REWORK&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2016/03/wp-1457508741600-2.jpg&quot; alt=&quot;Rework&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;IO&lt;/strong&gt; - letto anch’io!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Enrico&lt;/strong&gt; - l’ho apprezzato oltre per quello che dice anche perché è scritto in maniera essenziale, va dritto al punto senza perdersi in mille chiacchiere.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Qui si conclude la discussione “aulica”, poi da buoni amici abbiamo iniziato a parlare d’altro.&lt;/p&gt;

&lt;p&gt;Mi piacerebbe sapere da voi, c’è qualche libro motivazionale che avete letto? Che giudizio ne date? Fatemi sapere la vostra nei commenti. Buon lavoro!&lt;/p&gt;
</description>
        
        <content:encoded>
            <![CDATA[
                <!doctype html>
                <html lang="en" prefix="op: http://media.facebook.com/op#">
              <head>
                <meta charset="utf-8">
                <link rel="canonical" href="https://michelenasti.com/libri-motivazionali/">
                <meta property="op:markup_version" content="v1.0">
              </head>
              <body>
                <article>
                  <header>
                      <h1>I libri motivazionali funzionano?</h1>
                      
                      <figure>
                          <img src="https://michelenasti.com/images/michele_nasti.jpg" alt=" I libri motivazionali funzionano? ">
                          <figcaption>I libri motivazionali funzionano?</figcaption>
                      </figure>
                      
                      <time class="op-published" dateTime="2017-02-15 01:00:00 CET">Wed, 15 Feb 2017 01:00:00 +0100</time>
                      <time class="op-modified" dateTime=""></time>
                  </header>
                  
                    <p>In una discussione con alcuni miei amici abbiamo iniziato a parlare di libri che stavamo leggendo in questo periodo, e ne è nato un discorso sui libri <em>motivazionali</em> (quei libri che ti insegnano a essere una persona migliore).</p>

<p><strong>Enrico</strong> sta leggendo <a href="http://amzn.to/2mKm1Ti"><strong>Miracle Morning</strong>, <em>trasforma la tua vita un mattino alla volta prima delle 8:00</em></a>. E’ uno dei libri che ho nella lista quindi sono estremamente curioso.</p>

<p><img src="/images/miracle-morning.jpg" alt="miracle morning" /></p>

<p>Tuttavia, io ho una “politica” per cui non compro un nuovo libro se prima non ho finito il precedente, e sto ancora leggendo <a href="http://amzn.to/2mK757I"><strong>Chi ha e chi non ha</strong>, <em>Storie di disuguaglianze</em></a> libro a tratti pesantuccio e a tratti molto leggero che parla di disuguaglianza economica (non sociale).</p>

<p><img src="/images/chi-ha-chi-non-ha.jpg" alt="Chi ha e chi non ha" /></p>

<p>Tra i capitoli si parla, ad esempio, di:</p>
<ul>
  <li>come si fa a misurare se una nazione è composta da ricchi o poveri;</li>
  <li>chi è stato l’uomo più ricco della storia;</li>
  <li>come interpretare le migrazioni di massa dei nostri giorni;</li>
  <li>perchè solo 8 club di calcio dopo il 2001 sono diventati ricchissimi e gli altri annaspano;</li>
  <li>Stati Uniti e Argentina sono partiti dalla stessa condizione economica, nel 1800. come mai ora sono così diverse? cosa è successo?</li>
</ul>

<p>Da qui in poi il mio articolo assume un tono più colloquiale, anche per rappresentare meglio le cose che ci siamo detti.</p>

<p><strong>Michele (non io)</strong> - ho una domanda per voi. Leggendo tanto e provando a correggere alcune abitudini, non vi capita di non riuscirci? Ovvero di riuscirci solo all’inizio quando ci s’impone di cambiare qualcosa, ma poi appena cambia una virgola nella routine le cose lette vengono abbandonate. La domanda è quante volte le metodologie lette poi le avete davvero applicate nella vita quotidiana.</p>

<p><strong>Io</strong> - A me questo capita con lo sport… specialmente quello che faccio da solo. Avevo preso la bellissima abitudine di andare a correre alle 19 tutte le sere … un’oretta di corsa. Poi una volta è venuto a piovere, un’altro giorno c’era un servizio da fare, poi un’altra cosa… e alla fine mi sono demotivato.</p>

<p><strong>Enrico</strong> - In effetti a ripensarci forse non ci sono mai riuscito semplicemente leggendo, anzi non ricordo proprio di aver mai ottenuto risultato. Di sicuro mi è capitato di cambiare abitudini nella mia vita ma ci sono riuscito quasi inconsciamente, perché ero fortemente motivato a raggiungere un obiettivo. L’ho fatto senza pianificare niente, semplicemente sono cambiato in base ad un desiderio e ad un’esigenza, quindi in maniera naturale. La cosa complicata, dove i libri possono aiutarti, è pianificare e forzare il cambiamento, ossia possono ispirarti in qualche modo e rafforzare qualcosa che stavi già pensando.</p>

<p><strong>Io</strong> - Un libro che è riuscito a cambiare qualcosa è stato <a href="http://amzn.to/2mJYCkP"><strong>è facile smettere di fumare se sai come farlo</strong></a>: avevo provato a smettere di fumare altre volte prima, ad esempio diminuendo le sigarette o smettendo di punto in bianco, e poi sono sempre tornato a fumare. Con il libro invece ho fumato fino all’ultima pagina, l’ho finito e mi sono chiesto: “mah?!” dopodiché non ho mai più fumato.</p>

<p><img src="/images/smettere-fumare.jpg" alt="E' facile smettere di fumare se sai come farlo" /></p>

<blockquote>
  <p>Ho fumato per un periodo circa 10 anni fa. Troppo tardi per arrabbiarsi ora, mamma :)</p>
</blockquote>

<p><strong>Michele</strong> - Waaa sta cosa di quel libro mi ha sempre intrigato, perchè non sei il primo che me lo dice. E’ incredibile.</p>

<p><strong>Io</strong> - In quel caso penso che mi abbia dato delle motivazioni psicologiche profonde che mi hanno fatto decidere di non prendere mai più una sigaretta. Quasi a dire “sono un cretino se fumo ancora”. Ma ammetto che ero fortemente determinato a smettere già di mio.
Altri amici a cui ho passato il libro e che non erano davvero intenzionati a smettere mi hanno detto tutti la stessa cosa: arrivati a metà libro si sono accorti che se avessero continuato avrebbero smesso davvero, … e hanno smesso di leggere.
In generale comunque non vado molto dietro a questi libri motivazionali. Ho sempre paura che raccontino fuffa. Però se anche per 1 settimana mi fanno diventare una persona migliore, un tentativo bisogna farlo.</p>

<p><strong>Enrico</strong> - Ad esempio, avevo iniziato a svegliarmi prima perché mi rendevo conto la mattina passava troppo velocemente e non riuscivo a fare tutte le cose che volevo. Poi sono capitato su questo libro che ha confermato alcune intuizioni che avevo, mi ha spiegato anche un possibile metodo da adottare per poter ottenere di più. Ora lo adatterò un po’ alle mie esigenze, però diciamo che ti dà una possibile strada da percorrere e ti suggerisce alcune riflessioni alle quali può darsi saresti arrivato da solo, ma anche no.</p>

<p><strong>Michele</strong> - E’ logico che se è un argomento che già stai approfondendo, il risultato viene massimizzato. Quindi il concetto è tutto lì, questi libri aiutano quando sei pronto a recepirne l’insegnamento o le idee che ti propongono.</p>

<p><strong>Enrico</strong> - Si, sono strapieni di fuffa, nel ho letti abbastanza da capire come prendermi solo i punti salienti. Questi libri sono fatti per abbracciare un pubblico ampio e persuadere le menti di persone che vanno dalla casalinga di 60 anni al ragazzino di 16 anni.
E’ normale che ti devono indorare la pillola in mille modi, ripeterti i concetti in mille salse fino a convincerti che quello che dicono è giusto; anche in questo, ad esempio, alcuni capitoli sono proprio l’identica copia di un altro, riformulato con esempi o strutturando il pensiero in ordine inverso. Alla fine si leggono velocemente proprio per questo :) 
Vi posso dare un’altra informazione: il libro più bello che ho letto è <a href="https://michelenasti.com/2016/03/5-motivi-cui-rework-ti-cambiera-la-vita/">REWORK</a></p>

<p><img src="/wp-content/uploads/2016/03/wp-1457508741600-2.jpg" alt="Rework" /></p>

<ul>
  <li>
    <p><strong>IO</strong> - letto anch’io!</p>
  </li>
  <li>
    <p><strong>Enrico</strong> - l’ho apprezzato oltre per quello che dice anche perché è scritto in maniera essenziale, va dritto al punto senza perdersi in mille chiacchiere.</p>
  </li>
</ul>

<hr />

<p>Qui si conclude la discussione “aulica”, poi da buoni amici abbiamo iniziato a parlare d’altro.</p>

<p>Mi piacerebbe sapere da voi, c’è qualche libro motivazionale che avete letto? Che giudizio ne date? Fatemi sapere la vostra nei commenti. Buon lavoro!</p>

                  
                    <footer>
                        <aside>Written by Amit Seal Ami, a Lecturer from Institute of Information Technology, University of Dhaka.</aside>
                        <small>Copyright - Amit Seal Ami</small>
                  </footer>
                </article>
              </body>
            </html>
        ]]>
        </content:encoded>

      </item>
    
  </channel>
</rss>