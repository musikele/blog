<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.0">Jekyll</generator><link href="https://michelenasti.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://michelenasti.com/" rel="alternate" type="text/html" /><updated>2018-10-10T11:00:52+02:00</updated><id>https://michelenasti.com/</id><title type="html">Michele Nasti’s blog</title><subtitle>I'm a full stack Developer with an eye for the web.</subtitle><entry><title type="html">Let’s write our simple version of the require() function</title><link href="https://michelenasti.com/2018/10/02/let-s-write-a-simple-version-of-the-require-function.html" rel="alternate" type="text/html" title="Let's write our simple version of the require() function" /><published>2018-10-02T00:00:00+02:00</published><updated>2018-10-10T11:00:11+02:00</updated><id>https://michelenasti.com/2018/10/02/let-s-write-a-simple-version-of-the-require-function</id><content type="html" xml:base="https://michelenasti.com/2018/10/02/let-s-write-a-simple-version-of-the-require-function.html">&lt;p&gt;You should know that Javascript (better to say EcmaScript) does not specify any function to read and write files.&lt;/p&gt;

&lt;p&gt;In fact, &lt;strong&gt;Javascript is just the language used by many environments&lt;/strong&gt; (the browser, or NodeJS, are examples of environments) that offer more objects and functions to work with.&lt;/p&gt;

&lt;p&gt;Node was the first environment to offer a way to organize code in modules by using a special function called &lt;code&gt;require()&lt;/code&gt;. How does it work? Let’s try to implement it from zero.&lt;/p&gt;

&lt;p&gt;Here is an example of &lt;code&gt;require&lt;/code&gt; at work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//test.js
module.exports = &quot;Hello World&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//main.js
const test = require(&quot;./test.js&quot;); 
console.log(test) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s write that &lt;code&gt;require&lt;/code&gt; function.&lt;/p&gt;

&lt;h2 id=&quot;what-should-a-require-function-do&quot;&gt;What should a require() function do&lt;/h2&gt;

&lt;p&gt;a &lt;code&gt;require&lt;/code&gt; function is expected to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;read the content of a javascript file in a string&lt;/li&gt;
  &lt;li&gt;evaluate that code&lt;/li&gt;
  &lt;li&gt;save the exported function/object in a cache for later use (only read files once)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h3&gt;

&lt;p&gt;We will not rebuild the whole NodeJS in a single post. In fact, I will not implement many NodeJS checks and giggles, we are only interested in understand how things work.&lt;/p&gt;

&lt;p&gt;We will still need the real &lt;code&gt;require&lt;/code&gt; function to load the &lt;code&gt;fs&lt;/code&gt; module. I’m not cheating, it’s just that this post has to end sooner or later :)&lt;/p&gt;

&lt;h3 id=&quot;myrequire-function&quot;&gt;myRequire() function&lt;/h3&gt;

&lt;p&gt;here’s the code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//file setup.js

const fs = require('fs');

myRequire.cache = Object.create(null); //(1)

function myRequire(name) {   
    if (!(name in myRequire.cache)) {     
        let code = fs.readFileSync(name, 'utf8'); //(2)
        let module = {exports: {}}; //(3)
        myRequire.cache[name] = module; //(4)    
        let wrapper = Function(&quot;require, exports, module&quot;, code); //(5)
        wrapper(myRequire, module.exports, module); //(6)
    }
    return myRequire.cache[name].exports; //(7)
}

...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;did-you-forget-to-declare-myrequire-variable&quot;&gt;Did you forget to declare myRequire variable?&lt;/h3&gt;

&lt;p&gt;No. In Javascript, functions declared with &lt;code&gt;function&lt;/code&gt; keyword are evaluated before any other code (functions are “hoisted”) so they can be referenced even before they’re declared.&lt;/p&gt;

&lt;p&gt;Also, functions can have properties (&lt;em&gt;this is javascript&lt;/em&gt;!) so you can add the &lt;code&gt;cache&lt;/code&gt; property to the &lt;code&gt;myRequire&lt;/code&gt; function &lt;strong&gt;(step 1)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finally we’re creating the &lt;code&gt;cache&lt;/code&gt; property with &lt;code&gt;Object.create&lt;/code&gt;. With this function we can specify the object prototype, we have chosen to not specify a prototype. Why? This way we don’t mess with other functions or properties declared by the runtime. &lt;a href=&quot;https://www.reddit.com/r/javascript/comments/5e62us/is_there_a_reason_to_create_an_object_without_a/&quot;&gt;Here’s an explanation&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Let’s go back to &lt;code&gt;myRequire&lt;/code&gt; . If the file we’re importing is not in cache, we read the file from disk &lt;strong&gt;(step 2)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Then we declare an empty &lt;code&gt;module&lt;/code&gt; object with just one property, &lt;code&gt;exports&lt;/code&gt; &lt;strong&gt;(step 3)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We add this empty module to the cache, using the filename as the key, and then the magic happens &lt;strong&gt;(step 4)&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-function-constructor&quot;&gt;The Function constructor&lt;/h2&gt;

&lt;p&gt;In JS we can evaluate a string js code in two ways. The first way is via &lt;code&gt;eval()&lt;/code&gt; function, that is a bit dangerous (it messes up the scope) so it is highly discouraged to use it.&lt;/p&gt;

&lt;p&gt;The second way to evaluate code that we have in a string is via the &lt;code&gt;Function&lt;/code&gt; constructor. This constructor takes a string with the arguments and a string with the code. This way everything has its own scope and doesn’t mess things up for others.&lt;/p&gt;

&lt;p&gt;So, basically we are creating a new function with these variables &lt;strong&gt;(step 5)&lt;/strong&gt;: &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;exports&lt;/code&gt;, and &lt;code&gt;module&lt;/code&gt;. Let’s think for a moment at the first example of this post, the file &lt;code&gt;test.js&lt;/code&gt;: it becomes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function(require, exports, module) {
  module.exports = &quot;Hello World&quot; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the second file, &lt;code&gt;main.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function(require, exports, module) {
  const test = require(&quot;./test.js&quot;); 
  console.log(test) 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Variables that seemed “global” in files are indeed passed as function arguments.&lt;/p&gt;

&lt;h2 id=&quot;last-step-executing-the-function&quot;&gt;Last step: executing the function&lt;/h2&gt;

&lt;p&gt;We have created &lt;strong&gt;(step 6)&lt;/strong&gt; a &lt;code&gt;wrapper&lt;/code&gt; variable that holds a function, but the function is never executed. We do this at the line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;wrapper(myRequire, module.exports, module); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the second variable (that should be &lt;code&gt;exports&lt;/code&gt;) is just a handle to &lt;code&gt;module.exports&lt;/code&gt;; NodeJS creators thought that this &lt;a href=&quot;https://blog.tableflip.io/the-difference-between-module-exports-and-exports/&quot;&gt;could have helped in writing less code…&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When Node executes the function, everything that was “exported” (your public API) gets linked to the cache.&lt;/p&gt;

&lt;p&gt;(Remember the &lt;code&gt;myRequire.cache[name] = module;&lt;/code&gt; line? When it was first found by the compiler it was point to a dummy &lt;code&gt;{ exports: {} }&lt;/code&gt; object; now it contains your module.)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NOTE. Since we pass &lt;code&gt;myRequire&lt;/code&gt; to the wrapper function, we can from now on use &lt;code&gt;require&lt;/code&gt; in our test files, but our require gets called. Add a console.log if you don’t trust me ;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally… &lt;code&gt;myRequire&lt;/code&gt; returns the &lt;code&gt;export&lt;/code&gt;ed stuff you declared &lt;strong&gt;(step 7)&lt;/strong&gt;, and that we saved to the cache so we won’t have to reevaluate this code again.&lt;/p&gt;

&lt;h2 id=&quot;final-considerations&quot;&gt;Final considerations&lt;/h2&gt;

&lt;p&gt;An example of this code &lt;a href=&quot;https://github.com/musikele/require-example&quot;&gt;can be found here&lt;/a&gt;, along with some console logs that explain what’s going on.&lt;/p&gt;

&lt;p&gt;The idea of this article comes from the &lt;a href=&quot;https://eloquentjavascript.net/10_modules.html#h_N33QHgUxbG&quot;&gt;explanation of this function at chapter 10 (Modules)&lt;/a&gt;. The book (&lt;a href=&quot;https://www.eloquentjavascript.net&quot;&gt;Eloquent Javascript&lt;/a&gt;) is excellent, but I had the urge to better understand, and try with a debugger, what I could not understand with my mind alone.&lt;/p&gt;

&lt;p&gt;You should definitely read the book if you want to better understand javascript.&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="javascript" /><category term="nodejs" /><summary type="html">You should know that Javascript (better to say EcmaScript) does not specify any function to read and write files.</summary></entry><entry><title type="html">Javascript: call functions without using parentheses (what?!)</title><link href="https://michelenasti.com/2018/09/19/Javascript-chiamare-funzioni-senza-usare-parentesi-(what!).html" rel="alternate" type="text/html" title="Javascript: call functions without using parentheses (what?!)" /><published>2018-09-19T00:00:00+02:00</published><updated>2018-09-20T09:52:23+02:00</updated><id>https://michelenasti.com/2018/09/19/Javascript-chiamare-funzioni-senza-usare-parentesi-(what!)</id><content type="html" xml:base="https://michelenasti.com/2018/09/19/Javascript-chiamare-funzioni-senza-usare-parentesi-(what!).html">&lt;p&gt;Let’s dig in a not-well-publicized ES6 feature: calling functions without using parentheses.&lt;/p&gt;

&lt;p&gt;If you are familiar with Ruby, you know that in Ruby you can omit parentheses when they’re not ambiguous:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;puts 'hello world' 
puts('hello world') 
//-&amp;gt; same result!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But we’re in javascript and this is not allowed. Uhm… &lt;strong&gt;in some forms it &lt;em&gt;IS&lt;/em&gt; allowed!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-ive-discovered-this-sqorn&quot;&gt;How I’ve discovered this: SQORN&lt;/h2&gt;

&lt;p&gt;In my search for new libraries, I found &lt;a href=&quot;https://sqorn.org/&quot;&gt;SQORN&lt;/a&gt; library. Sqorn allows you to write sql queries in nodejs.&lt;/p&gt;

&lt;p&gt;What captured my attention is &lt;em&gt;the way Sqorn is intended to be used&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const sq = require('sqorn-pg')()
const kid = sq.from`person`.where`age &amp;lt; 13` 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What’s happening here?! Where are parentheses? &lt;strong&gt;Is this javascript after all?&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;template-strings&quot;&gt;Template strings&lt;/h2&gt;

&lt;p&gt;You should already know the newest way of declaring a string in JS, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const str = `this is a string!`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it is very useful because you can interpolate values inside, witouth concatenating:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var name = 'Michele';
//es5
var helloES5 = &quot;Hello, &quot; + name;
//es6 
const helloES6 = `Hello ${name}`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Imagine you have to concatenate 6-7 items in the same sentence… You’ll agree the ES6 version is clearer ;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The nice part of this string declaration is that you can pass strings as arguments to functions without parentheses:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function hello(name) {
	console.log(`How are you ${name}`);
}

// The convention is to write the string right 
// after the function name...
hello`Michele` 
//-&amp;gt; How are you Michele 

//...but you can put a space too 
hello `Michele `
//-&amp;gt; How are you Michele
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This syntax doesn’t work with &lt;code&gt;'&lt;/code&gt; or &lt;code&gt;&quot;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;hello 'Michele'
//-&amp;gt; SyntaxError: unexpected token: string literal
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;more-power-to-string-templates&quot;&gt;More power to string templates!&lt;/h2&gt;

&lt;p&gt;Studying this syntax I discovered intresting features. For example, functions can extract the variables (ones in &lt;code&gt;${...}&lt;/code&gt;) from the template string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var a = 5;
var b = 10;

function tag(strings, ...values) {
  console.log(strings[0]); // &quot;Hello &quot;
  console.log(strings[1]); // &quot; World &quot;
  console.log(values[0]);  // 15
  console.log(values[1]);  // 50
  
  return &quot;Bazinga!&quot;;
}

tag`Hello ${ a + b } World ${ a * b }`;
// &quot;Bazinga!&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This stuff is pretty nice but it is a bit obscure. Infact, apart from SQORN, I’ve never seen this syntax used elsewhere. &lt;strong&gt;It’s a nice-to-know feature, good for impressing others, but my suggestion is to use this only if it’s the clearest way to express your concepts.&lt;/strong&gt;&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="javascript" /><summary type="html">Let’s dig in a not-well-publicized ES6 feature: calling functions without using parentheses.</summary></entry><entry><title type="html">Symbols &amp;amp; Iterators in Javascript</title><link href="https://michelenasti.com/2018/09/04/symbols-iterators-in-javascript.html" rel="alternate" type="text/html" title="Symbols &amp; Iterators in Javascript" /><published>2018-09-04T00:00:00+02:00</published><updated>2018-09-04T16:41:34+02:00</updated><id>https://michelenasti.com/2018/09/04/symbols-iterators-in-javascript</id><content type="html" xml:base="https://michelenasti.com/2018/09/04/symbols-iterators-in-javascript.html">&lt;p&gt;ES6 introduced the new &lt;code&gt;for ... of&lt;/code&gt; syntax to iterate a collection. Did you know? And how does it work?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arr = ['banana', 'apple', 'orange']

for (const fruit of arr) {
  console.log(fruit)
}
// -&amp;gt; banana
// -&amp;gt; apple
// -&amp;gt; orange
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;how-does-it-work&quot;&gt;How does it work&lt;/h3&gt;

&lt;p&gt;What you are seeing is a syntax that iterates on an &lt;strong&gt;iterator&lt;/strong&gt;, a common concept in other languages but fairly new in Javascript.&lt;/p&gt;

&lt;p&gt;Basically, if an object has an &lt;em&gt;iterator&lt;/em&gt; you can use the &lt;code&gt;for...of&lt;/code&gt; syntax to iterate on it.&lt;/p&gt;

&lt;h3 id=&quot;how-do-we-create-an-iterator&quot;&gt;How do we create an iterator?&lt;/h3&gt;

&lt;p&gt;To create iterators, we must provide a new property in our object called &lt;code&gt;Symbol.iterator&lt;/code&gt;. &lt;em&gt;…what ?&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-symbol&quot;&gt;What is a Symbol&lt;/h2&gt;

&lt;p&gt;a Symbol is a javascript function that returns a value that is guaranteed to be unique.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const helloSymbol = Symbol('hello')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They accept names, to be easily recognized and debugged, but if you create two symbols with the same name, they are not equal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const helloSymbol2 = Symbol('hello')
console.log(helloSymbol === helloSymbol2)
/// -&amp;gt; false 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;why-do-we-need-symbols&quot;&gt;Why do we &lt;em&gt;need&lt;/em&gt; symbols?&lt;/h3&gt;

&lt;p&gt;First, I’ve seen a similar concept in other languages, like Ruby. They are useful to define properties (or functions) that are shared across different types of objects. You could use symbols to uniquely identify properties in your maps, for example.&lt;/p&gt;

&lt;p&gt;There is one symbol that has been already created by the Javascript runtime, and it’s called &lt;code&gt;Symbol.iterator&lt;/code&gt;. **If an object has a property named &lt;code&gt;Symbol.iterator&lt;/code&gt;, it is iterable.&lt;/p&gt;

&lt;h2 id=&quot;how-do-we-create-an-iterator-for-our-objects&quot;&gt;How do we create an Iterator for our objects&lt;/h2&gt;

&lt;p&gt;To create an iterator the first thing to do is to attach the property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Example {
  [Symbol.iterator]() {
    ...
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, this is a legitimate name for a property. Infact, &lt;strong&gt;allowed names for properties are strings and symbols&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The only caveat is that we have to use the square brackets to define the property name, since it is an object.&lt;/p&gt;

&lt;p&gt;The iterator must return a function that returns an object, containing a &lt;code&gt;next()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;next()&lt;/code&gt; function, in turn, returns an object with two properties, &lt;code&gt;value&lt;/code&gt; (the actual element of the iteration) and &lt;code&gt;done&lt;/code&gt; (set to &lt;code&gt;true&lt;/code&gt; when the iteration has ended).&lt;/p&gt;

&lt;p&gt;Confused?&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;Do you remember the &lt;code&gt;Group&lt;/code&gt; class we &lt;a href=&quot;https://michelenasti.com/2018/09/03/some-things-you-may-not-know-about-object-oriented-javascript-es6.html&quot;&gt;designed in the last article&lt;/a&gt;? Basically it is a Set object with another name. It holds just one copy for every object (duplicates are not allowed) and we use a simple array to store data inside. Let’s write an iterator for it!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
const Group {
  ...
  [Symbol.iterator]() {
    // a reference of internal elements...
    const elements = this.elements;
    if (elements.length === 0) return; 
    //the index we'll use to track the next element to return
    let i=-1;
    return {
      //we return a next() function that will be called many times, 
      //once for every element in the Group 
      next() {
        i++;
        //the next function returns an object with two properties
        return {
          //in value we store the actual element we're returning 
          value: elements[i],
          // if true, the iteration stops 
          done: i === elements.length ? true : false
        }
      }
    }
  }
}

//Some tests! 
// You find the code for the Group class in the previous article ;) 
for (let value of Group.from([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;])) {
  console.log(value);
}
// → a
// → b
// → c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;….And this is how we create iterable objects in Javascript.&lt;/p&gt;

&lt;p&gt;Easy, isn’t it?&lt;/p&gt;

&lt;p&gt;Just to let you know, (don’t know if it’s useful..) &lt;code&gt;String&lt;/code&gt; is iterable, so you can write this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const hello = &quot;Hello&quot; 
for (const letter of hello) {
  console.log(letter)
}
// -&amp;gt; H
// -&amp;gt; e
// -&amp;gt; l
// -&amp;gt; l
// -&amp;gt; o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See you in the next iteration!&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="javascript" /><category term="es6" /><summary type="html">ES6 introduced the new for ... of syntax to iterate a collection. Did you know? And how does it work?</summary></entry><entry><title type="html">Things you may not know about Object Oriented Javascript (Es6)</title><link href="https://michelenasti.com/2018/09/03/some-things-you-may-not-know-about-object-oriented-javascript-es6.html" rel="alternate" type="text/html" title="Things you may not know about Object Oriented Javascript (Es6)" /><published>2018-09-03T00:00:00+02:00</published><updated>2018-09-04T13:09:43+02:00</updated><id>https://michelenasti.com/2018/09/03/some-things-you-may-not-know-about-object-oriented-javascript-es6</id><content type="html" xml:base="https://michelenasti.com/2018/09/03/some-things-you-may-not-know-about-object-oriented-javascript-es6.html">&lt;p&gt;Hi there! Let’s try to create a simple &lt;code&gt;Group&lt;/code&gt; object, very similar to the &lt;a href=&quot;https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt;existing &lt;code&gt;Set&lt;/code&gt; object&lt;/a&gt; in Javascript. Here’s the specification for this Abstract Data Type:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It should provide a constructor that creates an empty Group.&lt;/li&gt;
  &lt;li&gt;An object can be contained only once; there cannot be duplicates.&lt;/li&gt;
  &lt;li&gt;It must provide &lt;code&gt;add()&lt;/code&gt;, &lt;code&gt;delete()&lt;/code&gt; and &lt;code&gt;has()&lt;/code&gt; methods.&lt;/li&gt;
  &lt;li&gt;There must be a &lt;code&gt;length&lt;/code&gt; property containing the number of objects stored inside.&lt;/li&gt;
  &lt;li&gt;Provide a static method that creates a &lt;code&gt;Group&lt;/code&gt; from an array.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;We’ll use this example to explain stuff regarding javascript new &lt;code&gt;class&lt;/code&gt; keyword introduced in ES6. We will &lt;strong&gt;not&lt;/strong&gt; focus on the performance of this class; only on js syntax.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-constructor&quot;&gt;The constructor&lt;/h2&gt;

&lt;p&gt;Let’s start from the basics. Here’s the constructor for this object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Group {
  
  constructor() {
    this.elements = []
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Group&lt;/code&gt; class has an internal array that will hold the list of objects.&lt;/p&gt;

&lt;h2 id=&quot;the-has-method&quot;&gt;The has() method&lt;/h2&gt;

&lt;p&gt;Let’s start with the &lt;code&gt;has&lt;/code&gt; method, because it will be used widely in other methods. This method should check that an element is already in the group. Here’s the code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Group {
  ...
  has(element) {
    return this.elements.indexOf(element) &amp;gt;= 0 ? true : false
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically we leave to &lt;code&gt;indexOf()&lt;/code&gt; the burden of checking if the element is already present in our group.&lt;/p&gt;

&lt;h2 id=&quot;add-and-delete-method&quot;&gt;add() and delete() method&lt;/h2&gt;

&lt;p&gt;If an element is not present, &lt;code&gt;add&lt;/code&gt; should add the element to the group. And of course,  if an element is present, &lt;code&gt;delete&lt;/code&gt; should… delete.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Group {
  ...
  add(element) {
    if (this.has(element)) return
    this.elements.push(element)
  }

  delete(element) {
    if (!this.has(element)) return
    this.elements.splice(this.elements.indexOf(element), 1)        
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What’s going on in the &lt;code&gt;delete()&lt;/code&gt; method? We search for the index of the element in the array, then we call the &lt;code&gt;[splice()](https://www.w3schools.com/jsref/jsref_splice.asp)&lt;/code&gt;&lt;a href=&quot;https://www.w3schools.com/jsref/jsref_splice.asp&quot;&gt; function&lt;/a&gt; that returns a new array without the element at the specified index. The second argument is the number of elements to remove.&lt;/p&gt;

&lt;h2 id=&quot;that-dont-impress-me-much-fun-begins-now-getters-and-setters&quot;&gt;“That don’t impress me much”. Fun begins now: getters and setters&lt;/h2&gt;

&lt;p&gt;Let’s see how to create a &lt;em&gt;derived&lt;/em&gt; property in a javascript object. A derived property is a property that changes when another property changes. For example we want to write a derived property to get the number of the elements for the group.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Group {
  ...
  get length() {
    return this.elements.length
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;there’s the keyword &lt;code&gt;get&lt;/code&gt; that specifies this property as a &lt;em&gt;getter&lt;/em&gt;. When we call &lt;code&gt;group.length&lt;/code&gt; (&lt;strong&gt;note: no parenthesis!&lt;/strong&gt;) we get the length of the inner array. We can write very complex stuff in here, and we can access the &lt;code&gt;length&lt;/code&gt; property as a normal property - the user will not know what’s going on internally.&lt;/li&gt;
  &lt;li&gt;There’s also the &lt;code&gt;set&lt;/code&gt; keyword that you can use for setting a property. Here’s an example:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Example {
  constructor() {
    this.hidden = 3
  }
  set property(element) {
    this.hidden = element
  }
  
  get property() {
    return this.hidden*this.hidden 
}

const example = new Example()
console.log(example.hidden)
// --&amp;gt; 3
console.log(example.property)
// --&amp;gt; 9, the getter returns the square of hidden
example.property = 4
// now `hidden` is set to 4
console.log(example.hidden)
// --&amp;gt; 4
console.log(example.property)
// --&amp;gt; 16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This mechanism is very powerful and you can do a lot of stuff with it. VueJS uses this mechanism to create the Vue object filled with the &lt;code&gt;data&lt;/code&gt; properties.&lt;/p&gt;

&lt;h2 id=&quot;static-methods&quot;&gt;Static methods&lt;/h2&gt;

&lt;p&gt;Our last piece of exercise is to build a static method for the &lt;code&gt;Group&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;A static method are called without instantiating their class and are callable when the class is not instantiated. Let’s see an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Group {
  ...
  static from(elements) {
	//here we instantiate the object that will be returned
    const group = new Group()
    //for semplicity let's assume that `elements` is an array. 
	for (let elem of elements) {
      group.add(elem)
    }
    return group
  }
}

const group = Group.from([&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;one&quot;]);
// -&amp;gt; returns a Group 

console.log(group.length)
// -&amp;gt; 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;finally&quot;&gt;Finally…&lt;/h2&gt;

&lt;p&gt;I don’t suggest you to program in JS as you would in Java; JS object oriented features in JS are very different compared to other languages. However, if you find that something should be an object, and you end up writing an Object, there two tricks might become handy.&lt;/p&gt;

&lt;p&gt;Next time we’ll talk about iterators and symbols in Javascript, another nice addition to the language. Stay tuned!&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="javascript" /><category term="es6" /><summary type="html">Hi there! Let’s try to create a simple Group object, very similar to the existing Set object in Javascript. Here’s the specification for this Abstract Data Type:</summary></entry><entry><title type="html">“ma… cosa intendete per testing?” - una breve introduzione al testing software</title><link href="https://michelenasti.com/2018/08/22/ma-cosa-intendete-per-testing-una-breve-introduzione-al-testing-software.html" rel="alternate" type="text/html" title="&quot;ma... cosa intendete per testing?&quot; - una breve introduzione al testing software " /><published>2018-08-22T00:00:00+02:00</published><updated>2018-08-22T13:19:02+02:00</updated><id>https://michelenasti.com/2018/08/22/ma-cosa-intendete-per-testing-una-breve-introduzione-al-testing-software</id><content type="html" xml:base="https://michelenasti.com/2018/08/22/ma-cosa-intendete-per-testing-una-breve-introduzione-al-testing-software.html">&lt;p&gt;Mi chiedeva Emanuele su Quora:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;…posso sapere con una certa  precisione cosa intendete con testing? Questa cosa mi ha incuriosito e  mi piacerebbe conoscerne di più.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/Testing_in_Progress.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Per testing si intende &lt;strong&gt;un’esecuzione del codice per assicurarsi che faccia  esattamente ciò che viene richiesto&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Esistono sostanzialmente due tipi di testing, &lt;em&gt;manuale&lt;/em&gt; e &lt;em&gt;automatico&lt;/em&gt;. Il &lt;strong&gt;testing manuale&lt;/strong&gt; è quello che fa un programmatore dopo che ha sviluppato il codice: lancia l’applicazione e verifica che faccia ciò che dovrebbe. A volte sono altri utenti in carne ed ossa a fare il test dell’applicazione.&lt;/p&gt;

&lt;p&gt;Il testing manuale è efficace e immediato se l’app è semplice o di piccole dimensioni: al crescere della complessità potrebbe essere lungo in termini di tempo, e impreciso nei risultati.&lt;/p&gt;

&lt;p&gt;Esempio: &lt;em&gt;un’app per prenotare visite mediche&lt;/em&gt;. Immaginiamo di aver realizzato la funzionalità di modifica della data di una visita. Se faccio l’edit di una visita e seleziono una data e un orario che già sono state prenotate da qualcun altro, il sistema deve rispondere che l’orario richiesto non è disponibile. Riesci a immaginare quanto tempo serva per poter rieseguire questo caso di test, ogni volta? &lt;em&gt;(Ti aiuto: bisogna prima creare una visita… poi crearne una seconda… poi prendere la prima e impostare la data e l’orario della seconda… e verificare il messaggio di errore)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Passiamo al &lt;strong&gt;test di  tipo automatico&lt;/strong&gt;. Innanzitutto viene scritto in un linguaggio di  programmazione vero e proprio. Nel test viene definito il setup iniziale (es. crea DUE visite nel sistema) e poi viene eseguito il test vero e proprio, ossia cerca la prima visita, e cambia la data e l’orario a quello della seconda.&lt;/p&gt;

&lt;p&gt;Infine, controlliamo che il sistema abbia restituito l’errore. Se è accaduto, il test ha avuto successo (si, se il  sistema risponde correttamente che un’operazione non si può fare, è un  caso di successo!). Se così non fosse, il test dovrebbe fallire.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quali sono gli svantaggi di questo approccio?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;che il test lo può scrivere solo un programmatore,&lt;/li&gt;
  &lt;li&gt;per scrivere il test ci vuole del tempo un  po’ più lungo della mera esecuzione;&lt;/li&gt;
  &lt;li&gt;inoltre, se cambia l’applicazione, bisogna cambiare anche i test relativi.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;I vantaggi, invece, sono un  aumento della qualità generale e un’efficienza nell’esecuzione&lt;/strong&gt;, anche in termini di tempo. Ad esempio, è prassi eseguire tutti i test ad ogni modifica del sistema, per assicurarsi di non aver rotto aree  dell’applicazione collegate con quella che stiamo modificando e che  difficilmente andremmo a testare “manualmente”.&lt;/p&gt;

&lt;p&gt;In questa risposta ho dato una visione molto generica del software testing; esistono tante altre sotto-aree (integration, unit, e2e…) e tecniche da conoscere, ma il senso generale è che si, &lt;strong&gt;un computer può  fare dei test al posto tuo, è molto più veloce di te, e ne guadagni in qualità.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;Link alla domanda originale&lt;/a&gt;&lt;/p&gt;</content><author><name>musikele</name></author><category term="Italiano" /><category term="testing" /><summary type="html">Mi chiedeva Emanuele su Quora:</summary></entry><entry><title type="html">Handling configuration for mutliple environments in NodeJS</title><link href="https://michelenasti.com/2018/07/22/laravel-style-config-in-nodejs.html" rel="alternate" type="text/html" title="Handling configuration for mutliple environments in NodeJS" /><published>2018-07-22T00:00:00+02:00</published><updated>2018-07-22T09:10:53+02:00</updated><id>https://michelenasti.com/2018/07/22/laravel-style-config-in-nodejs</id><content type="html" xml:base="https://michelenasti.com/2018/07/22/laravel-style-config-in-nodejs.html">&lt;p&gt;Imagine you have a NodeJS app you’re writing, and this app runs on several different environments:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;on your &lt;strong&gt;developer&lt;/strong&gt; PC, it should use some environment variables (e.g. database connection to &lt;em&gt;localhost&lt;/em&gt;, port to use &lt;em&gt;3000&lt;/em&gt;…)&lt;/li&gt;
  &lt;li&gt;when you push your code you may want to run some continuous integration &amp;amp; deployiment on a &lt;strong&gt;test environment&lt;/strong&gt;, so you have to configure new environment variables: database now points to &lt;em&gt;192.168.xx.yy&lt;/em&gt;, port is &lt;em&gt;8000…&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Finally, on the &lt;strong&gt;production environment&lt;/strong&gt; you use the official values for these configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How do you handle this? There are several ways to accomplish this task, I wanted to replicate the simple, easy solution provided by &lt;em&gt;Laravel&lt;/em&gt; in &lt;strong&gt;NodeJS&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-does-laravel-config-works&quot;&gt;How does laravel config works&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;https://laravel.com/docs/5.6/configuration&quot;&gt;Laravel&lt;/a&gt; you create as many env files you want, for example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;.dev.env&lt;/code&gt;, that contains configuration for development environment&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;.test.env&lt;/code&gt;, for test environment&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;.prod.env&lt;/code&gt; for production&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then there’s a last file called &lt;code&gt;.env&lt;/code&gt; that contains a single variable:&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;APP_ENV=dev&lt;/code&gt; (or test, or prod).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’re in NodeJS, how do we simulate this behaviour?&lt;/p&gt;

&lt;h2 id=&quot;a-node-solution&quot;&gt;a Node solution&lt;/h2&gt;

&lt;p&gt;First, our configuration files are js files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;.development.js&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;.test.js&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;.production.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Naming of files has changed a little bit, we’ll see why in a while.&lt;/p&gt;

&lt;p&gt;Let’s see the content of the .development.js test file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;//.development.js 

module.exports = {
    API_URL: 'api_url',
    API_KEY: 'api_key',
    SECRET_KEY: 'secret_key'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;.production.js&lt;/code&gt; and &lt;code&gt;.test.js&lt;/code&gt; will contain an object with the same keys but different values.&lt;/p&gt;

&lt;h2 id=&quot;the-environment-variable-node_env&quot;&gt;The environment variable NODE_ENV&lt;/h2&gt;

&lt;p&gt;Since Express became the most popular application server in Node, the NODE_ENV variable has became popular too. In Express, &lt;a href=&quot;https://stackoverflow.com/a/16979503/1020090&quot;&gt;app.get(‘env’) is used to retrieve the execution environment&lt;/a&gt;. Many popular platforms, like Heroku, set this variable to &lt;code&gt;production&lt;/code&gt; and you can also change to your needs, too.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app.get('env')&lt;/code&gt; is pretty much implemented like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;return process.env.NODE_ENV || 'development'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So you know that if the variable is not set, it is defaulted to &lt;code&gt;development&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s write a solution that is not express-dependent.&lt;/p&gt;

&lt;p&gt;Here’s the configuration.js file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;//configuration.js 

const env = process.env.NODE_ENV || 'development'

module.exports = require(`../.${env}.js`) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Based on the &lt;code&gt;NODE_ENV&lt;/code&gt; variable, we will pick up the right &lt;code&gt;.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;And now let’s test this. Run &lt;code&gt;node index.js&lt;/code&gt; (should start with &lt;code&gt;development&lt;/code&gt; environment):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-index.js&quot;&gt;//index.js

const configuration = require('./configuration')

console.log('configuration: ', configuration)
// =&amp;gt;  
// configuration:  { API_URL: 'api_url',
// API_KEY: 'api_key',
// SECRET_KEY: 'secret_key' }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How to start with other configurations?&lt;/p&gt;

&lt;p&gt;Either set this in package.json:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;//package.json 

 &quot;scripts&quot;: {
    &quot;start&quot;: &quot;node index.js&quot;,
    &quot;start:test&quot;: &quot;NODE_ENV=test node index.js&quot;,
    &quot;start:prod&quot;: &quot;NODE_ENV=production node index.js&quot;
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and run with &lt;code&gt;npm run start:test&lt;/code&gt;; or set the &lt;code&gt;NODE_ENV&lt;/code&gt; variable directly on the server (docker, heroku, aws… they all allow you to set env variables).&lt;/p&gt;

&lt;h2 id=&quot;some-security-concerns&quot;&gt;Some security concerns&lt;/h2&gt;

&lt;p&gt;This approach is very easy to use but you should not versionate &lt;code&gt;.production.js&lt;/code&gt; file, as it will contain sensitive data. In your build process consider injecting this file from some other secure location.&lt;/p&gt;

&lt;p&gt;An alternative could be to use environment variables only for the production file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;//.production.js 
module.exports = {
    API_URL: process.env.API_URL || 'some_value' ,
    API_KEY: process.env.API_KEY,
    SECRET_KEY: process.env.SECRET_KEY,
    ... 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The good thing about this approach is that you can even mix the two things or swap them altogether.&lt;/p&gt;

&lt;p&gt;Happy coding with your configurations ;)&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="nodejs" /><category term="configuration" /><category term="laravel" /><summary type="html">Imagine you have a NodeJS app you’re writing, and this app runs on several different environments:</summary></entry><entry><title type="html">Designing the documentation for a tech product</title><link href="https://michelenasti.com/2018/07/10/designing-the-documentation-for-a-tech-product.html" rel="alternate" type="text/html" title="Designing the documentation for a tech product" /><published>2018-07-10T00:00:00+02:00</published><updated>2018-07-10T23:21:29+02:00</updated><id>https://michelenasti.com/2018/07/10/designing-the-documentation-for-a-tech-product</id><content type="html" xml:base="https://michelenasti.com/2018/07/10/designing-the-documentation-for-a-tech-product.html">&lt;p&gt;What makes a product a &lt;em&gt;great&lt;/em&gt; product?&lt;/p&gt;

&lt;p&gt;one might say the &lt;strong&gt;features&lt;/strong&gt;, others may say the &lt;strong&gt;ease of using&lt;/strong&gt; these features writing less code, with more throughput, etc.&lt;/p&gt;

&lt;p&gt;I agree with this definition; everyday in my job I use tools that can deploy rockets to the moon and others that can at most change the color of a text. But let me tell you how I choose my lethal weapons: by their &lt;strong&gt;documentation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/documentation.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;one-of-the-last-things-a-developer-thinks-about&quot;&gt;One of the last things a developer thinks about&lt;/h2&gt;

&lt;p&gt;you write a fantastic tool that automatizes a part of your job and you think it might be useful for others, too. What do you do?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Put on github&lt;/li&gt;
  &lt;li&gt;Write a simple Readme.md&lt;/li&gt;
  &lt;li&gt;Wait for people coming&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And nobody comes. Or, people coming will just watch and pass by, preferring another older tool with less features.&lt;/p&gt;

&lt;p&gt;To spread your product as much as possible you have to impersonate your users and think like them. In your Readme you have to write &lt;em&gt;at least&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What does this tool do&lt;/li&gt;
  &lt;li&gt;How&lt;/li&gt;
  &lt;li&gt;What do you need to start/install the tool&lt;/li&gt;
  &lt;li&gt;How to configure it&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This applies to commercial tools too, infact &lt;strong&gt;it is the last free thing you can do to spread your product&lt;/strong&gt; - marketing costs money!&lt;/p&gt;

&lt;h2 id=&quot;my-job-for-the-last-two-years&quot;&gt;My job for the last two years&lt;/h2&gt;

&lt;p&gt;In my last two years I’ve worked (and still working) for a very big digital product. (I have worked also on other things, but this has been one of my exclusive tasks). I started with knowing nothing about it, and now I know it better than anyone else.&lt;/p&gt;

&lt;p&gt;My job? Designing the documentation website. I had to explain to a complete ignorant, like myself, how to use this product to obtain any possible goal.&lt;/p&gt;

&lt;p&gt;It was not an easy journey: for example, available documentation was written in &lt;em&gt;pdf&lt;/em&gt; or &lt;em&gt;doc&lt;/em&gt; documents, not the best solution in 2016. And not all the documentation was publicly accessible.&lt;/p&gt;

&lt;p&gt;The product is old: it started in 1999 and still kicks asses!&lt;/p&gt;

&lt;p&gt;The product is big: competitors don’t have many features this product has.&lt;/p&gt;

&lt;p&gt;So: what’s the job?&lt;/p&gt;

&lt;h2 id=&quot;my-solution-two-websites-for-one-documentation&quot;&gt;My solution: two websites for one documentation&lt;/h2&gt;

&lt;p&gt;I’ve decided to create two websites:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The first one explains, in current English, every possible feature in the form of a tutorial. Many topics are explored in sections (for example there’s the &lt;em&gt;security&lt;/em&gt; section).&lt;/li&gt;
  &lt;li&gt;The second website contains just the APIs and explains, for every API, what every field does. It also contains examples of requests and responses.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first website was made using &lt;a href=&quot;Https://jekyllrb.com&quot;&gt;jekyll&lt;/a&gt;; the second was created using a tool called &lt;a href=&quot;https://github.com/lord/slate&quot;&gt;Slate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the first website I think I have covered everything: form how to sign up to how to handle custom configurations.&lt;/p&gt;

&lt;p&gt;Every API referenced in the jekyll documentation is linked to the slate one, so a user can easily dive in details.&lt;/p&gt;

&lt;h2 id=&quot;the-most-difficult-part&quot;&gt;The most difficult part&lt;/h2&gt;

&lt;p&gt;Architecturing the whole solution was the toughest job.&lt;/p&gt;

&lt;p&gt;I had to be sure everything was clear enough for newcomers, and also clear for experienced customers.&lt;/p&gt;

&lt;p&gt;I had to organize stuff into chapters, sections, remembering where and when I was going to talk about a topic and to link it in the future.&lt;/p&gt;

&lt;p&gt;Then, the job of actually writing the documentation was easy (and a little bit boring!) because the most difficult part was already done.&lt;/p&gt;

&lt;p&gt;I’ve not mentioned other technical aspects: allow users to search the docs, deploy a beta version of the docs for internal and review purposes, handle versions…&lt;/p&gt;

&lt;h2 id=&quot;feedbacks&quot;&gt;Feedbacks&lt;/h2&gt;

&lt;p&gt;During my job I have talked to many people who has read “my” documentation. They told me it was extremely clear and they loved the examples, it made the whole thing more readable.&lt;/p&gt;

&lt;p&gt;Even my bosses think that the documentation is helping them in expanding the product to new potential  customers.&lt;/p&gt;

&lt;p&gt;I feel proud that my job is helping the company and customers to reach their respective goals. I really enjoy working for public products!&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="Documentation" /><category term="Work" /><summary type="html">What makes a product a great product?</summary></entry><entry><title type="html">Come creare luoghi di lavoro in cui é bello recarsi</title><link href="https://michelenasti.com/2018/06/20/come-creare-luoghi-di-lavoro-in-cui-le-persone-sono-felici-di-recarsi.html" rel="alternate" type="text/html" title="Come creare luoghi di lavoro in cui é bello recarsi" /><published>2018-06-20T00:00:00+02:00</published><updated>2018-06-20T10:38:45+02:00</updated><id>https://michelenasti.com/2018/06/20/come-creare-luoghi-di-lavoro-in-cui-le-persone-sono-felici-di-recarsi</id><content type="html" xml:base="https://michelenasti.com/2018/06/20/come-creare-luoghi-di-lavoro-in-cui-le-persone-sono-felici-di-recarsi.html">&lt;p&gt;Dovreste saperlo un po’ tutti, ormai, che &lt;strong&gt;lavoro da remoto&lt;/strong&gt;. Ai tempi feci questa scelta perchè non ce la facevo più a viaggiare 2 ore della mia vita in un autobus che restava puntualmente imbottigliato nel traffico. Ma &lt;strong&gt;il lavoro “tradizionale” è così brutto?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Estremizziamo: ha senso, nel 2018, parlare ancora di uffici? E’ plausibile prevedere che &lt;em&gt;nel 2030 lavoreremo tutti da casa?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ho conosciuto molte persone che sono felici di andare a lavoro&lt;/strong&gt;, che amano la compagnia dei colleghi, e che si trovano bene col proprio capo. Per queste persone i soldi non sono importanti (ma guadagnano quanto basta per vivere felicemente).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recarsi per 200 giorni all’anno in un posto in cui devi trascorrerci almeno 8 ore, e non trovarsi bene, è un suicidio morale.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Quello che quindi consiglio al tuo boss è: &lt;strong&gt;rendi l’ufficio un posto in cui i tuoi dipendenti VOGLIONO andare!&lt;/strong&gt; (…E non dove &lt;em&gt;devono&lt;/em&gt; andare). Vediamo come.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Indoor-Garden-For-Office-Building-2013-Glass-Ceiling-With-Steel-And-Wooden-Frame-Design.jpg&quot; alt=&quot;&quot; title=&quot;Figo un ufficio così, vero?&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Se le caffetterie hanno giocato un ruolo fondamentale nell’Illuminismo, quanto è importante lo spazio dove si lavora nel decretare il successo dei nostri progetti?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;E’ probabile che nell’Illuminismo non avevano possibilità di sperimentare col lavoro da remoto, ma &lt;strong&gt;grandi compagnie che guidano il futuro&lt;/strong&gt; (Google, Apple…) &lt;strong&gt;si sono apertamente schierate contro il remote working&lt;/strong&gt; (e a favore dello smark working, e di questo ne parleremo in un altro articolo). &lt;strong&gt;L’obiettivo è di favorire la comunicazione e lo scambio di idee, e il lavoro da remoto sembra essere un ostacolo.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;serve molto di più per creare un posto dove le idee migliori emergano, dove si possa essere produttivi e, soprattutto, a proprio agio.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Non basta una sede con biliardini e tavoli da ping pong&lt;/strong&gt;: nelle sedi in cui ho visto queste cose, i dipendenti hanno candidamente ammesso che non li usano per non disturbare gli altri. Il cambio deve essere culturale!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ci siano essenzialmente due motivi per cui lavorare sotto lo stesso tetto sia di valore: stringere legami e creare idee.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;L’uomo è animale sociale, e se sei un tipo solitario, &lt;strong&gt;i colleghi saranno le persone che vedrai di più (non può farti che bene)&lt;/strong&gt;. I legami che si stringono con i colleghi possono durare più del rapporto di lavoro. E all’inizio della carriera i più esperti possono farti da mentore e aiutarti nelle scelte e a diventare più bravo.&lt;/p&gt;

&lt;p&gt;Ma la cosa più interessante è il creare idee. Ci piace pensare che il &lt;em&gt;genio&lt;/em&gt; esca all’improvviso, magari in sogno, o più semplicemente mentre si sta facendo altro e si viene folgorati da un’intuizione. Invece sembra che le idee nascano in modi profondamente diversi; &lt;strong&gt;le connessioni casuali con persone che hanno altre idee genera un mix di confusione e chiarezza che porta a ciò che chiamiamo creatività&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;due-parole-sul-caffè&quot;&gt;Due parole sul caffè&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Quando vuoi parlare con un collega, è molto probabile che tu gli dica “andiamoci a prendere un caffè”.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/caffe-distributore-automatico-ufficio_-672x351.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;E’ stato dimostrato che le chiacchierate al distributore (o alla macchinetta del caffè) sono &lt;a href=&quot;https://www.nytimes.com/2012/07/15/jobs/group-breaks-can-raise-workplace-productivity.html&quot;&gt;fondamentali per aumentare la produttività&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Come scusa? Ma alla macchinetta del caffè non si cazzeggia?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;No(n solo), alla macchinetta del caffè si cazzeggia pure, ma più spesso si chiacchiera dei progetti in corso, si chiede aiuto per superare un ostacolo.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;se avete introdotto policy per ridurre durata e frequenza delle pause caffè in azienda, c’è il rischio che stiate mettendo i bastoni fra le ruote all’innovazione!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;la-ricetta-per-lambiente-di-lavoro-perfetto&quot;&gt;La ricetta per l’ambiente di lavoro perfetto&lt;/h2&gt;

&lt;p&gt;Non ce l’ho, ma posso provare a raccontare i miei desiderata:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Niente regole su come e quando andare alla macchinetta del caffè.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Niente regole sulle cuffiette&lt;/strong&gt;. I programmatori hanno bisogno di lunghe ore di concentrazione per entrare “in the zone”.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Organizza cene&lt;/strong&gt;, uscite, viaggi, visite con l’ufficio. Coinvolgi le famiglie. (Ne bastano un paio all’anno!)&lt;/li&gt;
  &lt;li&gt;Se possibile, &lt;strong&gt;prevedi un parcheggio aziendale&lt;/strong&gt;. I mezzi di trasporto non sono eccellenti (e puntuali) in tutte le città del mondo!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Aiuta le persone a tirare fuori idee nuove&lt;/strong&gt; sul prodotto, sull’ufficio, sull’organizzazione. &lt;strong&gt;Ascolta tutti&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Investi sulla formazione&lt;/strong&gt;. Non significa solo mandare la gente ai corsi. Significa comprare libri, ascoltare loro in che direzione vogliono andare con la loro specializzazione, e soprattutto &lt;strong&gt;dargli il tempo di studiare durante l’orario di lavoro&lt;/strong&gt;. Su questo punto tornerò in un altro articolo perchè è determinante anche per l’innovazione interna.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;I dipendenti sono l’asset che vale di più, non farlo svalutare!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;se-ti-piace-questo-argomento&quot;&gt;Se ti piace questo argomento…&lt;/h2&gt;

&lt;p&gt;Ti consiglio questo libro, &lt;a href=&quot;https://amzn.to/2toNoae&quot;&gt;Human centered work&lt;/a&gt;, da cui ho preso le citazioni che hai letto in questo articolo.&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=ilblodimicnas-21&amp;amp;o=29&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=8823836425&amp;amp;linkId=c724d19e9ba8713adb49f1e18311177b&quot;&gt;&lt;/iframe&gt;</content><author><name>musikele</name></author><category term="Italiano" /><category term="lavoro" /><category term="work" /><category term="ufficio" /><summary type="html">Dovreste saperlo un po’ tutti, ormai, che lavoro da remoto. Ai tempi feci questa scelta perchè non ce la facevo più a viaggiare 2 ore della mia vita in un autobus che restava puntualmente imbottigliato nel traffico. Ma il lavoro “tradizionale” è così brutto?</summary></entry><entry><title type="html">Get the list of files blocked by a process in Linux</title><link href="https://michelenasti.com/2018/06/19/get-the-list-of-files-blocked-by-a-process-in-linux.html" rel="alternate" type="text/html" title="Get the list of files blocked by a process in Linux " /><published>2018-06-19T00:00:00+02:00</published><updated>2018-06-19T19:13:34+02:00</updated><id>https://michelenasti.com/2018/06/19/get-the-list-of-files-blocked-by-a-process-in-linux</id><content type="html" xml:base="https://michelenasti.com/2018/06/19/get-the-list-of-files-blocked-by-a-process-in-linux.html">&lt;p&gt;Problem: &lt;strong&gt;I had a process using 90% of cpu, couldn’t understand what was going on.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After seeking the log files and other stuff, I still couldn’t undestand why it was taking so much CPU.&lt;/p&gt;

&lt;p&gt;I decided to give a look at what files are used by this process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/find-file-linux-code_magnifying_glass_zero-1&quot; alt=&quot;&quot; title=&quot;find files blocked by processes in linux&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;its-so-easy&quot;&gt;It’s so easy&lt;/h2&gt;

&lt;p&gt;first, &lt;strong&gt;find the PID of your process.&lt;/strong&gt; My preferred way to do it is with the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ps -ef | grep &amp;lt;command_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you’ll see an output like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ps -ef | grep &amp;lt;command&amp;gt;
root     13141     1 69 10:36 ?        02:52:34 /path/to/&amp;lt;command&amp;gt;
admin    31182 30798  0 14:45 pts/2    00:00:00 grep --color=auto &amp;lt;command&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The pid of this process is &lt;code&gt;13141&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And now &lt;strong&gt;let’s get the list of files blocked by this process&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ls -al /proc/13141/fd 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The system might ask you to run this command as privileged user, so don’t disregard using &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;total 0
dr-x------ 2 root root  0 Jun 19 12:12 .
dr-xr-xr-x 8 root root  0 Jun 19 10:36 ..
lrwx------ 1 root root 64 Jun 19 12:12 0 -&amp;gt; /dev/null
lrwx------ 1 root root 64 Jun 19 12:12 1 -&amp;gt; /dev/null
lr-x------ 1 root root 64 Jun 19 14:30 10 -&amp;gt; /run/sdk/user.uid.db
lr-x------ 1 root root 64 Jun 19 14:30 11 -&amp;gt; /run/sdk/user.shadow.db
lrwx------ 1 root root 64 Jun 19 12:12 2 -&amp;gt; /dev/null
lrwx------ 1 root root 64 Jun 19 12:12 3 -&amp;gt; socket:[2342197]
lrwx------ 1 root root 64 Jun 19 12:12 4 -&amp;gt; socket:[2342201]
lr-x------ 1 root root 64 Jun 19 12:12 5 -&amp;gt; anon_inode:inotify
lr-x------ 1 root root 64 Jun 19 12:12 6 -&amp;gt; /backup_rsync/backup/20170825-1225/lib/azure-cli/lib/python2.7/site-packages/azure/mgmt/network/v2017_03_01/models
lr-x------ 1 root root 64 Jun 19 12:12 7 -&amp;gt; /run/sdk/lock/lock_pw
lr-x------ 1 root root 64 Jun 19 14:30 8 -&amp;gt; /run/sdk/user.name.db
lr-x------ 1 root root 64 Jun 19 14:30 9 -&amp;gt; /run/sdk/user.misc.db
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apart from a lot of stuff that seems creepy (&lt;code&gt;/dev/null&lt;/code&gt;, &lt;code&gt;socket:\\\[...\\\]&lt;/code&gt;), I can clearly spot a file used by my process: the one starting with &lt;code&gt;/backup_rsync&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Running this command other two-three times, I understood that it is not hung, it is just scanning every file in my system and checking against a pattern. Very poor design.&lt;/p&gt;

&lt;p&gt;Hope this helps!&lt;/p&gt;</content><author><name>musikele</name></author><category term="English" /><category term="linux" /><category term="shell" /><category term="bash" /><summary type="html">Problem: I had a process using 90% of cpu, couldn’t understand what was going on.</summary></entry><entry><title type="html">[libri] Sei proprio il mio typo: la vita segreta dei caratteri tipografici</title><link href="https://michelenasti.com/2018/06/05/libri-sei-proprio-il-mio-typo-la-vita-segreta-dei-font.html" rel="alternate" type="text/html" title="[libri] Sei proprio il mio typo: la vita segreta dei caratteri tipografici" /><published>2018-06-06T00:00:00+02:00</published><updated>2018-06-06T15:01:10+02:00</updated><id>https://michelenasti.com/2018/06/05/libri-sei-proprio-il-mio-typo-la-vita-segreta-dei-font</id><content type="html" xml:base="https://michelenasti.com/2018/06/05/libri-sei-proprio-il-mio-typo-la-vita-segreta-dei-font.html">&lt;p&gt;Questa è la storia di un libro che ho comprato due volte.&lt;/p&gt;

&lt;p&gt;La prima volta purtroppo l’ho perso in aereo, dopo un primo capitolo che raccontava &lt;a href=&quot;https://michelenasti.com/2017/12/01/batman-ha-ispirato-il-comic-sans-storia-di-un-font-che-tutti-odiano.html&quot;&gt;la storia del Comic Sans&lt;/a&gt; (puoi leggere un mio riassunto al link precedente!).&lt;/p&gt;

&lt;p&gt;L’ho quindi ricomprato e me lo sono finito, scoprendo &lt;strong&gt;la storia segreta dei font.&lt;/strong&gt;&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=ilblodimicnas-21&amp;amp;o=29&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B00QFIVE8I&amp;amp;linkId=c330ea265a0ba9192f74f16adb252a00&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Già, i font: su questo blog uso un (o una?) font (&lt;a href=&quot;https://fonts.google.com/specimen/Libre+Baskerville&quot;&gt;Libre Baskerville&lt;/a&gt;), ossia un insieme di disegni che compongono i caratteri, realizzati da artisti di tutto il mondo che spesso non vedono riconosciuto il loro lavoro.&lt;/p&gt;

&lt;p&gt;I primi font risalgono addirittura a Gutemberg, e in passato &lt;strong&gt;realizzare un font era un lavoraccio da fonderia&lt;/strong&gt;: oltre alla parte dei disegni, bisognava poi fondere il metallo per realizzare i singoli caratteri in tutte le forme e misure. Le fonderie/tipografie poi rivendevano questi stampi a chi volesse utilizzarli per i propri progetti!&lt;/p&gt;

&lt;p&gt;Quindi, non tutti i caratteri erano disponibili ovunque, e spesso le fonderie si copiavano tra loro.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I font più usati al mondo sono stati tutti realizzati nel 1900&lt;/strong&gt;, quando non c’erano neanche i PC.&lt;/p&gt;

&lt;p&gt;La prima macchina da scrivere che permetteva di cambiare font fu la IBM Selectric, cambiando la testina. Ecco un video della Selectric all’opera:&lt;/p&gt;

&lt;blockquote class=&quot;imgur-embed-pub&quot; lang=&quot;en&quot; data-id=&quot;zCg1LX1&quot;&gt;&lt;a href=&quot;//imgur.com/zCg1LX1&quot;&gt;IBM Selectric ball head typewritter &lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//s.imgur.com/min/embed.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Torniamo al libro: Oltre ai font più famosi e a curiosità tipografiche, c’è anche la storia delle persone che lo hanno realizzato, &lt;strong&gt;gente che lavora per un ideale di bellezza molto diverso da quello che immaginiamo noi&lt;/strong&gt;. Nessuna è diventata ricca.&lt;/p&gt;

&lt;p&gt;Il font più usato al mondo risulta infatti l’&lt;strong&gt;Helvetica&lt;/strong&gt;, specialmente per i titoli:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/2/28/HelveticaSpecimenCH.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Altri font famosissimi sono il &lt;strong&gt;Gill Sans&lt;/strong&gt;, il &lt;strong&gt;Futura&lt;/strong&gt;, l’&lt;strong&gt;Univers&lt;/strong&gt;…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/4/48/GillSansEG.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/5/50/Futura_Specimen.svg/1200px-Futura_Specimen.svg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/8/8e/UniversSpec.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;chi-dovrebbe-leggere-questo-libro&quot;&gt;Chi dovrebbe leggere questo libro&lt;/h3&gt;

&lt;p&gt;Avete mai sentito la leggenda metropolitana che basta cambiare la font di un sito e questo sembrerà completamente rinnovato? Che ci crediate o no, il mondo si accorge di queste cose. &lt;a href=&quot;http://www.bloggokin.it/2009/09/15/ikea-font-verdana-o-futura/&quot;&gt;Nel 2009 Ikea fu messa alla gogna per aver cambiato il font del suo catalogo, dal Futura al Verdana&lt;/a&gt;…&lt;/p&gt;

&lt;p&gt;Io che sono un programmatore, e che spesso mi trovo a implementare il design degli altri, ho trovato questo libro interessante e gradevole.&lt;/p&gt;

&lt;p&gt;In generale &lt;strong&gt;se vi occupate di design a qualsiasi livello (packaging, pubblicità, marketing, web…), questo libro dovrebbe essere nella vostra lista&lt;/strong&gt;.&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=ilblodimicnas-21&amp;amp;o=29&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B00QFIVE8I&amp;amp;linkId=c330ea265a0ba9192f74f16adb252a00&quot;&gt;&lt;/iframe&gt;</content><author><name>musikele</name></author><category term="Italiano" /><category term="font" /><category term="libro" /><category term="sei proprio il mio typo" /><summary type="html">Questa è la storia di un libro che ho comprato due volte.</summary></entry></feed>